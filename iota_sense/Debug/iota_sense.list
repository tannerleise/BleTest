
iota_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064fc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000008  080068b8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 MB_MEM2       00000883  20000028  080068d8  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200008ac  0800715b  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200008e4  08007190  000208e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200008f8  080071a1  000208f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  080071a1  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208f5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  00020925  2**0
                  CONTENTS, READONLY
 15 .debug_info   000221c0  00000000  00000000  00020968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004e68  00000000  00000000  00042b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002240  00000000  00000000  00047990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000019f4  00000000  00000000  00049bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000298f1  00000000  00000000  0004b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000231cf  00000000  00000000  00074eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ef6d4  00000000  00000000  00098084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008d70  00000000  00000000  00187758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001904c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200008f8 	.word	0x200008f8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006620 	.word	0x08006620

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200008fc 	.word	0x200008fc
 8000178:	08006620 	.word	0x08006620

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f004 ffff 	bl	80051ac <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 fa9a 	bl	80046ea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08006638 	.word	0x08006638

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetDeviceID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <LL_DBGMCU_GetRevisionID+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	0c1b      	lsrs	r3, r3, #16
 8000366:	b29b      	uxth	r3, r3
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e0042000 	.word	0xe0042000

08000378 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	041b      	lsls	r3, r3, #16
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	605a      	str	r2, [r3, #4]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	605a      	str	r2, [r3, #4]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	431a      	orrs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	615a      	str	r2, [r3, #20]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	615a      	str	r2, [r3, #20]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	619a      	str	r2, [r3, #24]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	22ca      	movs	r2, #202	; 0xca
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2253      	movs	r2, #83	; 0x53
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f023 0207 	bic.w	r2, r3, #7
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <MX_APPE_Config+0x18>)
 80004a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004a6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80004a8:	f000 f824 	bl	80004f4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004ac:	f000 f864 	bl	8000578 <Config_HSE>

  return;
 80004b0:	bf00      	nop
}
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	58004000 	.word	0x58004000

080004b8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80004bc:	f000 f870 	bl	80005a0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004c0:	f000 f888 	bl	80005d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c4:	4903      	ldr	r1, [pc, #12]	; (80004d4 <MX_APPE_Init+0x1c>)
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 f9c2 	bl	8000850 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004cc:	f000 f890 	bl	80005f0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004d0:	bf00      	nop
}
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200009f0 	.word	0x200009f0

080004d8 <Init_Smps>:

void Init_Smps(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80004dc:	bf00      	nop
}
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <Init_Exti>:

void Init_Exti(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80004ea:	2050      	movs	r0, #80	; 0x50
 80004ec:	f7ff fe80 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004f0:	bf00      	nop
}
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80004f8:	f000 f804 	bl	8000504 <Reset_BackupDomain>

  Reset_IPCC();
 80004fc:	f000 f81a 	bl	8000534 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000500:	bf00      	nop
}
 8000502:	bd80      	pop	{r7, pc}

08000504 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000508:	f7ff feda 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00d      	beq.n	800052e <Reset_BackupDomain+0x2a>
 8000512:	f7ff fee8 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d108      	bne.n	800052e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800051c:	f000 ff9a 	bl	8001454 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000520:	f000 ff98 	bl	8001454 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000524:	f7ff feaa 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000528:	f7ff feb9 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800052c:	bf00      	nop
 800052e:	bf00      	nop
}
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000538:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800053c:	f7ff fee6 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <Reset_IPCC+0x40>)
 8000544:	f7ff ff5e 	bl	8000404 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <Reset_IPCC+0x40>)
 800054c:	f7ff ff68 	bl	8000420 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000550:	213f      	movs	r1, #63	; 0x3f
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <Reset_IPCC+0x40>)
 8000554:	f7ff ff10 	bl	8000378 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000558:	213f      	movs	r1, #63	; 0x3f
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <Reset_IPCC+0x40>)
 800055c:	f7ff ff2f 	bl	80003be <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000560:	213f      	movs	r1, #63	; 0x3f
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <Reset_IPCC+0x40>)
 8000564:	f7ff ff1a 	bl	800039c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000568:	213f      	movs	r1, #63	; 0x3f
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <Reset_IPCC+0x40>)
 800056c:	f7ff ff39 	bl	80003e2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000570:	bf00      	nop
}
 8000572:	bd80      	pop	{r7, pc}
 8000574:	58000c00 	.word	0x58000c00

08000578 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f004 fea0 	bl	80052c4 <OTP_Read>
 8000584:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe41 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000596:	bf00      	nop
 8000598:	bf00      	nop
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <System_Init>:

static void System_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  Init_Smps();
 80005a4:	f7ff ff98 	bl	80004d8 <Init_Smps>

  Init_Exti();
 80005a8:	f7ff ff9d 	bl	80004e6 <Init_Exti>

  Init_Rtc();
 80005ac:	f000 f802 	bl	80005b4 <Init_Rtc>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <Init_Rtc+0x1c>)
 80005ba:	f7ff ff4c 	bl	8000456 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005be:	2100      	movs	r1, #0
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Init_Rtc+0x1c>)
 80005c2:	f7ff ff58 	bl	8000476 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <Init_Rtc+0x1c>)
 80005c8:	f7ff ff38 	bl	800043c <LL_RTC_EnableWriteProtection>

  return;
 80005cc:	bf00      	nop
}
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40002800 	.word	0x40002800

080005d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f7ff fe3a 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005e0:	f005 fd64 	bl	80060ac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff fded 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80005ea:	bf00      	nop
}
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005f6:	f004 fc23 	bl	8004e40 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <appe_Tl_Init+0x50>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	2004      	movs	r0, #4
 8000600:	f005 fe92 	bl	8006328 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <appe_Tl_Init+0x54>)
 8000606:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <appe_Tl_Init+0x58>)
 800060a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <appe_Tl_Init+0x5c>)
 8000612:	f004 fadb 	bl	8004bcc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <appe_Tl_Init+0x60>)
 8000618:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <appe_Tl_Init+0x64>)
 800061c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <appe_Tl_Init+0x68>)
 8000620:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000622:	f240 533c 	movw	r3, #1340	; 0x53c
 8000626:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fd49 	bl	80050c4 <TL_MM_Init>

  TL_Enable();
 8000632:	f004 fbff 	bl	8004e34 <TL_Enable>

  return;
 8000636:	bf00      	nop
}
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08004c05 	.word	0x08004c05
 8000644:	20000578 	.word	0x20000578
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000675 	.word	0x08000675
 8000650:	20000790 	.word	0x20000790
 8000654:	20000684 	.word	0x20000684
 8000658:	2000003c 	.word	0x2000003c

0800065c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000666:	bf00      	nop
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	330b      	adds	r3, #11
 8000682:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800068e:	2b07      	cmp	r3, #7
 8000690:	d81f      	bhi.n	80006d2 <APPE_SysUserEvtRx+0x5e>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <APPE_SysUserEvtRx+0x24>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006cb 	.word	0x080006cb
 80006a0:	080006d3 	.word	0x080006d3
 80006a4:	080006d3 	.word	0x080006d3
 80006a8:	080006d3 	.word	0x080006d3
 80006ac:	080006d3 	.word	0x080006d3
 80006b0:	080006d3 	.word	0x080006d3
 80006b4:	080006d3 	.word	0x080006d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 f841 	bl	8004744 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f81b 	bl	80006fe <APPE_SysEvtReadyProcessing>
    break;
 80006c8:	e004      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f806 	bl	80006dc <APPE_SysEvtError>
    break;
 80006d0:	e000      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80006d2:	bf00      	nop
  }

  return;
 80006d4:	bf00      	nop
}
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	330b      	adds	r3, #11
 80006ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3302      	adds	r3, #2
 80006f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006f2:	bf00      	nop
}
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b08a      	sub	sp, #40	; 0x28
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	330b      	adds	r3, #11
 8000722:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	3302      	adds	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11d      	bne.n	800076e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000732:	f7ff fd2b 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000736:	230f      	movs	r3, #15
 8000738:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800073a:	237f      	movs	r3, #127	; 0x7f
 800073c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800073e:	f7ff fe0d 	bl	800035c <LL_DBGMCU_GetRevisionID>
 8000742:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	b29b      	uxth	r3, r3
 8000748:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800074a:	f7ff fdf9 	bl	8000340 <LL_DBGMCU_GetDeviceID>
 800074e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	b29b      	uxth	r3, r3
 8000754:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f003 ffdc 	bl	8004718 <SHCI_C2_Config>

    APP_BLE_Init();
 8000760:	f004 feba 	bl	80054d8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000764:	2100      	movs	r1, #0
 8000766:	2001      	movs	r0, #1
 8000768:	f005 fcb2 	bl	80060d0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800076c:	e007      	b.n	800077e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
  return;
 800077c:	bf00      	nop
 800077e:	bf00      	nop
}
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
 800078e:	f005 fccf 	bl	8006130 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}

08000796 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800079a:	bf00      	nop
}
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f005 fcbd 	bl	8006130 <UTIL_SEQ_Run>

  return;
 80007b6:	bf00      	nop
}
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2004      	movs	r0, #4
 80007ca:	f005 fdcf 	bl	800636c <UTIL_SEQ_SetTask>
  return;
 80007ce:	bf00      	nop
}
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007de:	2002      	movs	r0, #2
 80007e0:	f005 fe30 	bl	8006444 <UTIL_SEQ_SetEvt>
  return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f005 fe45 	bl	8006484 <UTIL_SEQ_WaitEvt>
  return;
 80007fa:	bf00      	nop
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <LL_EXTI_EnableIT_0_31>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 800080e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	58000800 	.word	0x58000800

0800082c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4313      	orrs	r3, r2
 800083e:	600b      	str	r3, [r1, #0]

}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	58000800 	.word	0x58000800

08000850 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800085c:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <HW_TS_Init+0x188>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	22ca      	movs	r2, #202	; 0xca
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HW_TS_Init+0x188>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2253      	movs	r2, #83	; 0x53
 800086a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800086c:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <HW_TS_Init+0x18c>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a5a      	ldr	r2, [pc, #360]	; (80009dc <HW_TS_Init+0x18c>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000878:	4b58      	ldr	r3, [pc, #352]	; (80009dc <HW_TS_Init+0x18c>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f1c3 0304 	rsb	r3, r3, #4
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <HW_TS_Init+0x190>)
 800088c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800088e:	4b53      	ldr	r3, [pc, #332]	; (80009dc <HW_TS_Init+0x18c>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000896:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800089a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	fa92 f2a2 	rbit	r2, r2
 80008a2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d101      	bne.n	80008b2 <HW_TS_Init+0x62>
  {
    return 32U;
 80008ae:	2220      	movs	r2, #32
 80008b0:	e003      	b.n	80008ba <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	40d3      	lsrs	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <HW_TS_Init+0x194>)
 80008c4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <HW_TS_Init+0x18c>)
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	3301      	adds	r3, #1
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <HW_TS_Init+0x198>)
 80008d8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80008da:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <HW_TS_Init+0x198>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a40      	ldr	r2, [pc, #256]	; (80009e4 <HW_TS_Init+0x194>)
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80008ec:	4a3c      	ldr	r2, [pc, #240]	; (80009e0 <HW_TS_Init+0x190>)
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	40d3      	lsrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d904      	bls.n	8000908 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <HW_TS_Init+0x19c>)
 8000900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e003      	b.n	8000910 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <HW_TS_Init+0x19c>)
 800090e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000910:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000914:	f7ff ff8a 	bl	800082c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000918:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800091c:	f7ff ff72 	bl	8000804 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d13d      	bne.n	80009a2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <HW_TS_Init+0x1a0>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <HW_TS_Init+0x1a4>)
 800092e:	f04f 32ff 	mov.w	r2, #4294967295
 8000932:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000934:	2300      	movs	r3, #0
 8000936:	77fb      	strb	r3, [r7, #31]
 8000938:	e00c      	b.n	8000954 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800093a:	7ffa      	ldrb	r2, [r7, #31]
 800093c:	492e      	ldr	r1, [pc, #184]	; (80009f8 <HW_TS_Init+0x1a8>)
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	440b      	add	r3, r1
 8000948:	330c      	adds	r3, #12
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	3301      	adds	r3, #1
 8000952:	77fb      	strb	r3, [r7, #31]
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	2b05      	cmp	r3, #5
 8000958:	d9ef      	bls.n	800093a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HW_TS_Init+0x1ac>)
 800095c:	2206      	movs	r2, #6
 800095e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <HW_TS_Init+0x188>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HW_TS_Init+0x188>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800096e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HW_TS_Init+0x188>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HW_TS_Init+0x188>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000980:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HW_TS_Init+0x1b0>)
 8000984:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000988:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800098a:	2003      	movs	r0, #3
 800098c:	f000 fca9 	bl	80012e2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HW_TS_Init+0x188>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HW_TS_Init+0x188>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	e009      	b.n	80009b6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HW_TS_Init+0x188>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 fc88 	bl	80012c6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HW_TS_Init+0x188>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80009be:	2200      	movs	r2, #0
 80009c0:	2103      	movs	r1, #3
 80009c2:	2003      	movs	r0, #3
 80009c4:	f000 fc4b 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 fc62 	bl	8001292 <HAL_NVIC_EnableIRQ>

  return;
 80009ce:	bf00      	nop
}
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200009f0 	.word	0x200009f0
 80009dc:	40002800 	.word	0x40002800
 80009e0:	200009ad 	.word	0x200009ad
 80009e4:	200009ae 	.word	0x200009ae
 80009e8:	200009b0 	.word	0x200009b0
 80009ec:	200009b2 	.word	0x200009b2
 80009f0:	200009ac 	.word	0x200009ac
 80009f4:	200009a8 	.word	0x200009a8
 80009f8:	20000914 	.word	0x20000914
 80009fc:	200009a4 	.word	0x200009a4
 8000a00:	58000800 	.word	0x58000800

08000a04 <LL_RCC_LSE_SetDriveCapability>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a14:	f023 0218 	bic.w	r2, r3, #24
 8000a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_AHB2_GRP1_EnableClock>:
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a54:	68fb      	ldr	r3, [r7, #12]
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 fa5d 	bl	8000f24 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000a6a:	f7ff fd17 	bl	800049c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f80f 	bl	8000a90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a72:	f000 f86f 	bl	8000b54 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000a76:	f000 f88d 	bl	8000b94 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f8db 	bl	8000c34 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a7e:	f000 f8a5 	bl	8000bcc <MX_RTC_Init>
  MX_RF_Init();
 8000a82:	f000 f89b 	bl	8000bbc <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000a86:	f7ff fd17 	bl	80004b8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000a8a:	f7ff fe7c 	bl	8000786 <MX_APPE_Process>
 8000a8e:	e7fc      	b.n	8000a8a <main+0x28>

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09a      	sub	sp, #104	; 0x68
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2248      	movs	r2, #72	; 0x48
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fd84 	bl	80065ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ab6:	f000 fccd 	bl	8001454 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000aba:	2010      	movs	r0, #16
 8000abc:	f7ff ffa2 	bl	8000a04 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <SystemClock_Config+0xc0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ac8:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <SystemClock_Config+0xc0>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SystemClock_Config+0xc0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000adc:	2327      	movs	r3, #39	; 0x27
 8000ade:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f81f 	bl	8001b4c <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b14:	f000 f895 	bl	8000c42 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b18:	236f      	movs	r3, #111	; 0x6f
 8000b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fb7b 	bl	8002234 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b44:	f000 f87d 	bl	8000c42 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3768      	adds	r7, #104	; 0x68
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58000400 	.word	0x58000400

08000b54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2250      	movs	r2, #80	; 0x50
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 fd23 	bl	80065ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000b66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b6a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000b6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b70:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000b76:	2310      	movs	r3, #16
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 ff6a 	bl	8002a56 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000b88:	f000 f85b 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b8c:	bf00      	nop
 8000b8e:	3750      	adds	r7, #80	; 0x50
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_IPCC_Init+0x20>)
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <MX_IPCC_Init+0x24>)
 8000b9c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_IPCC_Init+0x20>)
 8000ba0:	f000 fbd2 	bl	8001348 <HAL_IPCC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000baa:	f000 f84a 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200009b4 	.word	0x200009b4
 8000bb8:	58000c00 	.word	0x58000c00

08000bbc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_RTC_Init+0x64>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bde:	220f      	movs	r2, #15
 8000be0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_RTC_Init+0x60>)
 8000be4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000be8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_RTC_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <MX_RTC_Init+0x60>)
 8000c04:	f002 f9ae 	bl	8002f64 <HAL_RTC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f818 	bl	8000c42 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_RTC_Init+0x60>)
 8000c18:	f002 faa4 	bl	8003164 <HAL_RTCEx_SetWakeUpTimer>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000c22:	f000 f80e 	bl	8000c42 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200009f0 	.word	0x200009f0
 8000c30:	40002800 	.word	0x40002800

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fef9 	bl	8000a30 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c46:	b672      	cpsid	i
}
 8000c48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <Error_Handler+0x8>

08000c4c <LL_RCC_EnableRTC>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_AHB3_GRP1_EnableClock>:
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000cd6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000cda:	f7ff ffc8 	bl	8000c6e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	202e      	movs	r0, #46	; 0x2e
 8000ce4:	f000 fabb 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000ce8:	202e      	movs	r0, #46	; 0x2e
 8000cea:	f000 fad2 	bl	8001292 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_IPCC_MspInit+0x44>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d113      	bne.n	8000d2e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000d06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d0a:	f7ff ffb0 	bl	8000c6e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	202c      	movs	r0, #44	; 0x2c
 8000d14:	f000 faa3 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000d18:	202c      	movs	r0, #44	; 0x2c
 8000d1a:	f000 faba 	bl	8001292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	202d      	movs	r0, #45	; 0x2d
 8000d24:	f000 fa9b 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000d28:	202d      	movs	r0, #45	; 0x2d
 8000d2a:	f000 fab2 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58000c00 	.word	0x58000c00

08000d3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b096      	sub	sp, #88	; 0x58
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2250      	movs	r2, #80	; 0x50
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fc2d 	bl	80065ac <memset>
  if(hrtc->Instance==RTC)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_RTC_MspInit+0x54>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d115      	bne.n	8000d88 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fe72 	bl	8002a56 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d78:	f7ff ff63 	bl	8000c42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7c:	f7ff ff66 	bl	8000c4c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d84:	f7ff ff8c 	bl	8000ca0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3758      	adds	r7, #88	; 0x58
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40002800 	.word	0x40002800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f8fa 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000dec:	f005 f820 	bl	8005e30 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000df8:	f005 f850 	bl	8005e9c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000e04:	f000 fa7c 	bl	8001300 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <SystemInit+0x98>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <SystemInit+0x98>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e38:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <SystemInit+0x9c>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e56:	f023 0305 	bic.w	r3, r3, #5
 8000e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <SystemInit+0xa0>)
 8000e78:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <SystemInit+0xa0>)
 8000e80:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	faf6fefb 	.word	0xfaf6fefb
 8000eac:	22041000 	.word	0x22041000

08000eb0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000eb0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb4:	3304      	adds	r3, #4

08000eb6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000eba:	d3f9      	bcc.n	8000eb0 <CopyDataInit>
  bx lr
 8000ebc:	4770      	bx	lr

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ebe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ec0:	3004      	adds	r0, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ec2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>
  bx lr
 8000ec6:	4770      	bx	lr

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff ff9e 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopForever+0x6>)
 8000ed2:	490c      	ldr	r1, [pc, #48]	; (8000f04 <LoopForever+0xa>)
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <LoopForever+0xe>)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f7ff ffed 	bl	8000eb6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopForever+0x12>)
 8000ede:	490c      	ldr	r1, [pc, #48]	; (8000f10 <LoopForever+0x16>)
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <LoopForever+0x1a>)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f7ff ffe7 	bl	8000eb6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopForever+0x1e>)
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <LoopForever+0x22>)
 8000eec:	2300      	movs	r3, #0
 8000eee:	f7ff ffe8 	bl	8000ec2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f005 fb63 	bl	80065bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ef6:	f7ff fdb4 	bl	8000a62 <main>

08000efa <LoopForever>:

LoopForever:
  b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000028 	.word	0x20000028
 8000f08:	080068b8 	.word	0x080068b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f0c:	200301e3 	.word	0x200301e3
 8000f10:	200301e3 	.word	0x200301e3
 8000f14:	080071a1 	.word	0x080071a1
  INIT_BSS _sbss, _ebss
 8000f18:	200008f8 	.word	0x200008f8
 8000f1c:	20000bc4 	.word	0x20000bc4

08000f20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_Init+0x3c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x3c>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f000 f984 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f40:	200f      	movs	r0, #15
 8000f42:	f000 f80f 	bl	8000f64 <HAL_InitTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	e001      	b.n	8000f56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f52:	f7ff febe 	bl	8000cd2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58004000 	.word	0x58004000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d024      	beq.n	8000fc2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f78:	f001 fb08 	bl	800258c <HAL_RCC_GetHCLKFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f98c 	bl	80012ae <HAL_SYSTICK_Config>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10f      	bne.n	8000fbc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d809      	bhi.n	8000fb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	f000 f958 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_InitTick+0x70>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e007      	b.n	8000fc6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e004      	b.n	8000fc6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e001      	b.n	8000fc6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	20000a14 	.word	0x20000a14

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000a14 	.word	0x20000a14

08001018 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTickPrio+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000000c 	.word	0x2000000c

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0c      	blt.n	80010fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_SetPendingIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	3340      	adds	r3, #64	; 0x40
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0c      	blt.n	8001138 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_ClearPendingIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	3360      	adds	r3, #96	; 0x60
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff feed 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff04 	bl	8001078 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fef7 	bl	8001094 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa4 	bl	8001204 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fefb 	bl	80010d0 <__NVIC_SetPendingIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff0b 	bl	800110c <__NVIC_ClearPendingIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_HSEM_IRQHandler+0x30>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_HSEM_IRQHandler+0x30>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	43db      	mvns	r3, r3
 8001314:	4906      	ldr	r1, [pc, #24]	; (8001330 <HAL_HSEM_IRQHandler+0x30>)
 8001316:	4013      	ands	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_HSEM_IRQHandler+0x30>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f807 	bl	8001334 <HAL_HSEM_FreeCallback>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58001500 	.word	0x58001500

08001334 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01e      	beq.n	8001398 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_IPCC_Init+0x60>)
 800135c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fcc2 	bl	8000cf4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f000 f85b 	bl	800142c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f82c 	bl	80013e0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001396:	e001      	b.n	800139c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	58000c00 	.word	0x58000c00

080013ac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	4613      	mov	r3, r2
 80013b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e00f      	b.n	800140e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <IPCC_SetDefaultCallbacks+0x44>)
 80013f8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3306      	adds	r3, #6
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <IPCC_SetDefaultCallbacks+0x48>)
 8001406:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d9ec      	bls.n	80013ee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	080013ad 	.word	0x080013ad
 8001428:	080013c7 	.word	0x080013c7

0800142c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001440:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	223f      	movs	r2, #63	; 0x3f
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	58000400 	.word	0x58000400

08001474 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_PWREx_GetVoltageRange+0x18>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	58000400 	.word	0x58000400

08001490 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014a2:	d101      	bne.n	80014a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_RCC_HSE_Enable>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_RCC_HSE_Disable>:
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_HSE_IsReady>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001502:	d101      	bne.n	8001508 <LL_RCC_HSE_IsReady+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_RCC_HSE_IsReady+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_RCC_HSI_Enable>:
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_RCC_HSI_Disable>:
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_RCC_HSI_IsReady>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d101      	bne.n	8001568 <LL_RCC_HSI_IsReady+0x18>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <LL_RCC_HSI_IsReady+0x1a>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_RCC_HSI48_Enable>:
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_RCC_HSI48_Disable>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_HSI48_IsReady>:
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d101      	bne.n	80015fa <LL_RCC_HSI48_IsReady+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_RCC_HSI48_IsReady+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_RCC_LSE_Enable>:
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_RCC_LSE_Disable>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_RCC_LSE_EnableBypass>:
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_RCC_LSE_DisableBypass>:
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RCC_LSE_IsReady>:
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d101      	bne.n	80016a6 <LL_RCC_LSE_IsReady+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_RCC_LSE_IsReady+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_LSI1_Enable>:
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_LSI1_Disable>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_LSI1_IsReady>:
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d101      	bne.n	800170e <LL_RCC_LSI1_IsReady+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_RCC_LSI1_IsReady+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_RCC_LSI2_Enable>:
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_RCC_LSI2_Disable>:
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_LSI2_IsReady>:
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b08      	cmp	r3, #8
 8001770:	d101      	bne.n	8001776 <LL_RCC_LSI2_IsReady+0x18>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_RCC_LSI2_IsReady+0x1a>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_RCC_LSI2_SetTrimming>:
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179e:	4313      	orrs	r3, r2
 80017a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_RCC_MSI_Enable>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_RCC_MSI_Disable>:
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6013      	str	r3, [r2, #0]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_MSI_IsReady>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d101      	bne.n	8001802 <LL_RCC_MSI_IsReady+0x16>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_RCC_MSI_IsReady+0x18>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_RCC_MSI_SetRange>:
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_RCC_MSI_GetRange>:
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001846:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2bb0      	cmp	r3, #176	; 0xb0
 800184c:	d901      	bls.n	8001852 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800184e:	23b0      	movs	r3, #176	; 0xb0
 8001850:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_RCC_SetSysClkSource>:
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 0203 	bic.w	r2, r3, #3
 800189c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_RCC_GetSysClkSource>:
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_SetAHBPrescaler>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_RCC_SetAHB4Prescaler>:
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800193a:	4313      	orrs	r3, r2
 800193c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_RCC_SetAPB1Prescaler>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800195e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_RCC_SetAPB2Prescaler>:
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_RCC_GetAHBPrescaler>:
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_RCC_GetAHB4Prescaler>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_PLL_Enable>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_PLL_Disable>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_PLL_IsReady>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a1e:	d101      	bne.n	8001a24 <LL_RCC_PLL_IsReady+0x18>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <LL_RCC_PLL_IsReady+0x1a>
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_PLL_GetN>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_PLL_GetR>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_PLL_GetDivider>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_PLL_GetMainSource>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_IsActiveFlag_HPRE>:
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d101      	bne.n	8001aaa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aca:	d101      	bne.n	8001ad0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d101      	bne.n	8001af6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b14:	d101      	bne.n	8001b1a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b38:	d101      	bne.n	8001b3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b08d      	sub	sp, #52	; 0x34
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e363      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 808d 	beq.w	8001c86 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6c:	f7ff fea1 	bl	80018b2 <LL_RCC_GetSysClkSource>
 8001b70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b72:	f7ff ff82 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8001b76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3e>
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d147      	bne.n	8001c14 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d144      	bne.n	8001c14 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e347      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b9a:	f7ff fe4c 	bl	8001836 <LL_RCC_MSI_GetRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	d914      	bls.n	8001bce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fd03 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e336      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe26 	bl	800180e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe4a 	bl	8001860 <LL_RCC_MSI_SetCalibTrimming>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe1b 	bl	800180e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe3f 	bl	8001860 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fce4 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e317      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bf6:	f000 fcc9 	bl	800258c <HAL_RCC_GetHCLKFreq>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4aa4      	ldr	r2, [pc, #656]	; (8001e90 <HAL_RCC_OscConfig+0x344>)
 8001bfe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c00:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <HAL_RCC_OscConfig+0x348>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f9ad 	bl	8000f64 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d039      	beq.n	8001c84 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e308      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01e      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1c:	f7ff fdc8 	bl	80017b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f9ee 	bl	8001000 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c28:	f7ff f9ea 	bl	8001000 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e2f5      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c3a:	f7ff fdd7 	bl	80017ec <LL_RCC_MSI_IsReady>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f1      	beq.n	8001c28 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fde0 	bl	800180e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe04 	bl	8001860 <LL_RCC_MSI_SetCalibTrimming>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c5a:	f7ff fdb8 	bl	80017ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f9cf 	bl	8001000 <HAL_GetTick>
 8001c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c66:	f7ff f9cb 	bl	8001000 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e2d6      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c78:	f7ff fdb8 	bl	80017ec <LL_RCC_MSI_IsReady>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <HAL_RCC_OscConfig+0x11a>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c84:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d047      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	f7ff fe0e 	bl	80018b2 <LL_RCC_GetSysClkSource>
 8001c96:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c98:	f7ff feef 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8001c9c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x164>
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d134      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e2b4      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0x180>
 8001cc6:	f7ff fbf5 	bl	80014b4 <LL_RCC_HSE_Enable>
 8001cca:	e001      	b.n	8001cd0 <HAL_RCC_OscConfig+0x184>
 8001ccc:	f7ff fc01 	bl	80014d2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f992 	bl	8001000 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f98e 	bl	8001000 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e299      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cf2:	f7ff fbfd 	bl	80014f0 <LL_RCC_HSE_IsReady>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f1      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x194>
 8001cfc:	e011      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f97f 	bl	8001000 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff f97b 	bl	8001000 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e286      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d18:	f7ff fbea 	bl	80014f0 <LL_RCC_HSE_IsReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f1      	bne.n	8001d06 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	f7ff fdc0 	bl	80018b2 <LL_RCC_GetSysClkSource>
 8001d32:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d34:	f7ff fea1 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8001d38:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x200>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e266      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc09 	bl	8001574 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d62:	e031      	b.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d019      	beq.n	8001da0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	f7ff fbd2 	bl	8001514 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f946 	bl	8001000 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff f942 	bl	8001000 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e24d      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d8a:	f7ff fbe1 	bl	8001550 <LL_RCC_HSI_IsReady>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f1      	beq.n	8001d78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fbeb 	bl	8001574 <LL_RCC_HSI_SetCalibTrimming>
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	f7ff fbc7 	bl	8001532 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f92c 	bl	8001000 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff f928 	bl	8001000 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e233      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001dbe:	f7ff fbc7 	bl	8001550 <LL_RCC_HSI_IsReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a3 	beq.w	8001f28 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d076      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d046      	beq.n	8001e84 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001df6:	f7ff fc7e 	bl	80016f6 <LL_RCC_LSI1_IsReady>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e00:	f7ff fc57 	bl	80016b2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e04:	f7ff f8fc 	bl	8001000 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e0c:	f7ff f8f8 	bl	8001000 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e203      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e1e:	f7ff fc6a 	bl	80016f6 <LL_RCC_LSI1_IsReady>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001e28:	f7ff fc77 	bl	800171a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f8e8 	bl	8001000 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e34:	f7ff f8e4 	bl	8001000 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1ef      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e46:	f7ff fc8a 	bl	800175e <LL_RCC_LSI2_IsReady>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f1      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc94 	bl	8001782 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001e5a:	f7ff fc3b 	bl	80016d4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f8cf 	bl	8001000 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e66:	f7ff f8cb 	bl	8001000 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1d6      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e78:	f7ff fc3d 	bl	80016f6 <LL_RCC_LSI1_IsReady>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f1      	bne.n	8001e66 <HAL_RCC_OscConfig+0x31a>
 8001e82:	e051      	b.n	8001f28 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001e84:	f7ff fc15 	bl	80016b2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f8ba 	bl	8001000 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e8e:	e00c      	b.n	8001eaa <HAL_RCC_OscConfig+0x35e>
 8001e90:	20000008 	.word	0x20000008
 8001e94:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e98:	f7ff f8b2 	bl	8001000 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1bd      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001eaa:	f7ff fc24 	bl	80016f6 <LL_RCC_LSI1_IsReady>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f1      	beq.n	8001e98 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001eb4:	f7ff fc42 	bl	800173c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eba:	f7ff f8a1 	bl	8001000 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1ac      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ecc:	f7ff fc47 	bl	800175e <LL_RCC_LSI2_IsReady>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x36e>
 8001ed6:	e027      	b.n	8001f28 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001ed8:	f7ff fc30 	bl	800173c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f890 	bl	8001000 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ee4:	f7ff f88c 	bl	8001000 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e197      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ef6:	f7ff fc32 	bl	800175e <LL_RCC_LSI2_IsReady>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f1      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f00:	f7ff fbe8 	bl	80016d4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f87c 	bl	8001000 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f0c:	f7ff f878 	bl	8001000 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e183      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f1e:	f7ff fbea 	bl	80016f6 <LL_RCC_LSI1_IsReady>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f1      	bne.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4ba7      	ldr	r3, [pc, #668]	; (80021d4 <HAL_RCC_OscConfig+0x688>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d114      	bne.n	8001f6a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f40:	f7ff fa88 	bl	8001454 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f44:	f7ff f85c 	bl	8001000 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7ff f858 	bl	8001000 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e163      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b9d      	ldr	r3, [pc, #628]	; (80021d4 <HAL_RCC_OscConfig+0x688>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0x42c>
 8001f72:	f7ff fb48 	bl	8001606 <LL_RCC_LSE_Enable>
 8001f76:	e00c      	b.n	8001f92 <HAL_RCC_OscConfig+0x446>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d104      	bne.n	8001f8a <HAL_RCC_OscConfig+0x43e>
 8001f80:	f7ff fb63 	bl	800164a <LL_RCC_LSE_EnableBypass>
 8001f84:	f7ff fb3f 	bl	8001606 <LL_RCC_LSE_Enable>
 8001f88:	e003      	b.n	8001f92 <HAL_RCC_OscConfig+0x446>
 8001f8a:	f7ff fb4d 	bl	8001628 <LL_RCC_LSE_Disable>
 8001f8e:	f7ff fb6d 	bl	800166c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d014      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f831 	bl	8001000 <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff f82d 	bl	8001000 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e136      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fb8:	f7ff fb69 	bl	800168e <LL_RCC_LSE_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ef      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x456>
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f81c 	bl	8001000 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f818 	bl	8001000 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e121      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fe2:	f7ff fb54 	bl	800168e <LL_RCC_LSE_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ef      	bne.n	8001fcc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d02c      	beq.n	8002052 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d014      	beq.n	800202a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002000:	f7ff facd 	bl	800159e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fffc 	bl	8001000 <HAL_GetTick>
 8002008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800200c:	f7fe fff8 	bl	8001000 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e103      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800201e:	f7ff fae0 	bl	80015e2 <LL_RCC_HSI48_IsReady>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_OscConfig+0x4c0>
 8002028:	e013      	b.n	8002052 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800202a:	f7ff fac9 	bl	80015c0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7fe ffe7 	bl	8001000 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002036:	f7fe ffe3 	bl	8001000 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0ee      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002048:	f7ff facb 	bl	80015e2 <LL_RCC_HSI48_IsReady>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e4 	beq.w	8002224 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205c:	f7ff fc29 	bl	80018b2 <LL_RCC_GetSysClkSource>
 8002060:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	2b02      	cmp	r3, #2
 8002070:	f040 80b4 	bne.w	80021dc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0203 	and.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	429a      	cmp	r2, r3
 8002080:	d123      	bne.n	80020ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d11c      	bne.n	80020ca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d114      	bne.n	80020ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d10d      	bne.n	80020ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d05d      	beq.n	8002186 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d058      	beq.n	8002182 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0a1      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020e2:	f7ff fc84 	bl	80019ee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e6:	f7fe ff8b 	bl	8001000 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe ff87 	bl	8001000 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e092      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ef      	bne.n	80020ee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x68c>)
 8002116:	4013      	ands	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002120:	4311      	orrs	r1, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002126:	0212      	lsls	r2, r2, #8
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800213a:	430a      	orrs	r2, r1
 800213c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002140:	4313      	orrs	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002144:	f7ff fc44 	bl	80019d0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002158:	f7fe ff52 	bl	8001000 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe ff4e 	bl	8001000 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e059      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ef      	beq.n	8002160 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	e050      	b.n	8002224 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e04f      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d147      	bne.n	8002224 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002194:	f7ff fc1c 	bl	80019d0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a8:	f7fe ff2a 	bl	8001000 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe ff26 	bl	8001000 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e031      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCC_OscConfig+0x664>
 80021d0:	e028      	b.n	8002224 <HAL_RCC_OscConfig+0x6d8>
 80021d2:	bf00      	nop
 80021d4:	58000400 	.word	0x58000400
 80021d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d01e      	beq.n	8002220 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	f7ff fc04 	bl	80019ee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe ff0b 	bl	8001000 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe ff07 	bl	8001000 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e012      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ef      	bne.n	80021ee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x6e4>)
 800221a:	4013      	ands	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
 800221e:	e001      	b.n	8002224 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3734      	adds	r7, #52	; 0x34
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	eefefffc 	.word	0xeefefffc

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e12d      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b98      	ldr	r3, [pc, #608]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d91b      	bls.n	800228e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b95      	ldr	r3, [pc, #596]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4993      	ldr	r1, [pc, #588]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002266:	f7fe fecb 	bl	8001000 <HAL_GetTick>
 800226a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226c:	e008      	b.n	8002280 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800226e:	f7fe fec7 	bl	8001000 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e111      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d1ef      	bne.n	800226e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d016      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fb13 	bl	80018ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022a4:	f7fe feac 	bl	8001000 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022ac:	f7fe fea8 	bl	8001000 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0f2      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022be:	f7ff fbe8 	bl	8001a92 <LL_RCC_IsActiveFlag_HPRE>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d016      	beq.n	8002302 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fb0a 	bl	80018f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022de:	f7fe fe8f 	bl	8001000 <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022e6:	f7fe fe8b 	bl	8001000 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0d5      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022f8:	f7ff fbdd 	bl	8001ab6 <LL_RCC_IsActiveFlag_C2HPRE>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f1      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fb03 	bl	800191e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002318:	f7fe fe72 	bl	8001000 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002320:	f7fe fe6e 	bl	8001000 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b8      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002332:	f7ff fbd3 	bl	8001adc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fafd 	bl	800194c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002352:	f7fe fe55 	bl	8001000 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800235a:	f7fe fe51 	bl	8001000 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e09b      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800236c:	f7ff fbc9 	bl	8001b02 <LL_RCC_IsActiveFlag_PPRE1>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff faf3 	bl	8001974 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800238e:	f7fe fe37 	bl	8001000 <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002396:	f7fe fe33 	bl	8001000 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e07d      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023a8:	f7ff fbbd 	bl	8001b26 <LL_RCC_IsActiveFlag_PPRE2>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f1      	beq.n	8002396 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d043      	beq.n	8002446 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80023c6:	f7ff f893 	bl	80014f0 <LL_RCC_HSE_IsReady>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11e      	bne.n	800240e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e067      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d106      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80023dc:	f7ff fb16 	bl	8001a0c <LL_RCC_PLL_IsReady>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e05c      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80023f2:	f7ff f9fb 	bl	80017ec <LL_RCC_MSI_IsReady>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d108      	bne.n	800240e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e051      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002400:	f7ff f8a6 	bl	8001550 <LL_RCC_HSI_IsReady>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e04a      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fa39 	bl	800188a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe fdf2 	bl	8001000 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fdee 	bl	8001000 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e036      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	f7ff fa3c 	bl	80018b2 <LL_RCC_GetSysClkSource>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	429a      	cmp	r2, r3
 8002444:	d1ec      	bne.n	8002420 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d21b      	bcs.n	800248c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	4913      	ldr	r1, [pc, #76]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7fe fdcc 	bl	8001000 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	e008      	b.n	800247e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800246c:	f7fe fdc8 	bl	8001000 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e012      	b.n	80024a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ef      	bne.n	800246c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800248c:	f000 f87e 	bl	800258c <HAL_RCC_GetHCLKFreq>
 8002490:	4603      	mov	r3, r0
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_RCC_ClockConfig+0x27c>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002496:	f7fe fdbf 	bl	8001018 <HAL_GetTickPrio>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fd61 	bl	8000f64 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	58004000 	.word	0x58004000
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ba:	f7ff f9fa 	bl	80018b2 <LL_RCC_GetSysClkSource>
 80024be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80024c6:	f7ff f9b6 	bl	8001836 <LL_RCC_MSI_GetRange>
 80024ca:	4603      	mov	r3, r0
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e04b      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e045      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d10a      	bne.n	8002504 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024ee:	f7fe ffcf 	bl	8001490 <LL_RCC_HSE_IsEnabledDiv2>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e03a      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e037      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002504:	f7ff fab9 	bl	8001a7a <LL_RCC_PLL_GetMainSource>
 8002508:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d003      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x64>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x6a>
 8002516:	e00d      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 800251a:	60bb      	str	r3, [r7, #8]
        break;
 800251c:	e015      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800251e:	f7fe ffb7 	bl	8001490 <LL_RCC_HSE_IsEnabledDiv2>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_RCC_GetSysClockFreq+0xd0>)
 800252a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800252c:	e00d      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002530:	60bb      	str	r3, [r7, #8]
        break;
 8002532:	e00a      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002534:	f7ff f97f 	bl	8001836 <LL_RCC_MSI_GetRange>
 8002538:	4603      	mov	r3, r0
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	60bb      	str	r3, [r7, #8]
        break;
 8002548:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800254a:	f7ff fa71 	bl	8001a30 <LL_RCC_PLL_GetN>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	fb03 f402 	mul.w	r4, r3, r2
 8002556:	f7ff fa84 	bl	8001a62 <LL_RCC_PLL_GetDivider>
 800255a:	4603      	mov	r3, r0
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	3301      	adds	r3, #1
 8002560:	fbb4 f4f3 	udiv	r4, r4, r3
 8002564:	f7ff fa71 	bl	8001a4a <LL_RCC_PLL_GetR>
 8002568:	4603      	mov	r3, r0
 800256a:	0f5b      	lsrs	r3, r3, #29
 800256c:	3301      	adds	r3, #1
 800256e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002572:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}
 800257e:	bf00      	nop
 8002580:	08006838 	.word	0x08006838
 8002584:	00f42400 	.word	0x00f42400
 8002588:	01e84800 	.word	0x01e84800

0800258c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b598      	push	{r3, r4, r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002590:	f7ff ff90 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002594:	4604      	mov	r4, r0
 8002596:	f7ff fa01 	bl	800199c <LL_RCC_GetAHBPrescaler>
 800259a:	4603      	mov	r3, r0
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd98      	pop	{r3, r4, r7, pc}
 80025b0:	080067f8 	.word	0x080067f8

080025b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2bb0      	cmp	r3, #176	; 0xb0
 80025c0:	d903      	bls.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e007      	b.n	80025da <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80025da:	f7ff f9eb 	bl	80019b4 <LL_RCC_GetAHB4Prescaler>
 80025de:	4603      	mov	r3, r0
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9c      	lsrs	r4, r3, #18
 80025fe:	f7fe ff39 	bl	8001474 <HAL_PWREx_GetVoltageRange>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	4620      	mov	r0, r4
 8002608:	f000 f80c 	bl	8002624 <RCC_SetFlashLatency>
 800260c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	bf00      	nop
 8002618:	08006838 	.word	0x08006838
 800261c:	080067f8 	.word	0x080067f8
 8002620:	431bde83 	.word	0x431bde83

08002624 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b093      	sub	sp, #76	; 0x4c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <RCC_SetFlashLatency+0xe8>)
 8002630:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800263a:	4a35      	ldr	r2, [pc, #212]	; (8002710 <RCC_SetFlashLatency+0xec>)
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	ca07      	ldmia	r2, {r0, r1, r2}
 8002642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002646:	4b33      	ldr	r3, [pc, #204]	; (8002714 <RCC_SetFlashLatency+0xf0>)
 8002648:	f107 040c 	add.w	r4, r7, #12
 800264c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002652:	2300      	movs	r3, #0
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265c:	d11a      	bne.n	8002694 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
 8002662:	e013      	b.n	800268c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3348      	adds	r3, #72	; 0x48
 800266a:	443b      	add	r3, r7
 800266c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d807      	bhi.n	8002686 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3348      	adds	r3, #72	; 0x48
 800267c:	443b      	add	r3, r7
 800267e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002684:	e020      	b.n	80026c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002688:	3301      	adds	r3, #1
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	2b03      	cmp	r3, #3
 8002690:	d9e8      	bls.n	8002664 <RCC_SetFlashLatency+0x40>
 8002692:	e019      	b.n	80026c8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002694:	2300      	movs	r3, #0
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002698:	e013      	b.n	80026c2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3348      	adds	r3, #72	; 0x48
 80026a0:	443b      	add	r3, r7
 80026a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d807      	bhi.n	80026bc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	3348      	adds	r3, #72	; 0x48
 80026b2:	443b      	add	r3, r7
 80026b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80026ba:	e005      	b.n	80026c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	3301      	adds	r3, #1
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d9e8      	bls.n	800269a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <RCC_SetFlashLatency+0xf4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	4911      	ldr	r1, [pc, #68]	; (8002718 <RCC_SetFlashLatency+0xf4>)
 80026d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026d8:	f7fe fc92 	bl	8001000 <HAL_GetTick>
 80026dc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026de:	e008      	b.n	80026f2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026e0:	f7fe fc8e 	bl	8001000 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e007      	b.n	8002702 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <RCC_SetFlashLatency+0xf4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1ef      	bne.n	80026e0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	374c      	adds	r7, #76	; 0x4c
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}
 800270a:	bf00      	nop
 800270c:	08006654 	.word	0x08006654
 8002710:	08006664 	.word	0x08006664
 8002714:	08006670 	.word	0x08006670
 8002718:	58004000 	.word	0x58004000

0800271c <LL_RCC_LSE_IsEnabled>:
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <LL_RCC_LSE_IsEnabled+0x18>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <LL_RCC_LSE_IsEnabled+0x1a>
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_RCC_LSE_IsReady>:
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d101      	bne.n	8002758 <LL_RCC_LSE_IsReady+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_RCC_LSE_IsReady+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_RCC_SetRFWKPClockSource>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_RCC_SetSMPSClockSource>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_SetSMPSPrescaler>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_SetUSARTClockSource>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 0203 	bic.w	r2, r3, #3
 80027f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_RCC_SetLPUARTClockSource>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_RCC_SetI2CClockSource>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800285c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_RCC_SetLPTIMClockSource>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_RCC_SetSAIClockSource>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_SetRNGClockSource>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_SetCLK48ClockSource>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_RCC_SetUSBClockSource>:
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffe3 	bl	80028fe <LL_RCC_SetCLK48ClockSource>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <LL_RCC_SetADCClockSource>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_RCC_SetRTCClockSource>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_GetRTCClockSource>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_ForceBackupDomainReset>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_PLLSAI1_Enable>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a08:	6013      	str	r3, [r2, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_RCC_PLLSAI1_Disable>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_RCC_PLLSAI1_IsReady>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a44:	d101      	bne.n	8002a4a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b088      	sub	sp, #32
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002a5e:	2300      	movs	r3, #0
 8002a60:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a62:	2300      	movs	r3, #0
 8002a64:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d034      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a7a:	d021      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002a7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a80:	d81b      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a86:	d01d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8c:	d815      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d110      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002aa8:	e00d      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f947 	bl	8002d42 <RCCEx_PLLSAI1_ConfigNP>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ab8:	e005      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	77fb      	strb	r3, [r7, #31]
        break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ac0:	bf00      	nop
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fee8 	bl	80028a6 <LL_RCC_SetSAIClockSource>
 8002ad6:	e001      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
 8002ada:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d046      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ae8:	f7ff ff56 	bl	8002998 <LL_RCC_GetRTCClockSource>
 8002aec:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d03c      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002af8:	f7fe fcac 	bl	8001454 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff30 	bl	800296c <LL_RCC_SetRTCClockSource>
 8002b0c:	e02e      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002b18:	f7ff ff4b 	bl	80029b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002b1c:	f7ff ff5a 	bl	80029d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002b38:	f7ff fdf0 	bl	800271c <LL_RCC_LSE_IsEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d114      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b42:	f7fe fa5d 	bl	8001000 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b48:	e00b      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fa59 	bl	8001000 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d902      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	77fb      	strb	r3, [r7, #31]
              break;
 8002b60:	e004      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b62:	f7ff fded 	bl	8002740 <LL_RCC_LSE_IsReady>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	77bb      	strb	r3, [r7, #30]
 8002b70:	e001      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
 8002b74:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe2a 	bl	80027e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fe35 	bl	800280c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fe5d 	bl	8002872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe52 	bl	8002872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fe2a 	bl	8002838 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe1f 	bl	8002838 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d022      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe8d 	bl	800292a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c18:	d107      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c28:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f8dd 	bl	8002df8 <RCCEx_PLLSAI1_ConfigNQ>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002c42:	7ffb      	ldrb	r3, [r7, #31]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002c48:	7ffb      	ldrb	r3, [r7, #31]
 8002c4a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02b      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6a:	d003      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe2a 	bl	80028d2 <LL_RCC_SetRNGClockSource>
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff fe21 	bl	80028d2 <LL_RCC_SetRNGClockSource>
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff fe34 	bl	80028fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d022      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fe3d 	bl	8002940 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f8dd 	bl	8002eae <RCCEx_PLLSAI1_ConfigNR>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd26 	bl	8002764 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fd45 	bl	80027b8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fd2c 	bl	8002790 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002d38:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002d4e:	f7ff fe61 	bl	8002a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d52:	f7fe f955 	bl	8001000 <HAL_GetTick>
 8002d56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d58:	e009      	b.n	8002d6e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d5a:	f7fe f951 	bl	8001000 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d902      	bls.n	8002d6e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e004      	b.n	8002d78 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d6e:	f7ff fe60 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d137      	bne.n	8002dee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4313      	orrs	r3, r2
 8002d94:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002dac:	f7ff fe23 	bl	80029f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe f926 	bl	8001000 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe f922 	bl	8001000 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e004      	b.n	8002dd6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002dcc:	f7ff fe31 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d1f0      	bne.n	8002db8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d108      	bne.n	8002dee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e04:	f7ff fe06 	bl	8002a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e08:	f7fe f8fa 	bl	8001000 <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e0e:	e009      	b.n	8002e24 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e10:	f7fe f8f6 	bl	8001000 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e004      	b.n	8002e2e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e24:	f7ff fe05 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d137      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e62:	f7ff fdc8 	bl	80029f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fe f8cb 	bl	8001000 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e6c:	e009      	b.n	8002e82 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6e:	f7fe f8c7 	bl	8001000 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e80:	e004      	b.n	8002e8c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e82:	f7ff fdd6 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1f0      	bne.n	8002e6e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002eba:	f7ff fdab 	bl	8002a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ebe:	f7fe f89f 	bl	8001000 <HAL_GetTick>
 8002ec2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ec4:	e009      	b.n	8002eda <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec6:	f7fe f89b 	bl	8001000 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d902      	bls.n	8002eda <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e004      	b.n	8002ee4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002eda:	f7ff fdaa 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d137      	bne.n	8002f5a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f14:	4313      	orrs	r3, r2
 8002f16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f18:	f7ff fd6d 	bl	80029f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f870 	bl	8001000 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fe f86c 	bl	8001000 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e004      	b.n	8002f42 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f38:	f7ff fd7b 	bl	8002a32 <LL_RCC_PLLSAI1_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d1f0      	bne.n	8002f24 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09f      	b.n	80030b6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fed6 	bl	8000d3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f98:	4b49      	ldr	r3, [pc, #292]	; (80030c0 <HAL_RTC_Init+0x15c>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d07e      	beq.n	80030a2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	22ca      	movs	r2, #202	; 0xca
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2253      	movs	r2, #83	; 0x53
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8ab 	bl	8003110 <RTC_EnterInitMode>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e067      	b.n	80030a6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68d2      	ldr	r2, [r2, #12]
 8003010:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6919      	ldr	r1, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003034:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0203 	bic.w	r2, r2, #3
 8003044:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d113      	bne.n	8003094 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f829 	bl	80030c4 <HAL_RTC_WaitForSynchro>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	22ff      	movs	r2, #255	; 0xff
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e010      	b.n	80030b6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e001      	b.n	80030a6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40002800 	.word	0x40002800

080030c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80030dc:	f7fd ff90 	bl	8001000 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030e2:	e009      	b.n	80030f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030e4:	f7fd ff8c 	bl	8001000 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e007      	b.n	8003108 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ee      	beq.n	80030e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d119      	bne.n	800315a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 32ff 	mov.w	r2, #4294967295
 800312e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003130:	f7fd ff66 	bl	8001000 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003136:	e009      	b.n	800314c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003138:	f7fd ff62 	bl	8001000 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003146:	d901      	bls.n	800314c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e007      	b.n	800315c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ee      	beq.n	8003138 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800317a:	2302      	movs	r3, #2
 800317c:	e089      	b.n	8003292 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	22ca      	movs	r2, #202	; 0xca
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2253      	movs	r2, #83	; 0x53
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80031ac:	f7fd ff28 	bl	8001000 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80031b2:	e015      	b.n	80031e0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031b4:	f7fd ff24 	bl	8001000 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c2:	d90d      	bls.n	80031e0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2203      	movs	r2, #3
 80031d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e058      	b.n	8003292 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e2      	bne.n	80031b4 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fc:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80031fe:	f7fd feff 	bl	8001000 <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003204:	e015      	b.n	8003232 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003206:	f7fd fefb 	bl	8001000 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003214:	d90d      	bls.n	8003232 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	22ff      	movs	r2, #255	; 0xff
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e02f      	b.n	8003292 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0e2      	beq.n	8003206 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0207 	bic.w	r2, r2, #7
 800324e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003276:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	22ff      	movs	r2, #255	; 0xff
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b088      	sub	sp, #32
 800329e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	2218      	movs	r2, #24
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f8d8 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 80032b2:	233f      	movs	r3, #63	; 0x3f
 80032b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80032b6:	2381      	movs	r3, #129	; 0x81
 80032b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80032c2:	f107 0308 	add.w	r3, r7, #8
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 fb53 	bl	8004974 <hci_send_req>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da01      	bge.n	80032d8 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80032d4:	23ff      	movs	r3, #255	; 0xff
 80032d6:	e000      	b.n	80032da <aci_gap_set_non_discoverable+0x40>
  return status;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80032e2:	b5b0      	push	{r4, r5, r7, lr}
 80032e4:	b0ce      	sub	sp, #312	; 0x138
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4605      	mov	r5, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80032f4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80032f8:	462a      	mov	r2, r5
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003300:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003304:	4622      	mov	r2, r4
 8003306:	801a      	strh	r2, [r3, #0]
 8003308:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800330c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8003310:	4602      	mov	r2, r0
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003318:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800331c:	460a      	mov	r2, r1
 800331e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003328:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800332c:	3308      	adds	r3, #8
 800332e:	f107 0210 	add.w	r2, r7, #16
 8003332:	4413      	add	r3, r2
 8003334:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003338:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800333c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003340:	4413      	add	r3, r2
 8003342:	3309      	adds	r3, #9
 8003344:	f107 0210 	add.w	r2, r7, #16
 8003348:	4413      	add	r3, r2
 800334a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800334e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003352:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003360:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003364:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003368:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003374:	3301      	adds	r3, #1
 8003376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800337a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800337e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003382:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003386:	8812      	ldrh	r2, [r2, #0]
 8003388:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800338c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003390:	3302      	adds	r3, #2
 8003392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800339a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800339e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80033a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033ac:	3302      	adds	r3, #2
 80033ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80033b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80033ba:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80033c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033c6:	3301      	adds	r3, #1
 80033c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80033cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033d0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80033d4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80033d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033da:	3301      	adds	r3, #1
 80033dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80033e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033e4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80033e8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80033ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033ee:	3301      	adds	r3, #1
 80033f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80033f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033f8:	3308      	adds	r3, #8
 80033fa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80033fe:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003402:	4618      	mov	r0, r3
 8003404:	f001 f81d 	bl	8004442 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003408:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800340c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003410:	4413      	add	r3, r2
 8003412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003416:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800341a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800341e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003424:	3301      	adds	r3, #1
 8003426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800342a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800342e:	3301      	adds	r3, #1
 8003430:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003434:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f802 	bl	8004442 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800343e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003442:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003446:	4413      	add	r3, r2
 8003448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800344c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003450:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003454:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800345a:	3302      	adds	r3, #2
 800345c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003464:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003468:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800346a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800346e:	3302      	adds	r3, #2
 8003470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003478:	2218      	movs	r2, #24
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fff0 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003482:	233f      	movs	r3, #63	; 0x3f
 8003484:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003488:	2383      	movs	r3, #131	; 0x83
 800348a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800348e:	f107 0310 	add.w	r3, r7, #16
 8003492:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800349a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800349e:	f107 030f 	add.w	r3, r7, #15
 80034a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80034ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fa5e 	bl	8004974 <hci_send_req>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da01      	bge.n	80034c2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80034be:	23ff      	movs	r3, #255	; 0xff
 80034c0:	e004      	b.n	80034cc <aci_gap_set_discoverable+0x1ea>
  return status;
 80034c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80034c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80034ca:	781b      	ldrb	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bdb0      	pop	{r4, r5, r7, pc}

080034d6 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b0cc      	sub	sp, #304	; 0x130
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4602      	mov	r2, r0
 80034de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80034e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80034f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8003502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003506:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800350a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003516:	3301      	adds	r3, #1
 8003518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800351c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003520:	2218      	movs	r2, #24
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 ff9c 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 800352a:	233f      	movs	r3, #63	; 0x3f
 800352c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8003530:	2385      	movs	r3, #133	; 0x85
 8003532:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800353e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003546:	f107 030f 	add.w	r3, r7, #15
 800354a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fa0a 	bl	8004974 <hci_send_req>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	da01      	bge.n	800356a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8003566:	23ff      	movs	r3, #255	; 0xff
 8003568:	e004      	b.n	8003574 <aci_gap_set_io_capability+0x9e>
  return status;
 800356a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800356e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800357e:	b5b0      	push	{r4, r5, r7, lr}
 8003580:	b0cc      	sub	sp, #304	; 0x130
 8003582:	af00      	add	r7, sp, #0
 8003584:	4605      	mov	r5, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003590:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003594:	462a      	mov	r2, r5
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800359c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80035a0:	4622      	mov	r2, r4
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035a8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80035ac:	4602      	mov	r2, r0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035b8:	460a      	mov	r2, r1
 80035ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80035c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80035d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80035de:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80035e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035ea:	3301      	adds	r3, #1
 80035ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80035f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80035f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003604:	3301      	adds	r3, #1
 8003606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800360a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800360e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003612:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800361a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800361e:	3301      	adds	r3, #1
 8003620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8003624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003628:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800362c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8003634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003638:	3301      	adds	r3, #1
 800363a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800363e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003642:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8003646:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800364c:	3301      	adds	r3, #1
 800364e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8003652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003656:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800365a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800365c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800366a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800366e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003674:	3301      	adds	r3, #1
 8003676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800367a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800367e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003682:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800368a:	3304      	adds	r3, #4
 800368c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8003690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003694:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003698:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800369a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800369e:	3301      	adds	r3, #1
 80036a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80036a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036a8:	2218      	movs	r2, #24
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fed8 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 80036b2:	233f      	movs	r3, #63	; 0x3f
 80036b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80036b8:	2386      	movs	r3, #134	; 0x86
 80036ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80036c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80036ce:	f107 030f 	add.w	r3, r7, #15
 80036d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80036dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f946 	bl	8004974 <hci_send_req>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da01      	bge.n	80036f2 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80036ee:	23ff      	movs	r3, #255	; 0xff
 80036f0:	e004      	b.n	80036fc <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80036f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003702:	46bd      	mov	sp, r7
 8003704:	bdb0      	pop	{r4, r5, r7, pc}

08003706 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b0cc      	sub	sp, #304	; 0x130
 800370a:	af00      	add	r7, sp, #0
 800370c:	4602      	mov	r2, r0
 800370e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003716:	6019      	str	r1, [r3, #0]
 8003718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800371c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003720:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800372a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800372e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800373c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003740:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003744:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800374c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003750:	3302      	adds	r3, #2
 8003752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8003756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800375a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800375e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8003768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800376c:	3304      	adds	r3, #4
 800376e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003776:	2218      	movs	r2, #24
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fe71 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003780:	233f      	movs	r3, #63	; 0x3f
 8003782:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8003786:	2388      	movs	r3, #136	; 0x88
 8003788:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003798:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800379c:	f107 030f 	add.w	r3, r7, #15
 80037a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80037aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f8df 	bl	8004974 <hci_send_req>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da01      	bge.n	80037c0 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80037bc:	23ff      	movs	r3, #255	; 0xff
 80037be:	e004      	b.n	80037ca <aci_gap_pass_key_resp+0xc4>
  return status;
 80037c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80037c8:	781b      	ldrb	r3, [r3, #0]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b0cd      	sub	sp, #308	; 0x134
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80037e4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80037f2:	4622      	mov	r2, r4
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80037fe:	4602      	mov	r2, r0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003806:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800380a:	460a      	mov	r2, r1
 800380c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	2207      	movs	r2, #7
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe1f 	bl	8004462 <Osal_MemSet>
  int index_input = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800382a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800382e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003832:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800383a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800383e:	3301      	adds	r3, #1
 8003840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8003844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003848:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800384c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003858:	3301      	adds	r3, #1
 800385a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800385e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003866:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800386e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003872:	3301      	adds	r3, #1
 8003874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800387c:	2218      	movs	r2, #24
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fdee 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003886:	233f      	movs	r3, #63	; 0x3f
 8003888:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800388c:	238a      	movs	r3, #138	; 0x8a
 800388e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800389a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800389e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80038aa:	2307      	movs	r3, #7
 80038ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80038b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f85c 	bl	8004974 <hci_send_req>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da01      	bge.n	80038c6 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80038c2:	23ff      	movs	r3, #255	; 0xff
 80038c4:	e02e      	b.n	8003924 <aci_gap_init+0x150>
  if ( resp.Status )
 80038c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <aci_gap_init+0x10c>
    return resp.Status;
 80038d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	e021      	b.n	8003924 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80038e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80038fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003902:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003906:	b29a      	uxth	r2, r3
 8003908:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800390c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800390e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003912:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003916:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800391a:	b29a      	uxth	r2, r3
 800391c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003920:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800392a:	46bd      	mov	sp, r7
 800392c:	bd90      	pop	{r4, r7, pc}

0800392e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b0cc      	sub	sp, #304	; 0x130
 8003932:	af00      	add	r7, sp, #0
 8003934:	4602      	mov	r2, r0
 8003936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800393a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003944:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003948:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003956:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8003964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003968:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800396c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003978:	3301      	adds	r3, #1
 800397a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800397e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003982:	1c58      	adds	r0, r3, #1
 8003984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003988:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	f000 fd53 	bl	8004442 <Osal_MemCpy>
  index_input += AdvDataLen;
 800399c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039a0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80039aa:	4413      	add	r3, r2
 80039ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80039b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039b4:	2218      	movs	r2, #24
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fd52 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 80039be:	233f      	movs	r3, #63	; 0x3f
 80039c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80039c4:	238e      	movs	r3, #142	; 0x8e
 80039c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80039ca:	f107 0310 	add.w	r3, r7, #16
 80039ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80039d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80039da:	f107 030f 	add.w	r3, r7, #15
 80039de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80039e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 ffc0 	bl	8004974 <hci_send_req>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da01      	bge.n	80039fe <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80039fa:	23ff      	movs	r3, #255	; 0xff
 80039fc:	e004      	b.n	8003a08 <aci_gap_update_adv_data+0xda>
  return status;
 80039fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a02:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003a06:	781b      	ldrb	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	2218      	movs	r2, #24
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd1c 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003a2a:	233f      	movs	r3, #63	; 0x3f
 8003a2c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8003a2e:	2392      	movs	r3, #146	; 0x92
 8003a30:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003a32:	1dfb      	adds	r3, r7, #7
 8003a34:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ff97 	bl	8004974 <hci_send_req>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da01      	bge.n	8003a50 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003a4c:	23ff      	movs	r3, #255	; 0xff
 8003a4e:	e000      	b.n	8003a52 <aci_gap_configure_whitelist+0x40>
  return status;
 8003a50:	79fb      	ldrb	r3, [r7, #7]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b0cc      	sub	sp, #304	; 0x130
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4602      	mov	r2, r0
 8003a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a70:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8003a74:	460a      	mov	r2, r1
 8003a76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8003a78:	f107 0310 	add.w	r3, r7, #16
 8003a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8003a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8003aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ab0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ab4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aca:	2218      	movs	r2, #24
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fcc7 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ad4:	233f      	movs	r3, #63	; 0x3f
 8003ad6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8003ada:	23a5      	movs	r3, #165	; 0xa5
 8003adc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003af0:	f107 030f 	add.w	r3, r7, #15
 8003af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 ff35 	bl	8004974 <hci_send_req>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da01      	bge.n	8003b14 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8003b10:	23ff      	movs	r3, #255	; 0xff
 8003b12:	e004      	b.n	8003b1e <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8003b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b18:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	2218      	movs	r2, #24
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fc91 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003b40:	233f      	movs	r3, #63	; 0x3f
 8003b42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8003b44:	f240 1301 	movw	r3, #257	; 0x101
 8003b48:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 ff0b 	bl	8004974 <hci_send_req>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da01      	bge.n	8003b68 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8003b64:	23ff      	movs	r3, #255	; 0xff
 8003b66:	e000      	b.n	8003b6a <aci_gatt_init+0x42>
  return status;
 8003b68:	79fb      	ldrb	r3, [r7, #7]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8003b72:	b590      	push	{r4, r7, lr}
 8003b74:	b0cf      	sub	sp, #316	; 0x13c
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4604      	mov	r4, r0
 8003b7a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8003b7e:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8003b82:	6001      	str	r1, [r0, #0]
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003b8c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003b90:	4622      	mov	r2, r4
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003b98:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003ba4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003ba8:	460a      	mov	r2, r1
 8003baa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003bb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003bb8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d00a      	beq.n	8003bd8 <aci_gatt_add_service+0x66>
 8003bc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003bc6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d101      	bne.n	8003bd4 <aci_gatt_add_service+0x62>
 8003bd0:	2311      	movs	r3, #17
 8003bd2:	e002      	b.n	8003bda <aci_gatt_add_service+0x68>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <aci_gatt_add_service+0x68>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f107 0210 	add.w	r2, r7, #16
 8003bde:	4413      	add	r3, r2
 8003be0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	2203      	movs	r2, #3
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc38 	bl	8004462 <Osal_MemSet>
  int index_input = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8003bf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003bfc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003c00:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8003c12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003c16:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d002      	beq.n	8003c26 <aci_gatt_add_service+0xb4>
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d004      	beq.n	8003c2e <aci_gatt_add_service+0xbc>
 8003c24:	e007      	b.n	8003c36 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8003c26:	2302      	movs	r3, #2
 8003c28:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003c2c:	e005      	b.n	8003c3a <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8003c2e:	2310      	movs	r3, #16
 8003c30:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003c34:	e001      	b.n	8003c3a <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8003c36:	2397      	movs	r3, #151	; 0x97
 8003c38:	e06c      	b.n	8003d14 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8003c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c3e:	1c58      	adds	r0, r3, #1
 8003c40:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003c44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003c48:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	f000 fbf8 	bl	8004442 <Osal_MemCpy>
    index_input += size;
 8003c52:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003c56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8003c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003c68:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c74:	3301      	adds	r3, #1
 8003c76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8003c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c7e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003c82:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8003c86:	7812      	ldrb	r2, [r2, #0]
 8003c88:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8003c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003c94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c98:	2218      	movs	r2, #24
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fbe0 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ca2:	233f      	movs	r3, #63	; 0x3f
 8003ca4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8003ca8:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003cac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003cc8:	2303      	movs	r3, #3
 8003cca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003cce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fe4d 	bl	8004974 <hci_send_req>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da01      	bge.n	8003ce4 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8003ce0:	23ff      	movs	r3, #255	; 0xff
 8003ce2:	e017      	b.n	8003d14 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8003ce4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <aci_gatt_add_service+0x18c>
    return resp.Status;
 8003cf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	e00a      	b.n	8003d14 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8003cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003d10:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd90      	pop	{r4, r7, pc}

08003d1e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8003d1e:	b590      	push	{r4, r7, lr}
 8003d20:	b0d1      	sub	sp, #324	; 0x144
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4604      	mov	r4, r0
 8003d26:	4608      	mov	r0, r1
 8003d28:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8003d2c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8003d30:	600a      	str	r2, [r1, #0]
 8003d32:	4619      	mov	r1, r3
 8003d34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d38:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d44:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003d48:	4602      	mov	r2, r0
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d50:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003d54:	460a      	mov	r2, r1
 8003d56:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8003d60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d64:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d00a      	beq.n	8003d84 <aci_gatt_add_char+0x66>
 8003d6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d72:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d101      	bne.n	8003d80 <aci_gatt_add_char+0x62>
 8003d7c:	2313      	movs	r3, #19
 8003d7e:	e002      	b.n	8003d86 <aci_gatt_add_char+0x68>
 8003d80:	2303      	movs	r3, #3
 8003d82:	e000      	b.n	8003d86 <aci_gatt_add_char+0x68>
 8003d84:	2305      	movs	r3, #5
 8003d86:	f107 0218 	add.w	r2, r7, #24
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	2203      	movs	r2, #3
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fb62 	bl	8004462 <Osal_MemSet>
  int index_input = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8003da4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003da8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003dac:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003db4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003db8:	3302      	adds	r3, #2
 8003dba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8003dbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003dc2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003dc6:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003dce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8003dd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ddc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d002      	beq.n	8003dec <aci_gatt_add_char+0xce>
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d004      	beq.n	8003df4 <aci_gatt_add_char+0xd6>
 8003dea:	e007      	b.n	8003dfc <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8003dec:	2302      	movs	r3, #2
 8003dee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003df2:	e005      	b.n	8003e00 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003dfa:	e001      	b.n	8003e00 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8003dfc:	2397      	movs	r3, #151	; 0x97
 8003dfe:	e091      	b.n	8003f24 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8003e00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e04:	1cd8      	adds	r0, r3, #3
 8003e06:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8003e0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003e0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	f000 fb15 	bl	8004442 <Osal_MemCpy>
    index_input += size;
 8003e18:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003e1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003e20:	4413      	add	r3, r2
 8003e22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8003e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e2a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003e2e:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8003e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e44:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003e48:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8003e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8003e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e58:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003e5c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8003e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e62:	3301      	adds	r3, #1
 8003e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8003e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e6c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8003e70:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8003e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e76:	3301      	adds	r3, #1
 8003e78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8003e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e80:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8003e84:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8003e86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8003e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e94:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8003e98:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8003e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ea4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea8:	2218      	movs	r2, #24
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fad8 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003eb2:	233f      	movs	r3, #63	; 0x3f
 8003eb4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8003eb8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ebc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003ec0:	f107 0318 	add.w	r3, r7, #24
 8003ec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003ec8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003ede:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd45 	bl	8004974 <hci_send_req>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da01      	bge.n	8003ef4 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8003ef0:	23ff      	movs	r3, #255	; 0xff
 8003ef2:	e017      	b.n	8003f24 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8003ef4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8003f02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	e00a      	b.n	8003f24 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8003f0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f20:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}

08003f2e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8003f2e:	b5b0      	push	{r4, r5, r7, lr}
 8003f30:	b0cc      	sub	sp, #304	; 0x130
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4605      	mov	r5, r0
 8003f36:	460c      	mov	r4, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003f44:	462a      	mov	r2, r5
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f50:	4622      	mov	r2, r4
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f58:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f64:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8003f68:	460a      	mov	r2, r1
 8003f6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8003f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003f92:	8812      	ldrh	r2, [r2, #0]
 8003f94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8003fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fa8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003fac:	8812      	ldrh	r2, [r2, #0]
 8003fae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8003fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fc2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8003fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fdc:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8003fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff2:	1d98      	adds	r0, r3, #6
 8003ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004004:	f000 fa1d 	bl	8004442 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800400c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004016:	4413      	add	r3, r2
 8004018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800401c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004020:	2218      	movs	r2, #24
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fa1c 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 800402a:	233f      	movs	r3, #63	; 0x3f
 800402c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004030:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004034:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004044:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004048:	f107 030f 	add.w	r3, r7, #15
 800404c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fc89 	bl	8004974 <hci_send_req>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	da01      	bge.n	800406c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004068:	23ff      	movs	r3, #255	; 0xff
 800406a:	e004      	b.n	8004076 <aci_gatt_update_char_value+0x148>
  return status;
 800406c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004070:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004074:	781b      	ldrb	r3, [r3, #0]
}
 8004076:	4618      	mov	r0, r3
 8004078:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800407c:	46bd      	mov	sp, r7
 800407e:	bdb0      	pop	{r4, r5, r7, pc}

08004080 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b0cc      	sub	sp, #304	; 0x130
 8004084:	af00      	add	r7, sp, #0
 8004086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800408a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004094:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004098:	4602      	mov	r2, r0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80040a4:	460a      	mov	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80040a8:	f107 0310 	add.w	r3, r7, #16
 80040ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80040b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80040c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040ca:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80040d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040d6:	3301      	adds	r3, #1
 80040d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80040dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80040ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040f0:	3301      	adds	r3, #1
 80040f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80040f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040fa:	1c98      	adds	r0, r3, #2
 80040fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004100:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	f000 f997 	bl	8004442 <Osal_MemCpy>
  index_input += Length;
 8004114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004118:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004122:	4413      	add	r3, r2
 8004124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800412c:	2218      	movs	r2, #24
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f996 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004136:	233f      	movs	r3, #63	; 0x3f
 8004138:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800413c:	230c      	movs	r3, #12
 800413e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800414a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800414e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004152:	f107 030f 	add.w	r3, r7, #15
 8004156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fc04 	bl	8004974 <hci_send_req>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	da01      	bge.n	8004176 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8004172:	23ff      	movs	r3, #255	; 0xff
 8004174:	e004      	b.n	8004180 <aci_hal_write_config_data+0x100>
  return status;
 8004176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800417e:	781b      	ldrb	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b0cc      	sub	sp, #304	; 0x130
 800418e:	af00      	add	r7, sp, #0
 8004190:	4602      	mov	r2, r0
 8004192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004196:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80041a4:	460a      	mov	r2, r1
 80041a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80041b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80041c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041ca:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80041d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041d6:	3301      	adds	r3, #1
 80041d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80041dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80041ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041f0:	3301      	adds	r3, #1
 80041f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041fa:	2218      	movs	r2, #24
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f92f 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004204:	233f      	movs	r3, #63	; 0x3f
 8004206:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800420a:	230f      	movs	r3, #15
 800420c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004210:	f107 0310 	add.w	r3, r7, #16
 8004214:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800421c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004220:	f107 030f 	add.w	r3, r7, #15
 8004224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004228:	2301      	movs	r3, #1
 800422a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800422e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fb9d 	bl	8004974 <hci_send_req>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	da01      	bge.n	8004244 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8004240:	23ff      	movs	r3, #255	; 0xff
 8004242:	e004      	b.n	800424e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8004244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004248:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800424c:	781b      	ldrb	r3, [r3, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b0cc      	sub	sp, #304	; 0x130
 800425c:	af00      	add	r7, sp, #0
 800425e:	4602      	mov	r2, r0
 8004260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004264:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004268:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800426a:	f107 0310 	add.w	r3, r7, #16
 800426e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004276:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004288:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800428c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004298:	3302      	adds	r3, #2
 800429a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800429e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042a2:	2218      	movs	r2, #24
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f8db 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x3f;
 80042ac:	233f      	movs	r3, #63	; 0x3f
 80042ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80042b2:	2318      	movs	r3, #24
 80042b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80042b8:	f107 0310 	add.w	r3, r7, #16
 80042bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80042c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80042c8:	f107 030f 	add.w	r3, r7, #15
 80042cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fb49 	bl	8004974 <hci_send_req>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da01      	bge.n	80042ec <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80042e8:	23ff      	movs	r3, #255	; 0xff
 80042ea:	e004      	b.n	80042f6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80042ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80042f4:	781b      	ldrb	r3, [r3, #0]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	2218      	movs	r2, #24
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f8a5 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x03;
 8004318:	2303      	movs	r3, #3
 800431a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800431c:	2303      	movs	r3, #3
 800431e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004324:	2301      	movs	r3, #1
 8004326:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fb20 	bl	8004974 <hci_send_req>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	da01      	bge.n	800433e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800433a:	23ff      	movs	r3, #255	; 0xff
 800433c:	e000      	b.n	8004340 <hci_reset+0x40>
  return status;
 800433e:	79fb      	ldrb	r3, [r7, #7]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b0cd      	sub	sp, #308	; 0x134
 800434c:	af00      	add	r7, sp, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800435c:	4622      	mov	r2, r4
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004364:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004368:	4602      	mov	r2, r0
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004370:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004374:	460a      	mov	r2, r1
 8004376:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004378:	f107 0310 	add.w	r3, r7, #16
 800437c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004384:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004396:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800439a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80043a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80043ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043b4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80043bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043c0:	3301      	adds	r3, #1
 80043c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043ce:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80043d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043da:	3301      	adds	r3, #1
 80043dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043e4:	2218      	movs	r2, #24
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f83a 	bl	8004462 <Osal_MemSet>
  rq.ogf = 0x08;
 80043ee:	2308      	movs	r3, #8
 80043f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80043f4:	2331      	movs	r3, #49	; 0x31
 80043f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80043fa:	f107 0310 	add.w	r3, r7, #16
 80043fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800440a:	f107 030f 	add.w	r3, r7, #15
 800440e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 faa8 	bl	8004974 <hci_send_req>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	da01      	bge.n	800442e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800442a:	23ff      	movs	r3, #255	; 0xff
 800442c:	e004      	b.n	8004438 <hci_le_set_default_phy+0xf0>
  return status;
 800442e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004432:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004436:	781b      	ldrb	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f002 f8d6 	bl	8006604 <memcpy>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f002 f89a 	bl	80065ac <memset>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  return;
 8004486:	bf00      	nop
}
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return;
 8004494:	bf00      	nop
}
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  return;
 80044a2:	bf00      	nop
}
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return;
 80044b0:	bf00      	nop
}
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  return;
 80044be:	bf00      	nop
}
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return;
 80044cc:	bf00      	nop
}
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return;
 80044da:	bf00      	nop
}
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return;
 80044e8:	bf00      	nop
}
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  return;
 80044f6:	bf00      	nop
}
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return;
 8004504:	bf00      	nop
}
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  return;
 8004512:	bf00      	nop
}
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return;
 8004520:	bf00      	nop
}
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0
  return;
 800452e:	bf00      	nop
}
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return;
 800453c:	bf00      	nop
}
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  return;
 800454a:	bf00      	nop
}
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return;
 8004558:	bf00      	nop
}
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  return;
 8004566:	bf00      	nop
}
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SVCCTL_Init+0x18>)
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <SVCCTL_Init+0x1c>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004580:	f000 f806 	bl	8004590 <SVCCTL_SvcInit>

  return;
 8004584:	bf00      	nop
}
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200008ac 	.word	0x200008ac
 800458c:	200008cc 	.word	0x200008cc

08004590 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  BAS_Init();
 8004594:	f7ff ff75 	bl	8004482 <BAS_Init>

  BLS_Init();
 8004598:	f7ff ff7a 	bl	8004490 <BLS_Init>

  CRS_STM_Init();
 800459c:	f7ff ff7f 	bl	800449e <CRS_STM_Init>

  DIS_Init();
 80045a0:	f7ff ff84 	bl	80044ac <DIS_Init>

  EDS_STM_Init();
 80045a4:	f7ff ff89 	bl	80044ba <EDS_STM_Init>

  HIDS_Init();
 80045a8:	f7ff ff8e 	bl	80044c8 <HIDS_Init>

  HRS_Init();
 80045ac:	f7ff ff93 	bl	80044d6 <HRS_Init>

  HTS_Init();
 80045b0:	f7ff ff98 	bl	80044e4 <HTS_Init>

  IAS_Init();
 80045b4:	f7ff ff9d 	bl	80044f2 <IAS_Init>

  LLS_Init();
 80045b8:	f7ff ffa2 	bl	8004500 <LLS_Init>

  TPS_Init();
 80045bc:	f7ff ffa7 	bl	800450e <TPS_Init>

  MOTENV_STM_Init();
 80045c0:	f7ff ffac 	bl	800451c <MOTENV_STM_Init>

  P2PS_STM_Init();
 80045c4:	f7ff ffb1 	bl	800452a <P2PS_STM_Init>

  ZDD_STM_Init();
 80045c8:	f7ff ffb6 	bl	8004538 <ZDD_STM_Init>

  OTAS_STM_Init();
 80045cc:	f7ff ffbb 	bl	8004546 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80045d0:	f7ff ffc7 	bl	8004562 <BVOPUS_STM_Init>

  MESH_Init();
 80045d4:	f7ff ffbe 	bl	8004554 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80045d8:	f001 faaa 	bl	8005b30 <SVCCTL_InitCustomSvc>
  
  return;
 80045dc:	bf00      	nop
}
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <SVCCTL_RegisterSvcHandler+0x30>)
 80045ea:	7f1b      	ldrb	r3, [r3, #28]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <SVCCTL_RegisterSvcHandler+0x30>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <SVCCTL_RegisterSvcHandler+0x30>)
 80045f8:	7f1b      	ldrb	r3, [r3, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <SVCCTL_RegisterSvcHandler+0x30>)
 8004600:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004602:	bf00      	nop
}
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	200008ac 	.word	0x200008ac

08004614 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d125      	bne.n	800467a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3302      	adds	r3, #2
 8004632:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800463e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004642:	d118      	bne.n	8004676 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004644:	2300      	movs	r3, #0
 8004646:	757b      	strb	r3, [r7, #21]
 8004648:	e00d      	b.n	8004666 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800464a:	7d7b      	ldrb	r3, [r7, #21]
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <SVCCTL_UserEvtRx+0xa4>)
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d108      	bne.n	8004672 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004660:	7d7b      	ldrb	r3, [r7, #21]
 8004662:	3301      	adds	r3, #1
 8004664:	757b      	strb	r3, [r7, #21]
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <SVCCTL_UserEvtRx+0xa4>)
 8004668:	7f1b      	ldrb	r3, [r3, #28]
 800466a:	7d7a      	ldrb	r2, [r7, #21]
 800466c:	429a      	cmp	r2, r3
 800466e:	d3ec      	bcc.n	800464a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8004670:	e002      	b.n	8004678 <SVCCTL_UserEvtRx+0x64>
              break;
 8004672:	bf00      	nop
          break;
 8004674:	e000      	b.n	8004678 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8004676:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8004678:	e000      	b.n	800467c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800467a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d00f      	beq.n	80046a2 <SVCCTL_UserEvtRx+0x8e>
 8004682:	2b02      	cmp	r3, #2
 8004684:	dc10      	bgt.n	80046a8 <SVCCTL_UserEvtRx+0x94>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <SVCCTL_UserEvtRx+0x7c>
 800468a:	2b01      	cmp	r3, #1
 800468c:	d006      	beq.n	800469c <SVCCTL_UserEvtRx+0x88>
 800468e:	e00b      	b.n	80046a8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 ff7b 	bl	800558c <SVCCTL_App_Notification>
 8004696:	4603      	mov	r3, r0
 8004698:	75bb      	strb	r3, [r7, #22]
      break;
 800469a:	e008      	b.n	80046ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800469c:	2301      	movs	r3, #1
 800469e:	75bb      	strb	r3, [r7, #22]
      break;
 80046a0:	e005      	b.n	80046ae <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75bb      	strb	r3, [r7, #22]
      break;
 80046a6:	e002      	b.n	80046ae <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75bb      	strb	r3, [r7, #22]
      break;
 80046ac:	bf00      	nop
  }

  return (return_status);
 80046ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200008ac 	.word	0x200008ac

080046bc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	212e      	movs	r1, #46	; 0x2e
 80046d4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80046d8:	f000 fae2 	bl	8004ca0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	330b      	adds	r3, #11
 80046e0:	78db      	ldrb	r3, [r3, #3]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80046f2:	f107 030c 	add.w	r3, r7, #12
 80046f6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	210f      	movs	r1, #15
 8004702:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004706:	f000 facb 	bl	8004ca0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	330b      	adds	r3, #11
 800470e:	78db      	ldrb	r3, [r3, #3]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	2110      	movs	r1, #16
 800472c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8004730:	f000 fab6 	bl	8004ca0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	330b      	adds	r3, #11
 8004738:	78db      	ldrb	r3, [r3, #3]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8004744:	b480      	push	{r7}
 8004746:	b08b      	sub	sp, #44	; 0x2c
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800476c:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <SHCI_GetWirelessFwInfo+0x154>)
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004774:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800477e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a44      	ldr	r2, [pc, #272]	; (800489c <SHCI_GetWirelessFwInfo+0x158>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10f      	bne.n	80047b0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e01a      	b.n	80047e6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80047b8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80047bc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	b2da      	uxtb	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	0e1b      	lsrs	r3, r3, #24
 8004826:	b2da      	uxtb	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b2da      	uxtb	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	0e1b      	lsrs	r3, r3, #24
 8004854:	b2da      	uxtb	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	b2da      	uxtb	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b2da      	uxtb	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	0e1b      	lsrs	r3, r3, #24
 8004872:	b2da      	uxtb	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b2da      	uxtb	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	372c      	adds	r7, #44	; 0x2c
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58004000 	.word	0x58004000
 800489c:	a94656b9 	.word	0xa94656b9

080048a0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <hci_init+0x30>)
 80048b0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <hci_init+0x34>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80048b8:	4806      	ldr	r0, [pc, #24]	; (80048d4 <hci_init+0x34>)
 80048ba:	f000 f973 	bl	8004ba4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8d4 	bl	8004a70 <TlInit>

  return;
 80048c8:	bf00      	nop
}
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000a40 	.word	0x20000a40
 80048d4:	20000a18 	.word	0x20000a18

080048d8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80048de:	4822      	ldr	r0, [pc, #136]	; (8004968 <hci_user_evt_proc+0x90>)
 80048e0:	f000 fd28 	bl	8005334 <LST_is_empty>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12b      	bne.n	8004942 <hci_user_evt_proc+0x6a>
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <hci_user_evt_proc+0x94>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d027      	beq.n	8004942 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	4619      	mov	r1, r3
 80048f8:	481b      	ldr	r0, [pc, #108]	; (8004968 <hci_user_evt_proc+0x90>)
 80048fa:	f000 fdaa 	bl	8005452 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <hci_user_evt_proc+0x98>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800490a:	2301      	movs	r3, #1
 800490c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <hci_user_evt_proc+0x98>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8004918:	793a      	ldrb	r2, [r7, #4]
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <hci_user_evt_proc+0x94>)
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e002      	b.n	8004926 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <hci_user_evt_proc+0x94>)
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <hci_user_evt_proc+0x94>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fc03 	bl	800513c <TL_MM_EvtDone>
 8004936:	e004      	b.n	8004942 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4619      	mov	r1, r3
 800493c:	480a      	ldr	r0, [pc, #40]	; (8004968 <hci_user_evt_proc+0x90>)
 800493e:	f000 fd1b 	bl	8005378 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004942:	4809      	ldr	r0, [pc, #36]	; (8004968 <hci_user_evt_proc+0x90>)
 8004944:	f000 fcf6 	bl	8005334 <LST_is_empty>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <hci_user_evt_proc+0x86>
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <hci_user_evt_proc+0x94>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8004956:	4804      	ldr	r0, [pc, #16]	; (8004968 <hci_user_evt_proc+0x90>)
 8004958:	f001 f830 	bl	80059bc <hci_notify_asynch_evt>
  }


  return;
 800495c:	bf00      	nop
 800495e:	bf00      	nop
}
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200008d4 	.word	0x200008d4
 800496c:	200008e0 	.word	0x200008e0
 8004970:	20000a18 	.word	0x20000a18

08004974 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8004980:	2000      	movs	r0, #0
 8004982:	f000 f8cb 	bl	8004b1c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8004986:	2300      	movs	r3, #0
 8004988:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	885b      	ldrh	r3, [r3, #2]
 800498e:	b21b      	sxth	r3, r3
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	b21a      	sxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	b21b      	sxth	r3, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	b21b      	sxth	r3, r3
 80049a2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	b2d9      	uxtb	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	8bbb      	ldrh	r3, [r7, #28]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f88d 	bl	8004ad0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80049b6:	e04e      	b.n	8004a56 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80049b8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80049bc:	f001 f815 	bl	80059ea <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80049c0:	e043      	b.n	8004a4a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	4619      	mov	r1, r3
 80049c8:	4828      	ldr	r0, [pc, #160]	; (8004a6c <hci_send_req+0xf8>)
 80049ca:	f000 fd42 	bl	8005452 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7a5b      	ldrb	r3, [r3, #9]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	d114      	bne.n	8004a00 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	330b      	adds	r3, #11
 80049da:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	885b      	ldrh	r3, [r3, #2]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8bba      	ldrh	r2, [r7, #28]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d104      	bne.n	80049f2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d027      	beq.n	8004a4a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80049fa:	2301      	movs	r3, #1
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e024      	b.n	8004a4a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	330b      	adds	r3, #11
 8004a04:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8bba      	ldrh	r2, [r7, #28]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d114      	bne.n	8004a3e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	7a9b      	ldrb	r3, [r3, #10]
 8004a18:	3b03      	subs	r3, #3
 8004a1a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	bfa8      	it	ge
 8004a26:	461a      	movge	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6918      	ldr	r0, [r3, #16]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	1cd9      	adds	r1, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f001 fde3 	bl	8006604 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004a46:	2301      	movs	r3, #1
 8004a48:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004a4a:	4808      	ldr	r0, [pc, #32]	; (8004a6c <hci_send_req+0xf8>)
 8004a4c:	f000 fc72 	bl	8005334 <LST_is_empty>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0b5      	beq.n	80049c2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ad      	beq.n	80049b8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f000 f85d 	bl	8004b1c <NotifyCmdStatus>

  return 0;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000a38 	.word	0x20000a38

08004a70 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8004a78:	480f      	ldr	r0, [pc, #60]	; (8004ab8 <TlInit+0x48>)
 8004a7a:	f000 fc4b 	bl	8005314 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8004a7e:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <TlInit+0x4c>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8004a84:	480e      	ldr	r0, [pc, #56]	; (8004ac0 <TlInit+0x50>)
 8004a86:	f000 fc45 	bl	8005314 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <TlInit+0x54>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <TlInit+0x58>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <TlInit+0x5c>)
 8004a9e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <TlInit+0x58>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f107 0208 	add.w	r2, r7, #8
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
  }

  return;
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
}
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000a38 	.word	0x20000a38
 8004abc:	200008dc 	.word	0x200008dc
 8004ac0:	200008d4 	.word	0x200008d4
 8004ac4:	200008e0 	.word	0x200008e0
 8004ac8:	20000a18 	.word	0x20000a18
 8004acc:	08004b5d 	.word	0x08004b5d

08004ad0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	603a      	str	r2, [r7, #0]
 8004ada:	80fb      	strh	r3, [r7, #6]
 8004adc:	460b      	mov	r3, r1
 8004ade:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <SendCmd+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <SendCmd+0x44>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	797a      	ldrb	r2, [r7, #5]
 8004af0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <SendCmd+0x44>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	797a      	ldrb	r2, [r7, #5]
 8004afa:	6839      	ldr	r1, [r7, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fd81 	bl	8006604 <memcpy>

  hciContext.io.Send(0,0);
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <SendCmd+0x48>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2100      	movs	r1, #0
 8004b08:	2000      	movs	r0, #0
 8004b0a:	4798      	blx	r3

  return;
 8004b0c:	bf00      	nop
}
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200008dc 	.word	0x200008dc
 8004b18:	20000a18 	.word	0x20000a18

08004b1c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <NotifyCmdStatus+0x3c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004b34:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <NotifyCmdStatus+0x3c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8004b3c:	e008      	b.n	8004b50 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <NotifyCmdStatus+0x3c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <NotifyCmdStatus+0x3c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	4798      	blx	r3
  return;
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
}
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000a40 	.word	0x20000a40

08004b5c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7a5b      	ldrb	r3, [r3, #9]
 8004b68:	2b0f      	cmp	r3, #15
 8004b6a:	d003      	beq.n	8004b74 <TlEvtReceived+0x18>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7a5b      	ldrb	r3, [r3, #9]
 8004b70:	2b0e      	cmp	r3, #14
 8004b72:	d107      	bne.n	8004b84 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4809      	ldr	r0, [pc, #36]	; (8004b9c <TlEvtReceived+0x40>)
 8004b78:	f000 fc24 	bl	80053c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f000 ff29 	bl	80059d4 <hci_cmd_resp_release>
 8004b82:	e006      	b.n	8004b92 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <TlEvtReceived+0x44>)
 8004b88:	f000 fc1c 	bl	80053c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004b8c:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <TlEvtReceived+0x44>)
 8004b8e:	f000 ff15 	bl	80059bc <hci_notify_asynch_evt>
  }

  return;
 8004b92:	bf00      	nop
}
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000a38 	.word	0x20000a38
 8004ba0:	200008d4 	.word	0x200008d4

08004ba4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <hci_register_io_bus+0x20>)
 8004bb0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <hci_register_io_bus+0x24>)
 8004bb6:	611a      	str	r2, [r3, #16]

  return;
 8004bb8:	bf00      	nop
}
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	08004eb5 	.word	0x08004eb5
 8004bc8:	08004f1d 	.word	0x08004f1d

08004bcc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <shci_init+0x30>)
 8004bdc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <shci_init+0x34>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8004be4:	4806      	ldr	r0, [pc, #24]	; (8004c00 <shci_init+0x34>)
 8004be6:	f000 f911 	bl	8004e0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f894 	bl	8004d1c <TlInit>

  return;
 8004bf4:	bf00      	nop
}
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000a64 	.word	0x20000a64
 8004c00:	20000a44 	.word	0x20000a44

08004c04 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004c0a:	4822      	ldr	r0, [pc, #136]	; (8004c94 <shci_user_evt_proc+0x90>)
 8004c0c:	f000 fb92 	bl	8005334 <LST_is_empty>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d12b      	bne.n	8004c6e <shci_user_evt_proc+0x6a>
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <shci_user_evt_proc+0x94>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d027      	beq.n	8004c6e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4619      	mov	r1, r3
 8004c24:	481b      	ldr	r0, [pc, #108]	; (8004c94 <shci_user_evt_proc+0x90>)
 8004c26:	f000 fc14 	bl	8005452 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <shci_user_evt_proc+0x98>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004c36:	2301      	movs	r3, #1
 8004c38:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <shci_user_evt_proc+0x98>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	1d3a      	adds	r2, r7, #4
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004c44:	793a      	ldrb	r2, [r7, #4]
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <shci_user_evt_proc+0x94>)
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <shci_user_evt_proc+0x94>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <shci_user_evt_proc+0x94>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fa6d 	bl	800513c <TL_MM_EvtDone>
 8004c62:	e004      	b.n	8004c6e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4619      	mov	r1, r3
 8004c68:	480a      	ldr	r0, [pc, #40]	; (8004c94 <shci_user_evt_proc+0x90>)
 8004c6a:	f000 fb85 	bl	8005378 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004c6e:	4809      	ldr	r0, [pc, #36]	; (8004c94 <shci_user_evt_proc+0x90>)
 8004c70:	f000 fb60 	bl	8005334 <LST_is_empty>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <shci_user_evt_proc+0x86>
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <shci_user_evt_proc+0x94>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004c82:	4804      	ldr	r0, [pc, #16]	; (8004c94 <shci_user_evt_proc+0x90>)
 8004c84:	f7fb fd9b 	bl	80007be <shci_notify_asynch_evt>
  }


  return;
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
}
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200008e4 	.word	0x200008e4
 8004c98:	200008f4 	.word	0x200008f4
 8004c9c:	20000a44 	.word	0x20000a44

08004ca0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60ba      	str	r2, [r7, #8]
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	4603      	mov	r3, r0
 8004cac:	81fb      	strh	r3, [r7, #14]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f000 f864 	bl	8004d80 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <shci_send+0x74>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	89fa      	ldrh	r2, [r7, #14]
 8004cbe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <shci_send+0x74>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	7b7a      	ldrb	r2, [r7, #13]
 8004cc8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <shci_send+0x74>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	7b7a      	ldrb	r2, [r7, #13]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fc95 	bl	8006604 <memcpy>

  shciContext.io.Send(0,0);
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <shci_send+0x78>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004ce4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004ce8:	f7fb fd80 	bl	80007ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0008 	add.w	r0, r3, #8
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <shci_send+0x74>)
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <shci_send+0x74>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	3303      	adds	r3, #3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f001 fc80 	bl	8006604 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004d04:	2001      	movs	r0, #1
 8004d06:	f000 f83b 	bl	8004d80 <Cmd_SetStatus>

  return;
 8004d0a:	bf00      	nop
}
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200008f0 	.word	0x200008f0
 8004d18:	20000a44 	.word	0x20000a44

08004d1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8004d24:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <TlInit+0x4c>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8004d2a:	4810      	ldr	r0, [pc, #64]	; (8004d6c <TlInit+0x50>)
 8004d2c:	f000 faf2 	bl	8005314 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f000 f825 	bl	8004d80 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <TlInit+0x54>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <TlInit+0x58>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <TlInit+0x5c>)
 8004d4a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <TlInit+0x60>)
 8004d4e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <TlInit+0x58>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f107 020c 	add.w	r2, r7, #12
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
  }

  return;
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
}
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200008f0 	.word	0x200008f0
 8004d6c:	200008e4 	.word	0x200008e4
 8004d70:	200008f4 	.word	0x200008f4
 8004d74:	20000a44 	.word	0x20000a44
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de9 	.word	0x08004de9

08004d80 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <Cmd_SetStatus+0x48>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <Cmd_SetStatus+0x48>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <Cmd_SetStatus+0x4c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8004da6:	e00b      	b.n	8004dc0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <Cmd_SetStatus+0x4c>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <Cmd_SetStatus+0x48>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <Cmd_SetStatus+0x48>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2001      	movs	r0, #1
 8004dbc:	4798      	blx	r3
  return;
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
}
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000a64 	.word	0x20000a64
 8004dcc:	200008ec 	.word	0x200008ec

08004dd0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fb fcfc 	bl	80007d6 <shci_cmd_resp_release>

  return;
 8004dde:	bf00      	nop
}
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4805      	ldr	r0, [pc, #20]	; (8004e08 <TlUserEvtReceived+0x20>)
 8004df4:	f000 fae6 	bl	80053c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004df8:	4803      	ldr	r0, [pc, #12]	; (8004e08 <TlUserEvtReceived+0x20>)
 8004dfa:	f7fb fce0 	bl	80007be <shci_notify_asynch_evt>

  return;
 8004dfe:	bf00      	nop
}
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200008e4 	.word	0x200008e4

08004e0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <shci_register_io_bus+0x20>)
 8004e18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <shci_register_io_bus+0x24>)
 8004e1e:	611a      	str	r2, [r3, #16]

  return;
 8004e20:	bf00      	nop
}
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	08004fc9 	.word	0x08004fc9
 8004e30:	0800501d 	.word	0x0800501d

08004e34 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8004e38:	f001 f866 	bl	8005f08 <HW_IPCC_Enable>

  return;
 8004e3c:	bf00      	nop
}
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <TL_Init>:


void TL_Init( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <TL_Init+0x48>)
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <TL_Init+0x4c>)
 8004e48:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <TL_Init+0x48>)
 8004e4c:	4a10      	ldr	r2, [pc, #64]	; (8004e90 <TL_Init+0x50>)
 8004e4e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <TL_Init+0x48>)
 8004e52:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <TL_Init+0x54>)
 8004e54:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <TL_Init+0x48>)
 8004e58:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <TL_Init+0x58>)
 8004e5a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <TL_Init+0x48>)
 8004e5e:	4a0f      	ldr	r2, [pc, #60]	; (8004e9c <TL_Init+0x5c>)
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <TL_Init+0x48>)
 8004e64:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <TL_Init+0x60>)
 8004e66:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <TL_Init+0x48>)
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <TL_Init+0x64>)
 8004e6c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <TL_Init+0x48>)
 8004e70:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <TL_Init+0x68>)
 8004e72:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <TL_Init+0x48>)
 8004e76:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <TL_Init+0x6c>)
 8004e78:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8004e7a:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <TL_Init+0x48>)
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <TL_Init+0x70>)
 8004e7e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8004e80:	f001 f856 	bl	8005f30 <HW_IPCC_Init>

  return;
 8004e84:	bf00      	nop
}
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20030000 	.word	0x20030000
 8004e8c:	20030028 	.word	0x20030028
 8004e90:	20030048 	.word	0x20030048
 8004e94:	20030058 	.word	0x20030058
 8004e98:	20030068 	.word	0x20030068
 8004e9c:	20030070 	.word	0x20030070
 8004ea0:	20030078 	.word	0x20030078
 8004ea4:	20030080 	.word	0x20030080
 8004ea8:	2003009c 	.word	0x2003009c
 8004eac:	200300a0 	.word	0x200300a0
 8004eb0:	200300ac 	.word	0x200300ac

08004eb4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8004ec0:	4811      	ldr	r0, [pc, #68]	; (8004f08 <TL_BLE_Init+0x54>)
 8004ec2:	f000 fa27 	bl	8005314 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <TL_BLE_Init+0x58>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <TL_BLE_Init+0x5c>)
 8004ee0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <TL_BLE_Init+0x54>)
 8004ee6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8004ee8:	f001 f838 	bl	8005f5c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <TL_BLE_Init+0x60>)
 8004ef2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <TL_BLE_Init+0x64>)
 8004efa:	6013      	str	r3, [r2, #0]

  return 0;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200300c8 	.word	0x200300c8
 8004f0c:	20030000 	.word	0x20030000
 8004f10:	2000089c 	.word	0x2000089c
 8004f14:	20000a70 	.word	0x20000a70
 8004f18:	20000a74 	.word	0x20000a74

08004f1c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <TL_BLE_SendCmd+0x34>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <TL_BLE_SendCmd+0x34>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f000 f96c 	bl	8005218 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8004f40:	f001 f816 	bl	8005f70 <HW_IPCC_BLE_SendCmd>

  return 0;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20030000 	.word	0x20030000

08004f54 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8004f5a:	e01c      	b.n	8004f96 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4812      	ldr	r0, [pc, #72]	; (8004fac <HW_IPCC_BLE_RxEvtNot+0x58>)
 8004f62:	f000 fa76 	bl	8005452 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	7a5b      	ldrb	r3, [r3, #9]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d003      	beq.n	8004f76 <HW_IPCC_BLE_RxEvtNot+0x22>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7a5b      	ldrb	r3, [r3, #9]
 8004f72:	2b0e      	cmp	r3, #14
 8004f74:	d105      	bne.n	8004f82 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	2002      	movs	r0, #2
 8004f7c:	f000 f94c 	bl	8005218 <OutputDbgTrace>
 8004f80:	e004      	b.n	8004f8c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4619      	mov	r1, r3
 8004f86:	2003      	movs	r0, #3
 8004f88:	f000 f946 	bl	8005218 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4610      	mov	r0, r2
 8004f94:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8004f96:	4805      	ldr	r0, [pc, #20]	; (8004fac <HW_IPCC_BLE_RxEvtNot+0x58>)
 8004f98:	f000 f9cc 	bl	8005334 <LST_is_empty>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0dc      	beq.n	8004f5c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8004fa2:	bf00      	nop
}
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200300c8 	.word	0x200300c8
 8004fb0:	20000a70 	.word	0x20000a70

08004fb4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8004fb8:	4b02      	ldr	r3, [pc, #8]	; (8004fc4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4798      	blx	r3

  return;
 8004fbe:	bf00      	nop
}
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000a74 	.word	0x20000a74

08004fc8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8004fd4:	480d      	ldr	r0, [pc, #52]	; (800500c <TL_SYS_Init+0x44>)
 8004fd6:	f000 f99d 	bl	8005314 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <TL_SYS_Init+0x48>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a08      	ldr	r2, [pc, #32]	; (800500c <TL_SYS_Init+0x44>)
 8004fec:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8004fee:	f000 ffe1 	bl	8005fb4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <TL_SYS_Init+0x4c>)
 8004ff8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a06      	ldr	r2, [pc, #24]	; (8005018 <TL_SYS_Init+0x50>)
 8005000:	6013      	str	r3, [r2, #0]

  return 0;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200300d0 	.word	0x200300d0
 8005010:	20030000 	.word	0x20030000
 8005014:	20000a78 	.word	0x20000a78
 8005018:	20000a7c 	.word	0x20000a7c

0800501c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <TL_SYS_SendCmd+0x34>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <TL_SYS_SendCmd+0x34>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	2004      	movs	r0, #4
 800503c:	f000 f8ec 	bl	8005218 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005040:	f000 ffc2 	bl	8005fc8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20030000 	.word	0x20030000

08005054 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	2005      	movs	r0, #5
 8005062:	f000 f8d9 	bl	8005218 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a03      	ldr	r2, [pc, #12]	; (8005078 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3

  return;
 8005074:	bf00      	nop
}
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20030000 	.word	0x20030000
 800507c:	20000a78 	.word	0x20000a78

08005080 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005086:	e00e      	b.n	80050a6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	4619      	mov	r1, r3
 800508c:	480b      	ldr	r0, [pc, #44]	; (80050bc <HW_IPCC_SYS_EvtNot+0x3c>)
 800508e:	f000 f9e0 	bl	8005452 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	2006      	movs	r0, #6
 8005098:	f000 f8be 	bl	8005218 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HW_IPCC_SYS_EvtNot+0x40>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	4610      	mov	r0, r2
 80050a4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80050a6:	4805      	ldr	r0, [pc, #20]	; (80050bc <HW_IPCC_SYS_EvtNot+0x3c>)
 80050a8:	f000 f944 	bl	8005334 <LST_is_empty>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ea      	beq.n	8005088 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80050b2:	bf00      	nop
}
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200300d0 	.word	0x200300d0
 80050c0:	20000a7c 	.word	0x20000a7c

080050c4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80050cc:	4817      	ldr	r0, [pc, #92]	; (800512c <TL_MM_Init+0x68>)
 80050ce:	f000 f921 	bl	8005314 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80050d2:	4817      	ldr	r0, [pc, #92]	; (8005130 <TL_MM_Init+0x6c>)
 80050d4:	f000 f91e 	bl	8005314 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80050d8:	4b16      	ldr	r3, [pc, #88]	; (8005134 <TL_MM_Init+0x70>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	4a16      	ldr	r2, [pc, #88]	; (8005138 <TL_MM_Init+0x74>)
 80050de:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <TL_MM_Init+0x74>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <TL_MM_Init+0x74>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <TL_MM_Init+0x74>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0c      	ldr	r2, [pc, #48]	; (800512c <TL_MM_Init+0x68>)
 80050fa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <TL_MM_Init+0x74>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <TL_MM_Init+0x74>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6852      	ldr	r2, [r2, #4]
 800510e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <TL_MM_Init+0x74>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6912      	ldr	r2, [r2, #16]
 8005118:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <TL_MM_Init+0x74>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6952      	ldr	r2, [r2, #20]
 8005122:	619a      	str	r2, [r3, #24]

  return;
 8005124:	bf00      	nop
}
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200300b8 	.word	0x200300b8
 8005130:	20000a68 	.word	0x20000a68
 8005134:	20030000 	.word	0x20030000
 8005138:	20000a80 	.word	0x20000a80

0800513c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4807      	ldr	r0, [pc, #28]	; (8005164 <TL_MM_EvtDone+0x28>)
 8005148:	f000 f93c 	bl	80053c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	2000      	movs	r0, #0
 8005150:	f000 f862 	bl	8005218 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005154:	4804      	ldr	r0, [pc, #16]	; (8005168 <TL_MM_EvtDone+0x2c>)
 8005156:	f000 ff5d 	bl	8006014 <HW_IPCC_MM_SendFreeBuf>

  return;
 800515a:	bf00      	nop
}
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000a68 	.word	0x20000a68
 8005168:	0800516d 	.word	0x0800516d

0800516c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005172:	e00c      	b.n	800518e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	4619      	mov	r1, r3
 8005178:	480a      	ldr	r0, [pc, #40]	; (80051a4 <SendFreeBuf+0x38>)
 800517a:	f000 f96a 	bl	8005452 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <SendFreeBuf+0x3c>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f91b 	bl	80053c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800518e:	4805      	ldr	r0, [pc, #20]	; (80051a4 <SendFreeBuf+0x38>)
 8005190:	f000 f8d0 	bl	8005334 <LST_is_empty>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ec      	beq.n	8005174 <SendFreeBuf+0x8>
  }

  return;
 800519a:	bf00      	nop
}
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000a68 	.word	0x20000a68
 80051a8:	20030000 	.word	0x20030000

080051ac <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <TL_TRACES_Init+0x1c>)
 80051b2:	f000 f8af 	bl	8005314 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <TL_TRACES_Init+0x20>)
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <TL_TRACES_Init+0x1c>)
 80051bc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80051be:	f000 ff5f 	bl	8006080 <HW_IPCC_TRACES_Init>

  return;
 80051c2:	bf00      	nop
}
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200300c0 	.word	0x200300c0
 80051cc:	20030000 	.word	0x20030000

080051d0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80051d6:	e008      	b.n	80051ea <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <HW_IPCC_TRACES_EvtNot+0x30>)
 80051de:	f000 f938 	bl	8005452 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f80d 	bl	8005204 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80051ea:	4805      	ldr	r0, [pc, #20]	; (8005200 <HW_IPCC_TRACES_EvtNot+0x30>)
 80051ec:	f000 f8a2 	bl	8005334 <LST_is_empty>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80051f6:	bf00      	nop
}
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200300c0 	.word	0x200300c0

08005204 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	6039      	str	r1, [r7, #0]
 8005222:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b06      	cmp	r3, #6
 8005228:	d845      	bhi.n	80052b6 <OutputDbgTrace+0x9e>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <OutputDbgTrace+0x18>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	0800524d 	.word	0x0800524d
 8005234:	08005271 	.word	0x08005271
 8005238:	08005277 	.word	0x08005277
 800523c:	0800528b 	.word	0x0800528b
 8005240:	08005297 	.word	0x08005297
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052ab 	.word	0x080052ab
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	7a5b      	ldrb	r3, [r3, #9]
 8005254:	2bff      	cmp	r3, #255	; 0xff
 8005256:	d005      	beq.n	8005264 <OutputDbgTrace+0x4c>
 8005258:	2bff      	cmp	r3, #255	; 0xff
 800525a:	dc05      	bgt.n	8005268 <OutputDbgTrace+0x50>
 800525c:	2b0e      	cmp	r3, #14
 800525e:	d005      	beq.n	800526c <OutputDbgTrace+0x54>
 8005260:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005262:	e001      	b.n	8005268 <OutputDbgTrace+0x50>
          break;
 8005264:	bf00      	nop
 8005266:	e027      	b.n	80052b8 <OutputDbgTrace+0xa0>
          break;
 8005268:	bf00      	nop
 800526a:	e025      	b.n	80052b8 <OutputDbgTrace+0xa0>
          break;
 800526c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800526e:	e023      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005274:	e020      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	7a5b      	ldrb	r3, [r3, #9]
 800527e:	2b0e      	cmp	r3, #14
 8005280:	d001      	beq.n	8005286 <OutputDbgTrace+0x6e>
 8005282:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005284:	e000      	b.n	8005288 <OutputDbgTrace+0x70>
          break;
 8005286:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005288:	e016      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	7a5b      	ldrb	r3, [r3, #9]
 8005292:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005294:	e010      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800529a:	e00d      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	7a5b      	ldrb	r3, [r3, #9]
 80052a4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80052a6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80052a8:	e006      	b.n	80052b8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	7a5b      	ldrb	r3, [r3, #9]
 80052b2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80052b4:	e000      	b.n	80052b8 <OutputDbgTrace+0xa0>

    default:
      break;
 80052b6:	bf00      	nop
  }

  return;
 80052b8:	bf00      	nop
}
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <OTP_Read+0x48>)
 80052d0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80052d2:	e002      	b.n	80052da <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3b08      	subs	r3, #8
 80052d8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3307      	adds	r3, #7
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	79fa      	ldrb	r2, [r7, #7]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d003      	beq.n	80052ee <OTP_Read+0x2a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <OTP_Read+0x4c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d1f2      	bne.n	80052d4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3307      	adds	r3, #7
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	79fa      	ldrb	r2, [r7, #7]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d001      	beq.n	80052fe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80052fe:	68fb      	ldr	r3, [r7, #12]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	1fff73f8 	.word	0x1fff73f8
 8005310:	1fff7000 	.word	0x1fff7000

08005314 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533c:	f3ef 8310 	mrs	r3, PRIMASK
 8005340:	60fb      	str	r3, [r7, #12]
  return(result);
 8005342:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005346:	b672      	cpsid	i
}
 8005348:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d102      	bne.n	800535a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	e001      	b.n	800535e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005382:	f3ef 8310 	mrs	r3, PRIMASK
 8005386:	60fb      	str	r3, [r7, #12]
  return(result);
 8005388:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800538a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800538c:	b672      	cpsid	i
}
 800538e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8310 	mrs	r3, PRIMASK
 80053d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80053d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80053d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80053d8:	b672      	cpsid	i
}
 80053da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f383 8810 	msr	PRIMASK, r3
}
 8005402:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005418:	f3ef 8310 	mrs	r3, PRIMASK
 800541c:	60fb      	str	r3, [r7, #12]
  return(result);
 800541e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005422:	b672      	cpsid	i
}
 8005424:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6852      	ldr	r2, [r2, #4]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f383 8810 	msr	PRIMASK, r3
}
 8005444:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545c:	f3ef 8310 	mrs	r3, PRIMASK
 8005460:	60fb      	str	r3, [r7, #12]
  return(result);
 8005462:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005466:	b672      	cpsid	i
}
 8005468:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ffca 	bl	8005410 <LST_remove_node>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005488:	bf00      	nop
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <LL_FLASH_GetUDN+0x14>)
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	1fff7580 	.word	0x1fff7580

080054a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <LL_FLASH_GetDeviceID+0x14>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	1fff7584 	.word	0x1fff7584

080054c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <LL_FLASH_GetSTCompanyID+0x14>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0a1b      	lsrs	r3, r3, #8
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	1fff7584 	.word	0x1fff7584

080054d8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80054d8:	b5b0      	push	{r4, r5, r7, lr}
 80054da:	b090      	sub	sp, #64	; 0x40
 80054dc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80054de:	2392      	movs	r3, #146	; 0x92
 80054e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80054e4:	4b25      	ldr	r3, [pc, #148]	; (800557c <APP_BLE_Init+0xa4>)
 80054e6:	1d3c      	adds	r4, r7, #4
 80054e8:	461d      	mov	r5, r3
 80054ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054fa:	c403      	stmia	r4!, {r0, r1}
 80054fc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80054fe:	f000 f905 	bl	800570c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005502:	2101      	movs	r1, #1
 8005504:	2002      	movs	r0, #2
 8005506:	f000 fde3 	bl	80060d0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <APP_BLE_Init+0xa8>)
 800550c:	2100      	movs	r1, #0
 800550e:	2002      	movs	r0, #2
 8005510:	f000 ff0a 	bl	8006328 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff f8d0 	bl	80046bc <SHCI_C2_BLE_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8005522:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800552a:	f7fb fb8a 	bl	8000c42 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800552e:	f000 f903 	bl	8005738 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005532:	f7ff f81d 	bl	8004570 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <APP_BLE_Init+0xac>)
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <APP_BLE_Init+0xac>)
 8005540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005544:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005546:	4a10      	ldr	r2, [pc, #64]	; (8005588 <APP_BLE_Init+0xb0>)
 8005548:	2100      	movs	r1, #0
 800554a:	2001      	movs	r0, #1
 800554c:	f000 feec 	bl	8006328 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8005550:	2006      	movs	r0, #6
 8005552:	f7fe fe81 	bl	8004258 <aci_hal_set_radio_activity_mask>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800555c:	f000 fa9b 	bl	8005a96 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <APP_BLE_Init+0xac>)
 8005562:	2200      	movs	r2, #0
 8005564:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <APP_BLE_Init+0xac>)
 8005568:	2200      	movs	r2, #0
 800556a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800556c:	2001      	movs	r0, #1
 800556e:	f000 f997 	bl	80058a0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8005572:	bf00      	nop
}
 8005574:	3740      	adds	r7, #64	; 0x40
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}
 800557a:	bf00      	nop
 800557c:	08006680 	.word	0x08006680
 8005580:	080048d9 	.word	0x080048d9
 8005584:	20000a8c 	.word	0x20000a8c
 8005588:	08005989 	.word	0x08005989

0800558c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8005594:	2392      	movs	r3, #146	; 0x92
 8005596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3301      	adds	r3, #1
 800559e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2bff      	cmp	r3, #255	; 0xff
 80055a6:	d053      	beq.n	8005650 <SVCCTL_App_Notification+0xc4>
 80055a8:	2bff      	cmp	r3, #255	; 0xff
 80055aa:	f300 80a1 	bgt.w	80056f0 <SVCCTL_App_Notification+0x164>
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d002      	beq.n	80055b8 <SVCCTL_App_Notification+0x2c>
 80055b2:	2b3e      	cmp	r3, #62	; 0x3e
 80055b4:	d020      	beq.n	80055f8 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80055b6:	e09b      	b.n	80056f0 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	3302      	adds	r3, #2
 80055bc:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80055c8:	8adb      	ldrh	r3, [r3, #22]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d106      	bne.n	80055dc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80055ce:	4b4c      	ldr	r3, [pc, #304]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80055d4:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80055dc:	2001      	movs	r0, #1
 80055de:	f000 f95f 	bl	80058a0 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80055e2:	4b48      	ldr	r3, [pc, #288]	; (8005704 <SVCCTL_App_Notification+0x178>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80055ea:	8ada      	ldrh	r2, [r3, #22]
 80055ec:	4b45      	ldr	r3, [pc, #276]	; (8005704 <SVCCTL_App_Notification+0x178>)
 80055ee:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80055f0:	4844      	ldr	r0, [pc, #272]	; (8005704 <SVCCTL_App_Notification+0x178>)
 80055f2:	f000 fa3c 	bl	8005a6e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80055f6:	e07e      	b.n	80056f6 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	3302      	adds	r3, #2
 80055fc:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <SVCCTL_App_Notification+0x7e>
 8005606:	2b03      	cmp	r3, #3
          break;
 8005608:	e021      	b.n	800564e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005610:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <SVCCTL_App_Notification+0x174>)
 8005612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005616:	2b04      	cmp	r3, #4
 8005618:	d104      	bne.n	8005624 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800561a:	4b39      	ldr	r3, [pc, #228]	; (8005700 <SVCCTL_App_Notification+0x174>)
 800561c:	2206      	movs	r2, #6
 800561e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005622:	e003      	b.n	800562c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005624:	4b36      	ldr	r3, [pc, #216]	; (8005700 <SVCCTL_App_Notification+0x174>)
 8005626:	2205      	movs	r2, #5
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005632:	b29a      	uxth	r2, r3
 8005634:	4b32      	ldr	r3, [pc, #200]	; (8005700 <SVCCTL_App_Notification+0x174>)
 8005636:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8005638:	4b32      	ldr	r3, [pc, #200]	; (8005704 <SVCCTL_App_Notification+0x178>)
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800563e:	4b30      	ldr	r3, [pc, #192]	; (8005700 <SVCCTL_App_Notification+0x174>)
 8005640:	8ada      	ldrh	r2, [r3, #22]
 8005642:	4b30      	ldr	r3, [pc, #192]	; (8005704 <SVCCTL_App_Notification+0x178>)
 8005644:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8005646:	482f      	ldr	r0, [pc, #188]	; (8005704 <SVCCTL_App_Notification+0x178>)
 8005648:	f000 fa11 	bl	8005a6e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800564c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800564e:	e052      	b.n	80056f6 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	3302      	adds	r3, #2
 8005654:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005660:	d040      	beq.n	80056e4 <SVCCTL_App_Notification+0x158>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	dc45      	bgt.n	80056f4 <SVCCTL_App_Notification+0x168>
 8005668:	2b04      	cmp	r3, #4
 800566a:	d03d      	beq.n	80056e8 <SVCCTL_App_Notification+0x15c>
 800566c:	2b04      	cmp	r3, #4
 800566e:	db41      	blt.n	80056f4 <SVCCTL_App_Notification+0x168>
 8005670:	f240 420a 	movw	r2, #1034	; 0x40a
 8005674:	4293      	cmp	r3, r2
 8005676:	dc3d      	bgt.n	80056f4 <SVCCTL_App_Notification+0x168>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	dd3a      	ble.n	80056f4 <SVCCTL_App_Notification+0x168>
 800567e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8005682:	2b09      	cmp	r3, #9
 8005684:	d836      	bhi.n	80056f4 <SVCCTL_App_Notification+0x168>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <SVCCTL_App_Notification+0x100>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056dd 	.word	0x080056dd
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056f5 	.word	0x080056f5
 8005698:	080056f5 	.word	0x080056f5
 800569c:	080056f5 	.word	0x080056f5
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	080056ed 	.word	0x080056ed
 80056a8:	080056f5 	.word	0x080056f5
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056ed 	.word	0x080056ed
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80056b6:	8adb      	ldrh	r3, [r3, #22]
 80056b8:	4913      	ldr	r1, [pc, #76]	; (8005708 <SVCCTL_App_Notification+0x17c>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe f823 	bl	8003706 <aci_gap_pass_key_resp>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80056c6:	e012      	b.n	80056ee <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <SVCCTL_App_Notification+0x174>)
 80056ca:	8adb      	ldrh	r3, [r3, #22]
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe f9c3 	bl	8003a5a <aci_gap_numeric_comparison_value_confirm_yesno>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80056da:	e008      	b.n	80056ee <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3302      	adds	r3, #2
 80056e0:	61bb      	str	r3, [r7, #24]
          break;
 80056e2:	e004      	b.n	80056ee <SVCCTL_App_Notification+0x162>
          break;
 80056e4:	bf00      	nop
 80056e6:	e005      	b.n	80056f4 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80056e8:	bf00      	nop
 80056ea:	e003      	b.n	80056f4 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80056ec:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80056ee:	e001      	b.n	80056f4 <SVCCTL_App_Notification+0x168>
      break;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80056f4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80056f6:	2301      	movs	r3, #1
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000a8c 	.word	0x20000a8c
 8005704:	20000b10 	.word	0x20000b10
 8005708:	0001b207 	.word	0x0001b207

0800570c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <Ble_Tl_Init+0x20>)
 8005714:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <Ble_Tl_Init+0x24>)
 8005718:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800571a:	463b      	mov	r3, r7
 800571c:	4619      	mov	r1, r3
 800571e:	4805      	ldr	r0, [pc, #20]	; (8005734 <Ble_Tl_Init+0x28>)
 8005720:	f7ff f8be 	bl	80048a0 <hci_init>

  return;
 8005724:	bf00      	nop
}
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200300d8 	.word	0x200300d8
 8005730:	08005a39 	.word	0x08005a39
 8005734:	08005a01 	.word	0x08005a01

08005738 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8005738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573a:	b08d      	sub	sp, #52	; 0x34
 800573c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800573e:	2300      	movs	r3, #0
 8005740:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005742:	2392      	movs	r3, #146	; 0x92
 8005744:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8005746:	f7fe fddb 	bl	8004300 <hci_reset>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800574e:	f000 f8d7 	bl	8005900 <BleGetBdAddress>
 8005752:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	2106      	movs	r1, #6
 8005758:	2000      	movs	r0, #0
 800575a:	f7fe fc91 	bl	8004080 <aci_hal_write_config_data>
 800575e:	4603      	mov	r3, r0
 8005760:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8005762:	4a4a      	ldr	r2, [pc, #296]	; (800588c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8005764:	2110      	movs	r1, #16
 8005766:	2018      	movs	r0, #24
 8005768:	f7fe fc8a 	bl	8004080 <aci_hal_write_config_data>
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8005770:	4a47      	ldr	r2, [pc, #284]	; (8005890 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8005772:	2110      	movs	r1, #16
 8005774:	2008      	movs	r0, #8
 8005776:	f7fe fc83 	bl	8004080 <aci_hal_write_config_data>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800577e:	2118      	movs	r1, #24
 8005780:	2001      	movs	r0, #1
 8005782:	f7fe fd02 	bl	800418a <aci_hal_set_tx_power_level>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800578a:	f7fe f9cd 	bl	8003b28 <aci_gatt_init>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01f      	beq.n	80057e4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80057a6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80057a8:	1dba      	adds	r2, r7, #6
 80057aa:	7bf8      	ldrb	r0, [r7, #15]
 80057ac:	1cbb      	adds	r3, r7, #2
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	2208      	movs	r2, #8
 80057b8:	2100      	movs	r1, #0
 80057ba:	f7fe f80b 	bl	80037d4 <aci_gap_init>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80057c2:	88fc      	ldrh	r4, [r7, #6]
 80057c4:	88bd      	ldrh	r5, [r7, #4]
 80057c6:	68b8      	ldr	r0, [r7, #8]
 80057c8:	f7fa fcd8 	bl	800017c <strlen>
 80057cc:	4603      	mov	r3, r0
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	4629      	mov	r1, r5
 80057da:	4620      	mov	r0, r4
 80057dc:	f7fe fba7 	bl	8003f2e <aci_gatt_update_char_value>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80057e4:	88f8      	ldrh	r0, [r7, #6]
 80057e6:	8879      	ldrh	r1, [r7, #2]
 80057e8:	463b      	mov	r3, r7
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2302      	movs	r3, #2
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7fe fb9d 	bl	8003f2e <aci_gatt_update_char_value>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80057f8:	2202      	movs	r2, #2
 80057fa:	2102      	movs	r1, #2
 80057fc:	2000      	movs	r0, #0
 80057fe:	f7fe fda3 	bl	8004348 <hci_le_set_default_phy>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800580c:	4b22      	ldr	r3, [pc, #136]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd fe60 	bl	80034d6 <aci_gap_set_io_capability>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800581a:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800581c:	2201      	movs	r2, #1
 800581e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005822:	2208      	movs	r2, #8
 8005824:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005826:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005828:	2210      	movs	r2, #16
 800582a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800582e:	2200      	movs	r2, #0
 8005830:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005832:	4b19      	ldr	r3, [pc, #100]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8005836:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800583a:	2200      	movs	r2, #0
 800583c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005840:	789c      	ldrb	r4, [r3, #2]
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005844:	785d      	ldrb	r5, [r3, #1]
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800584c:	7952      	ldrb	r2, [r2, #5]
 800584e:	4912      	ldr	r1, [pc, #72]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005850:	78c9      	ldrb	r1, [r1, #3]
 8005852:	4811      	ldr	r0, [pc, #68]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005854:	6880      	ldr	r0, [r0, #8]
 8005856:	2600      	movs	r6, #0
 8005858:	9604      	str	r6, [sp, #16]
 800585a:	9003      	str	r0, [sp, #12]
 800585c:	9102      	str	r1, [sp, #8]
 800585e:	9201      	str	r2, [sp, #4]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	2201      	movs	r2, #1
 8005866:	4629      	mov	r1, r5
 8005868:	4620      	mov	r0, r4
 800586a:	f7fd fe88 	bl	800357e <aci_gap_set_authentication_requirement>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005874:	789b      	ldrb	r3, [r3, #2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800587a:	f7fe f8ca 	bl	8003a12 <aci_gap_configure_whitelist>
 800587e:	4603      	mov	r3, r0
 8005880:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588a:	bf00      	nop
 800588c:	08006880 	.word	0x08006880
 8005890:	08006890 	.word	0x08006890
 8005894:	080066bc 	.word	0x080066bc
 8005898:	20000a8c 	.word	0x20000a8c
 800589c:	0001b207 	.word	0x0001b207

080058a0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	; 0x30
 80058a4:	af08      	add	r7, sp, #32
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80058aa:	2392      	movs	r3, #146	; 0x92
 80058ac:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80058ae:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <Adv_Request+0x58>)
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80058b6:	2300      	movs	r3, #0
 80058b8:	9306      	str	r3, [sp, #24]
 80058ba:	2300      	movs	r3, #0
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9303      	str	r3, [sp, #12]
 80058c6:	2300      	movs	r3, #0
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	22a0      	movs	r2, #160	; 0xa0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fd fd02 	bl	80032e2 <aci_gap_set_discoverable>
 80058de:	4603      	mov	r3, r0
 80058e0:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80058e2:	4906      	ldr	r1, [pc, #24]	; (80058fc <Adv_Request+0x5c>)
 80058e4:	200b      	movs	r0, #11
 80058e6:	f7fe f822 	bl	800392e <aci_gap_update_adv_data>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80058ee:	bf00      	nop
}
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000a8c 	.word	0x20000a8c
 80058fc:	20000014 	.word	0x20000014

08005900 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8005906:	f7ff fdc3 	bl	8005490 <LL_FLASH_GetUDN>
 800590a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d023      	beq.n	800595c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8005914:	f7ff fdd4 	bl	80054c0 <LL_FLASH_GetSTCompanyID>
 8005918:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800591a:	f7ff fdc5 	bl	80054a8 <LL_FLASH_GetDeviceID>
 800591e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <BleGetBdAddress+0x80>)
 8005926:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <BleGetBdAddress+0x80>)
 8005930:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <BleGetBdAddress+0x80>)
 8005938:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <BleGetBdAddress+0x80>)
 8005940:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <BleGetBdAddress+0x80>)
 800594a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	b2da      	uxtb	r2, r3
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <BleGetBdAddress+0x80>)
 8005954:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <BleGetBdAddress+0x80>)
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e00b      	b.n	8005974 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800595c:	2000      	movs	r0, #0
 800595e:	f7ff fcb1 	bl	80052c4 <OTP_Read>
 8005962:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e001      	b.n	8005974 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <BleGetBdAddress+0x84>)
 8005972:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8005974:	697b      	ldr	r3, [r7, #20]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000a84 	.word	0x20000a84
 8005984:	08006878 	.word	0x08006878

08005988 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <Adv_Cancel+0x30>)
 8005990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005994:	2b05      	cmp	r3, #5
 8005996:	d00a      	beq.n	80059ae <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005998:	2392      	movs	r3, #146	; 0x92
 800599a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800599c:	f7fd fc7d 	bl	800329a <aci_gap_set_non_discoverable>
 80059a0:	4603      	mov	r3, r0
 80059a2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <Adv_Cancel+0x30>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
}
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000a8c 	.word	0x20000a8c

080059bc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2002      	movs	r0, #2
 80059c8:	f000 fcd0 	bl	800636c <UTIL_SEQ_SetTask>

  return;
 80059cc:	bf00      	nop
}
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80059dc:	2001      	movs	r0, #1
 80059de:	f000 fd31 	bl	8006444 <UTIL_SEQ_SetEvt>

  return;
 80059e2:	bf00      	nop
}
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f000 fd46 	bl	8006484 <UTIL_SEQ_WaitEvt>

  return;
 80059f8:	bf00      	nop
}
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	3308      	adds	r3, #8
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fdfe 	bl	8004614 <SVCCTL_UserEvtRx>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8005a28:	e003      	b.n	8005a32 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
  return;
 8005a30:	bf00      	nop
}
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <BLE_StatusNot+0x16>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d006      	beq.n	8005a5a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8005a4c:	e00b      	b.n	8005a66 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fcb6 	bl	80063c4 <UTIL_SEQ_PauseTask>
      break;
 8005a58:	e005      	b.n	8005a66 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fcd0 	bl	8006404 <UTIL_SEQ_ResumeTask>
      break;
 8005a64:	bf00      	nop
  }

  return;
 8005a66:	bf00      	nop
}
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <Custom_APP_Notification+0x16>
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d002      	beq.n	8005a88 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8005a82:	e002      	b.n	8005a8a <Custom_APP_Notification+0x1c>
      break;
 8005a84:	bf00      	nop
 8005a86:	e000      	b.n	8005a8a <Custom_APP_Notification+0x1c>
      break;
 8005a88:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8005a8a:	bf00      	nop
}
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8005a9a:	bf00      	nop
}
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08b      	sub	sp, #44	; 0x2c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2bff      	cmp	r3, #255	; 0xff
 8005abe:	d12b      	bne.n	8005b18 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f640 4214 	movw	r2, #3092	; 0xc14
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01b      	beq.n	8005b0c <Custom_STM_Event_Handler+0x68>
 8005ad4:	f640 4214 	movw	r2, #3092	; 0xc14
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	dc19      	bgt.n	8005b10 <Custom_STM_Event_Handler+0x6c>
 8005adc:	f640 4201 	movw	r2, #3073	; 0xc01
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <Custom_STM_Event_Handler+0x48>
 8005ae4:	f640 4213 	movw	r2, #3091	; 0xc13
 8005ae8:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8005aea:	e014      	b.n	8005b16 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3302      	adds	r3, #2
 8005af0:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	885b      	ldrh	r3, [r3, #2]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <Custom_STM_Event_Handler+0x88>)
 8005afc:	885b      	ldrh	r3, [r3, #2]
 8005afe:	3301      	adds	r3, #1
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d107      	bne.n	8005b14 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8005b0a:	e003      	b.n	8005b14 <Custom_STM_Event_Handler+0x70>
          break;
 8005b0c:	bf00      	nop
 8005b0e:	e004      	b.n	8005b1a <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8005b10:	bf00      	nop
 8005b12:	e002      	b.n	8005b1a <Custom_STM_Event_Handler+0x76>
          break;
 8005b14:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8005b16:	e000      	b.n	8005b1a <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8005b18:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8005b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8005b1e:	4618      	mov	r0, r3
 8005b20:	372c      	adds	r7, #44	; 0x2c
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000b14 	.word	0x20000b14

08005b30 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08c      	sub	sp, #48	; 0x30
 8005b34:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005b36:	2392      	movs	r3, #146	; 0x92
 8005b38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8005b3a:	4834      	ldr	r0, [pc, #208]	; (8005c0c <SVCCTL_InitCustomSvc+0xdc>)
 8005b3c:	f7fe fd50 	bl	80045e0 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for CharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8005b40:	238f      	movs	r3, #143	; 0x8f
 8005b42:	713b      	strb	r3, [r7, #4]
 8005b44:	23e5      	movs	r3, #229	; 0xe5
 8005b46:	717b      	strb	r3, [r7, #5]
 8005b48:	23b3      	movs	r3, #179	; 0xb3
 8005b4a:	71bb      	strb	r3, [r7, #6]
 8005b4c:	23d5      	movs	r3, #213	; 0xd5
 8005b4e:	71fb      	strb	r3, [r7, #7]
 8005b50:	232e      	movs	r3, #46	; 0x2e
 8005b52:	723b      	strb	r3, [r7, #8]
 8005b54:	237f      	movs	r3, #127	; 0x7f
 8005b56:	727b      	strb	r3, [r7, #9]
 8005b58:	234a      	movs	r3, #74	; 0x4a
 8005b5a:	72bb      	strb	r3, [r7, #10]
 8005b5c:	2398      	movs	r3, #152	; 0x98
 8005b5e:	72fb      	strb	r3, [r7, #11]
 8005b60:	232a      	movs	r3, #42	; 0x2a
 8005b62:	733b      	strb	r3, [r7, #12]
 8005b64:	2348      	movs	r3, #72	; 0x48
 8005b66:	737b      	strb	r3, [r7, #13]
 8005b68:	237a      	movs	r3, #122	; 0x7a
 8005b6a:	73bb      	strb	r3, [r7, #14]
 8005b6c:	23cc      	movs	r3, #204	; 0xcc
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	2300      	movs	r3, #0
 8005b72:	743b      	strb	r3, [r7, #16]
 8005b74:	2300      	movs	r3, #0
 8005b76:	747b      	strb	r3, [r7, #17]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	74bb      	strb	r3, [r7, #18]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8005b80:	1d39      	adds	r1, r7, #4
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <SVCCTL_InitCustomSvc+0xe0>)
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2303      	movs	r3, #3
 8005b88:	2201      	movs	r2, #1
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	f7fd fff1 	bl	8003b72 <aci_gatt_add_service>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CharWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8005b94:	2319      	movs	r3, #25
 8005b96:	713b      	strb	r3, [r7, #4]
 8005b98:	23ed      	movs	r3, #237	; 0xed
 8005b9a:	717b      	strb	r3, [r7, #5]
 8005b9c:	2382      	movs	r3, #130	; 0x82
 8005b9e:	71bb      	strb	r3, [r7, #6]
 8005ba0:	23ae      	movs	r3, #174	; 0xae
 8005ba2:	71fb      	strb	r3, [r7, #7]
 8005ba4:	23ed      	movs	r3, #237	; 0xed
 8005ba6:	723b      	strb	r3, [r7, #8]
 8005ba8:	2321      	movs	r3, #33	; 0x21
 8005baa:	727b      	strb	r3, [r7, #9]
 8005bac:	234c      	movs	r3, #76	; 0x4c
 8005bae:	72bb      	strb	r3, [r7, #10]
 8005bb0:	239d      	movs	r3, #157	; 0x9d
 8005bb2:	72fb      	strb	r3, [r7, #11]
 8005bb4:	2341      	movs	r3, #65	; 0x41
 8005bb6:	733b      	strb	r3, [r7, #12]
 8005bb8:	2345      	movs	r3, #69	; 0x45
 8005bba:	737b      	strb	r3, [r7, #13]
 8005bbc:	2322      	movs	r3, #34	; 0x22
 8005bbe:	73bb      	strb	r3, [r7, #14]
 8005bc0:	238e      	movs	r3, #142	; 0x8e
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	743b      	strb	r3, [r7, #16]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	747b      	strb	r3, [r7, #17]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	74bb      	strb	r3, [r7, #18]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <SVCCTL_InitCustomSvc+0xe0>)
 8005bd6:	8818      	ldrh	r0, [r3, #0]
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <SVCCTL_InitCustomSvc+0xe4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	1d3a      	adds	r2, r7, #4
 8005be0:	490d      	ldr	r1, [pc, #52]	; (8005c18 <SVCCTL_InitCustomSvc+0xe8>)
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	2100      	movs	r1, #0
 8005be6:	9104      	str	r1, [sp, #16]
 8005be8:	2110      	movs	r1, #16
 8005bea:	9103      	str	r1, [sp, #12]
 8005bec:	2101      	movs	r1, #1
 8005bee:	9102      	str	r1, [sp, #8]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	9101      	str	r1, [sp, #4]
 8005bf4:	2108      	movs	r1, #8
 8005bf6:	9100      	str	r1, [sp, #0]
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	f7fe f890 	bl	8003d1e <aci_gatt_add_char>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8005c02:	bf00      	nop
}
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	08005aa5 	.word	0x08005aa5
 8005c10:	20000b14 	.word	0x20000b14
 8005c14:	2000001f 	.word	0x2000001f
 8005c18:	20000b16 	.word	0x20000b16

08005c1c <LL_PWR_EnableBootC2>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <LL_PWR_EnableBootC2+0x1c>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <LL_PWR_EnableBootC2+0x1c>)
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2a:	60d3      	str	r3, [r2, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	58000400 	.word	0x58000400

08005c3c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005c46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005c4a:	4905      	ldr	r1, [pc, #20]	; (8005c60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	58000800 	.word	0x58000800

08005c64 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	4904      	ldr	r1, [pc, #16]	; (8005c84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	620b      	str	r3, [r1, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	58000800 	.word	0x58000800

08005c88 <LL_AHB3_GRP1_EnableClock>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8005cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_C1_IPCC_EnableIT_TXF>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_C1_IPCC_EnableIT_RXO>:
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	605a      	str	r2, [r3, #4]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	605a      	str	r2, [r3, #4]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_C1_IPCC_SetFlag_CHx>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	041a      	lsls	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	609a      	str	r2, [r3, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	4013      	ands	r3, r2
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d101      	bne.n	8005df6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	4013      	ands	r3, r2
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d101      	bne.n	8005e20 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8005e34:	2102      	movs	r1, #2
 8005e36:	4818      	ldr	r0, [pc, #96]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e38:	f7ff ffe4 	bl	8005e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HW_IPCC_Rx_Handler+0x24>
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8005e4e:	f000 f8d5 	bl	8005ffc <HW_IPCC_SYS_EvtHandler>
 8005e52:	e01e      	b.n	8005e92 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8005e54:	2101      	movs	r1, #1
 8005e56:	4810      	ldr	r0, [pc, #64]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e58:	f7ff ffd4 	bl	8005e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HW_IPCC_Rx_Handler+0x44>
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8005e6e:	f000 f889 	bl	8005f84 <HW_IPCC_BLE_EvtHandler>
 8005e72:	e00e      	b.n	8005e92 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8005e74:	2108      	movs	r1, #8
 8005e76:	4808      	ldr	r0, [pc, #32]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e78:	f7ff ffc4 	bl	8005e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HW_IPCC_Rx_Handler+0x64>
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HW_IPCC_Rx_Handler+0x68>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8005e8e:	f000 f901 	bl	8006094 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
}
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	58000c00 	.word	0x58000c00

08005e9c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	4818      	ldr	r0, [pc, #96]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005ea4:	f7ff ff99 	bl	8005dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d108      	bne.n	8005ec0 <HW_IPCC_Tx_Handler+0x24>
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8005eba:	f000 f893 	bl	8005fe4 <HW_IPCC_SYS_CmdEvtHandler>
 8005ebe:	e01e      	b.n	8005efe <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8005ec0:	2108      	movs	r1, #8
 8005ec2:	4810      	ldr	r0, [pc, #64]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005ec4:	f7ff ff89 	bl	8005dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d108      	bne.n	8005ee0 <HW_IPCC_Tx_Handler+0x44>
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8005eda:	f000 f8bd 	bl	8006058 <HW_IPCC_MM_FreeBufHandler>
 8005ede:	e00e      	b.n	8005efe <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	4808      	ldr	r0, [pc, #32]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005ee4:	f7ff ff79 	bl	8005dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HW_IPCC_Tx_Handler+0x64>
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <HW_IPCC_Tx_Handler+0x68>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8005efa:	f000 f84f 	bl	8005f9c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
}
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	58000c00 	.word	0x58000c00

08005f08 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8005f0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f10:	f7ff fed3 	bl	8005cba <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8005f14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f18:	f7ff fea4 	bl	8005c64 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005f1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f20:	f7ff fe8c 	bl	8005c3c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005f24:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005f26:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8005f28:	f7ff fe78 	bl	8005c1c <LL_PWR_EnableBootC2>

  return;
 8005f2c:	bf00      	nop
}
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8005f34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f38:	f7ff fea6 	bl	8005c88 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8005f3c:	4806      	ldr	r0, [pc, #24]	; (8005f58 <HW_IPCC_Init+0x28>)
 8005f3e:	f7ff fee8 	bl	8005d12 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8005f42:	4805      	ldr	r0, [pc, #20]	; (8005f58 <HW_IPCC_Init+0x28>)
 8005f44:	f7ff fed5 	bl	8005cf2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005f48:	202c      	movs	r0, #44	; 0x2c
 8005f4a:	f7fb f9a2 	bl	8001292 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005f4e:	202d      	movs	r0, #45	; 0x2d
 8005f50:	f7fb f99f 	bl	8001292 <HAL_NVIC_EnableIRQ>

  return;
 8005f54:	bf00      	nop
}
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	58000c00 	.word	0x58000c00

08005f5c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005f60:	2101      	movs	r1, #1
 8005f62:	4802      	ldr	r0, [pc, #8]	; (8005f6c <HW_IPCC_BLE_Init+0x10>)
 8005f64:	f7ff ff0a 	bl	8005d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005f68:	bf00      	nop
}
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	58000c00 	.word	0x58000c00

08005f70 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8005f74:	2101      	movs	r1, #1
 8005f76:	4802      	ldr	r0, [pc, #8]	; (8005f80 <HW_IPCC_BLE_SendCmd+0x10>)
 8005f78:	f7ff ff20 	bl	8005dbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8005f7c:	bf00      	nop
}
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58000c00 	.word	0x58000c00

08005f84 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8005f88:	f7fe ffe4 	bl	8004f54 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4802      	ldr	r0, [pc, #8]	; (8005f98 <HW_IPCC_BLE_EvtHandler+0x14>)
 8005f90:	f7ff ff06 	bl	8005da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8005f94:	bf00      	nop
}
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	58000c00 	.word	0x58000c00

08005f9c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8005fa0:	2120      	movs	r1, #32
 8005fa2:	4803      	ldr	r0, [pc, #12]	; (8005fb0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8005fa4:	f7ff fed8 	bl	8005d58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8005fa8:	f7ff f804 	bl	8004fb4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8005fac:	bf00      	nop
}
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	58000c00 	.word	0x58000c00

08005fb4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8005fb8:	2102      	movs	r1, #2
 8005fba:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <HW_IPCC_SYS_Init+0x10>)
 8005fbc:	f7ff fede 	bl	8005d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005fc0:	bf00      	nop
}
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58000c00 	.word	0x58000c00

08005fc8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <HW_IPCC_SYS_SendCmd+0x18>)
 8005fd0:	f7ff fef4 	bl	8005dbc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4802      	ldr	r0, [pc, #8]	; (8005fe0 <HW_IPCC_SYS_SendCmd+0x18>)
 8005fd8:	f7ff feab 	bl	8005d32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8005fdc:	bf00      	nop
}
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	58000c00 	.word	0x58000c00

08005fe4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4803      	ldr	r0, [pc, #12]	; (8005ff8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8005fec:	f7ff feb4 	bl	8005d58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8005ff0:	f7ff f830 	bl	8005054 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8005ff4:	bf00      	nop
}
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58000c00 	.word	0x58000c00

08005ffc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006000:	f7ff f83e 	bl	8005080 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006004:	2102      	movs	r1, #2
 8006006:	4802      	ldr	r0, [pc, #8]	; (8006010 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006008:	f7ff feca 	bl	8005da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800600c:	bf00      	nop
}
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58000c00 	.word	0x58000c00

08006014 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800601c:	2108      	movs	r1, #8
 800601e:	480c      	ldr	r0, [pc, #48]	; (8006050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006020:	f7ff fedb 	bl	8005dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800602a:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006030:	2108      	movs	r1, #8
 8006032:	4807      	ldr	r0, [pc, #28]	; (8006050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006034:	f7ff fe7d 	bl	8005d32 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006038:	e006      	b.n	8006048 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800603e:	2108      	movs	r1, #8
 8006040:	4803      	ldr	r0, [pc, #12]	; (8006050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006042:	f7ff febb 	bl	8005dbc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006046:	bf00      	nop
}
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	58000c00 	.word	0x58000c00
 8006054:	20000b18 	.word	0x20000b18

08006058 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800605c:	2108      	movs	r1, #8
 800605e:	4806      	ldr	r0, [pc, #24]	; (8006078 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006060:	f7ff fe7a 	bl	8005d58 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800606a:	2108      	movs	r1, #8
 800606c:	4802      	ldr	r0, [pc, #8]	; (8006078 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800606e:	f7ff fea5 	bl	8005dbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006072:	bf00      	nop
}
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	58000c00 	.word	0x58000c00
 800607c:	20000b18 	.word	0x20000b18

08006080 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006084:	2108      	movs	r1, #8
 8006086:	4802      	ldr	r0, [pc, #8]	; (8006090 <HW_IPCC_TRACES_Init+0x10>)
 8006088:	f7ff fe78 	bl	8005d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800608c:	bf00      	nop
}
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58000c00 	.word	0x58000c00

08006094 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006098:	f7ff f89a 	bl	80051d0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800609c:	2108      	movs	r1, #8
 800609e:	4802      	ldr	r0, [pc, #8]	; (80060a8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80060a0:	f7ff fe7e 	bl	8005da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80060a4:	bf00      	nop
}
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	58000c00 	.word	0x58000c00

080060ac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <UTIL_LPM_Init+0x1c>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <UTIL_LPM_Init+0x20>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000b1c 	.word	0x20000b1c
 80060cc:	20000b20 	.word	0x20000b20

080060d0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060dc:	f3ef 8310 	mrs	r3, PRIMASK
 80060e0:	613b      	str	r3, [r7, #16]
  return(result);
 80060e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80060e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80060e6:	b672      	cpsid	i
}
 80060e8:	bf00      	nop
  
  switch(state)
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <UTIL_LPM_SetOffMode+0x32>
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10e      	bne.n	8006112 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80060f4:	4b0d      	ldr	r3, [pc, #52]	; (800612c <UTIL_LPM_SetOffMode+0x5c>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	4a0b      	ldr	r2, [pc, #44]	; (800612c <UTIL_LPM_SetOffMode+0x5c>)
 80060fe:	6013      	str	r3, [r2, #0]
      break;
 8006100:	e008      	b.n	8006114 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	43da      	mvns	r2, r3
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <UTIL_LPM_SetOffMode+0x5c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4013      	ands	r3, r2
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <UTIL_LPM_SetOffMode+0x5c>)
 800610e:	6013      	str	r3, [r2, #0]
      break;
 8006110:	e000      	b.n	8006114 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006112:	bf00      	nop
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006120:	bf00      	nop
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20000b20 	.word	0x20000b20

08006130 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b090      	sub	sp, #64	; 0x40
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006138:	4b73      	ldr	r3, [pc, #460]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800613e:	4b72      	ldr	r3, [pc, #456]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4013      	ands	r3, r2
 8006146:	4a70      	ldr	r2, [pc, #448]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 8006148:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800614a:	4b70      	ldr	r3, [pc, #448]	; (800630c <UTIL_SEQ_Run+0x1dc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006150:	4b6f      	ldr	r3, [pc, #444]	; (8006310 <UTIL_SEQ_Run+0x1e0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006156:	4b6f      	ldr	r3, [pc, #444]	; (8006314 <UTIL_SEQ_Run+0x1e4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800615c:	4b6e      	ldr	r3, [pc, #440]	; (8006318 <UTIL_SEQ_Run+0x1e8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006162:	e08d      	b.n	8006280 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006168:	e002      	b.n	8006170 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616c:	3301      	adds	r3, #1
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006170:	4a6a      	ldr	r2, [pc, #424]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	401a      	ands	r2, r3
 800617c:	4b62      	ldr	r3, [pc, #392]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f1      	beq.n	800616a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	401a      	ands	r2, r3
 8006192:	4b5d      	ldr	r3, [pc, #372]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4013      	ands	r3, r2
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800619a:	4a60      	ldr	r2, [pc, #384]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 800619c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	4013      	ands	r3, r2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80061ac:	4a5b      	ldr	r2, [pc, #364]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80061ba:	4a58      	ldr	r2, [pc, #352]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	4013      	ands	r3, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f9b3 	bl	8006534 <SEQ_BitPosition>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b53      	ldr	r3, [pc, #332]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 80061d4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80061d6:	4a51      	ldr	r2, [pc, #324]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 80061d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b4f      	ldr	r3, [pc, #316]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2101      	movs	r1, #1
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	401a      	ands	r2, r3
 80061ee:	494b      	ldr	r1, [pc, #300]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 80061f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f8:	f3ef 8310 	mrs	r3, PRIMASK
 80061fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80061fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006202:	b672      	cpsid	i
}
 8006204:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006206:	4b46      	ldr	r3, [pc, #280]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43da      	mvns	r2, r3
 8006212:	4b3e      	ldr	r3, [pc, #248]	; (800630c <UTIL_SEQ_Run+0x1dc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4013      	ands	r3, r2
 8006218:	4a3c      	ldr	r2, [pc, #240]	; (800630c <UTIL_SEQ_Run+0x1dc>)
 800621a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800621c:	2302      	movs	r3, #2
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006220:	e013      	b.n	800624a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006224:	3b01      	subs	r3, #1
 8006226:	4a3d      	ldr	r2, [pc, #244]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 8006228:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800622c:	4b3c      	ldr	r3, [pc, #240]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2201      	movs	r2, #1
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43da      	mvns	r2, r3
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623a:	3b01      	subs	r3, #1
 800623c:	400a      	ands	r2, r1
 800623e:	4937      	ldr	r1, [pc, #220]	; (800631c <UTIL_SEQ_Run+0x1ec>)
 8006240:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006246:	3b01      	subs	r3, #1
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e8      	bne.n	8006222 <UTIL_SEQ_Run+0xf2>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800625c:	4b30      	ldr	r3, [pc, #192]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <UTIL_SEQ_Run+0x1f4>)
 8006262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006266:	4798      	blx	r3

    local_taskset = TaskSet;
 8006268:	4b28      	ldr	r3, [pc, #160]	; (800630c <UTIL_SEQ_Run+0x1dc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800626e:	4b28      	ldr	r3, [pc, #160]	; (8006310 <UTIL_SEQ_Run+0x1e0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <UTIL_SEQ_Run+0x1e4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800627a:	4b27      	ldr	r3, [pc, #156]	; (8006318 <UTIL_SEQ_Run+0x1e8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	401a      	ands	r2, r3
 8006286:	4b20      	ldr	r3, [pc, #128]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <UTIL_SEQ_Run+0x16c>
 8006290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	f43f af64 	beq.w	8006164 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <UTIL_SEQ_Run+0x1f0>)
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80062a4:	f000 f938 	bl	8006518 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ac:	613b      	str	r3, [r7, #16]
  return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80062b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80062b2:	b672      	cpsid	i
}
 80062b4:	bf00      	nop
  local_taskset = TaskSet;
 80062b6:	4b15      	ldr	r3, [pc, #84]	; (800630c <UTIL_SEQ_Run+0x1dc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80062bc:	4b14      	ldr	r3, [pc, #80]	; (8006310 <UTIL_SEQ_Run+0x1e0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <UTIL_SEQ_Run+0x1e4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80062c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	401a      	ands	r2, r3
 80062ce:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d107      	bne.n	80062e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <UTIL_SEQ_Run+0x1e8>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	4013      	ands	r3, r2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80062e4:	f7fa fa57 	bl	8000796 <UTIL_SEQ_Idle>
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f383 8810 	msr	PRIMASK, r3
}
 80062f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80062f4:	f000 f917 	bl	8006526 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80062f8:	4a03      	ldr	r2, [pc, #12]	; (8006308 <UTIL_SEQ_Run+0x1d8>)
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	6013      	str	r3, [r2, #0]

  return;
 80062fe:	bf00      	nop
}
 8006300:	3740      	adds	r7, #64	; 0x40
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000024 	.word	0x20000024
 800630c:	20000b24 	.word	0x20000b24
 8006310:	20000b28 	.word	0x20000b28
 8006314:	20000020 	.word	0x20000020
 8006318:	20000b2c 	.word	0x20000b2c
 800631c:	20000bb4 	.word	0x20000bb4
 8006320:	20000b30 	.word	0x20000b30
 8006324:	20000b34 	.word	0x20000b34

08006328 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006334:	f3ef 8310 	mrs	r3, PRIMASK
 8006338:	617b      	str	r3, [r7, #20]
  return(result);
 800633a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800633c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800633e:	b672      	cpsid	i
}
 8006340:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f8f6 	bl	8006534 <SEQ_BitPosition>
 8006348:	4603      	mov	r3, r0
 800634a:	4619      	mov	r1, r3
 800634c:	4a06      	ldr	r2, [pc, #24]	; (8006368 <UTIL_SEQ_RegTask+0x40>)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006360:	bf00      	nop
}
 8006362:	3720      	adds	r7, #32
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000b34 	.word	0x20000b34

0800636c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	60fb      	str	r3, [r7, #12]
  return(result);
 800637c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800637e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006380:	b672      	cpsid	i
}
 8006382:	bf00      	nop

  TaskSet |= TaskId_bm;
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <UTIL_SEQ_SetTask+0x50>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4313      	orrs	r3, r2
 800638c:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <UTIL_SEQ_SetTask+0x50>)
 800638e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006390:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <UTIL_SEQ_SetTask+0x54>)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	431a      	orrs	r2, r3
 800639c:	4908      	ldr	r1, [pc, #32]	; (80063c0 <UTIL_SEQ_SetTask+0x54>)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f383 8810 	msr	PRIMASK, r3
}
 80063ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80063b0:	bf00      	nop
}
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000b24 	.word	0x20000b24
 80063c0:	20000bb4 	.word	0x20000bb4

080063c4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063cc:	f3ef 8310 	mrs	r3, PRIMASK
 80063d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80063d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063d6:	b672      	cpsid	i
}
 80063d8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	43da      	mvns	r2, r3
 80063de:	4b08      	ldr	r3, [pc, #32]	; (8006400 <UTIL_SEQ_PauseTask+0x3c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4013      	ands	r3, r2
 80063e4:	4a06      	ldr	r2, [pc, #24]	; (8006400 <UTIL_SEQ_PauseTask+0x3c>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80063f4:	bf00      	nop
}
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000020 	.word	0x20000020

08006404 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640c:	f3ef 8310 	mrs	r3, PRIMASK
 8006410:	60fb      	str	r3, [r7, #12]
  return(result);
 8006412:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006416:	b672      	cpsid	i
}
 8006418:	bf00      	nop

  TaskMask |= TaskId_bm;
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <UTIL_SEQ_ResumeTask+0x3c>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4313      	orrs	r3, r2
 8006422:	4a07      	ldr	r2, [pc, #28]	; (8006440 <UTIL_SEQ_ResumeTask+0x3c>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f383 8810 	msr	PRIMASK, r3
}
 8006430:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006432:	bf00      	nop
}
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000020 	.word	0x20000020

08006444 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644c:	f3ef 8310 	mrs	r3, PRIMASK
 8006450:	60fb      	str	r3, [r7, #12]
  return(result);
 8006452:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006454:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006456:	b672      	cpsid	i
}
 8006458:	bf00      	nop

  EvtSet |= EvtId_bm;
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <UTIL_SEQ_SetEvt+0x3c>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4313      	orrs	r3, r2
 8006462:	4a07      	ldr	r2, [pc, #28]	; (8006480 <UTIL_SEQ_SetEvt+0x3c>)
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006472:	bf00      	nop
}
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000b28 	.word	0x20000b28

08006484 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800648c:	4b1f      	ldr	r3, [pc, #124]	; (800650c <UTIL_SEQ_WaitEvt+0x88>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006492:	4b1e      	ldr	r3, [pc, #120]	; (800650c <UTIL_SEQ_WaitEvt+0x88>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649a:	d102      	bne.n	80064a2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800649c:	2300      	movs	r3, #0
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e005      	b.n	80064ae <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <UTIL_SEQ_WaitEvt+0x88>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2201      	movs	r2, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80064ae:	4b18      	ldr	r3, [pc, #96]	; (8006510 <UTIL_SEQ_WaitEvt+0x8c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <UTIL_SEQ_WaitEvt+0x8c>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80064ba:	e003      	b.n	80064c4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	69f8      	ldr	r0, [r7, #28]
 80064c0:	f7fa f970 	bl	80007a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80064c4:	4b13      	ldr	r3, [pc, #76]	; (8006514 <UTIL_SEQ_WaitEvt+0x90>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f5      	beq.n	80064bc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <UTIL_SEQ_WaitEvt+0x88>)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d6:	f3ef 8310 	mrs	r3, PRIMASK
 80064da:	60bb      	str	r3, [r7, #8]
  return(result);
 80064dc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80064de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80064e0:	b672      	cpsid	i
}
 80064e2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	43da      	mvns	r2, r3
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <UTIL_SEQ_WaitEvt+0x90>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4013      	ands	r3, r2
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <UTIL_SEQ_WaitEvt+0x90>)
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <UTIL_SEQ_WaitEvt+0x8c>)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6013      	str	r3, [r2, #0]
  return;
 8006504:	bf00      	nop
}
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000b30 	.word	0x20000b30
 8006510:	20000b2c 	.word	0x20000b2c
 8006514:	20000b28 	.word	0x20000b28

08006518 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800651c:	bf00      	nop
}
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006526:	b480      	push	{r7}
 8006528:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800652a:	bf00      	nop
}
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	0c1b      	lsrs	r3, r3, #16
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <SEQ_BitPosition+0x24>
 800654e:	2310      	movs	r3, #16
 8006550:	73fb      	strb	r3, [r7, #15]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <SEQ_BitPosition+0x3a>
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	3308      	adds	r3, #8
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <SEQ_BitPosition+0x50>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	3304      	adds	r3, #4
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	0f1b      	lsrs	r3, r3, #28
 8006588:	4a07      	ldr	r2, [pc, #28]	; (80065a8 <SEQ_BitPosition+0x74>)
 800658a:	5cd2      	ldrb	r2, [r2, r3]
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	4413      	add	r3, r2
 8006590:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	f1c3 031f 	rsb	r3, r3, #31
 8006598:	b2db      	uxtb	r3, r3
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	080068a0 	.word	0x080068a0

080065ac <memset>:
 80065ac:	4402      	add	r2, r0
 80065ae:	4603      	mov	r3, r0
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d100      	bne.n	80065b6 <memset+0xa>
 80065b4:	4770      	bx	lr
 80065b6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ba:	e7f9      	b.n	80065b0 <memset+0x4>

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4d0d      	ldr	r5, [pc, #52]	; (80065f4 <__libc_init_array+0x38>)
 80065c0:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c2:	1b64      	subs	r4, r4, r5
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	2600      	movs	r6, #0
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	4d0b      	ldr	r5, [pc, #44]	; (80065fc <__libc_init_array+0x40>)
 80065ce:	4c0c      	ldr	r4, [pc, #48]	; (8006600 <__libc_init_array+0x44>)
 80065d0:	f000 f826 	bl	8006620 <_init>
 80065d4:	1b64      	subs	r4, r4, r5
 80065d6:	10a4      	asrs	r4, r4, #2
 80065d8:	2600      	movs	r6, #0
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	080068b0 	.word	0x080068b0
 80065f8:	080068b0 	.word	0x080068b0
 80065fc:	080068b0 	.word	0x080068b0
 8006600:	080068b4 	.word	0x080068b4

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661a:	4291      	cmp	r1, r2
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
