
iota_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000008  080073b0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  20000028  080073d0  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000060  08007405  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000002d4  20000074  08007416  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000348  08007416  00020348  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 13 .MB_MEM2      00000883  200301e4  08007416  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022317  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004e6a  00000000  00000000  00042df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002258  00000000  00000000  00047c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a08  00000000  00000000  00049eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299d3  00000000  00000000  0004b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023260  00000000  00000000  00075293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000efd78  00000000  00000000  000984f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008dd4  00000000  00000000  0018826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00191040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08007118 	.word	0x08007118

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08007118 	.word	0x08007118

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fd79 	bl	8005ca0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 f80a 	bl	80051ca <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007130 	.word	0x08007130

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetDeviceID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <LL_DBGMCU_GetRevisionID+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	0c1b      	lsrs	r3, r3, #16
 8000366:	b29b      	uxth	r3, r3
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e0042000 	.word	0xe0042000

08000378 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	041b      	lsls	r3, r3, #16
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	605a      	str	r2, [r3, #4]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	605a      	str	r2, [r3, #4]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	431a      	orrs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	615a      	str	r2, [r3, #20]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	615a      	str	r2, [r3, #20]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	619a      	str	r2, [r3, #24]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	22ca      	movs	r2, #202	; 0xca
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2253      	movs	r2, #83	; 0x53
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f023 0207 	bic.w	r2, r3, #7
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <MX_APPE_Config+0x18>)
 80004a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004a6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80004a8:	f000 f824 	bl	80004f4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004ac:	f000 f864 	bl	8000578 <Config_HSE>

  return;
 80004b0:	bf00      	nop
}
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	58004000 	.word	0x58004000

080004b8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80004bc:	f000 f870 	bl	80005a0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004c0:	f000 f888 	bl	80005d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c4:	4903      	ldr	r1, [pc, #12]	; (80004d4 <MX_APPE_Init+0x1c>)
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 fdb0 	bl	800102c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004cc:	f000 f890 	bl	80005f0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80004d0:	bf00      	nop
}
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000016c 	.word	0x2000016c

080004d8 <Init_Smps>:

void Init_Smps(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80004dc:	bf00      	nop
}
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <Init_Exti>:

void Init_Exti(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80004ea:	2050      	movs	r0, #80	; 0x50
 80004ec:	f7ff fe80 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004f0:	bf00      	nop
}
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80004f8:	f000 f804 	bl	8000504 <Reset_BackupDomain>

  Reset_IPCC();
 80004fc:	f000 f81a 	bl	8000534 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000500:	bf00      	nop
}
 8000502:	bd80      	pop	{r7, pc}

08000504 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000508:	f7ff feda 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00d      	beq.n	800052e <Reset_BackupDomain+0x2a>
 8000512:	f7ff fee8 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d108      	bne.n	800052e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800051c:	f001 fce8 	bl	8001ef0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000520:	f001 fce6 	bl	8001ef0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000524:	f7ff feaa 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000528:	f7ff feb9 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800052c:	bf00      	nop
 800052e:	bf00      	nop
}
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000538:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800053c:	f7ff fee6 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <Reset_IPCC+0x40>)
 8000544:	f7ff ff5e 	bl	8000404 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <Reset_IPCC+0x40>)
 800054c:	f7ff ff68 	bl	8000420 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000550:	213f      	movs	r1, #63	; 0x3f
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <Reset_IPCC+0x40>)
 8000554:	f7ff ff10 	bl	8000378 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000558:	213f      	movs	r1, #63	; 0x3f
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <Reset_IPCC+0x40>)
 800055c:	f7ff ff2f 	bl	80003be <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000560:	213f      	movs	r1, #63	; 0x3f
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <Reset_IPCC+0x40>)
 8000564:	f7ff ff1a 	bl	800039c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000568:	213f      	movs	r1, #63	; 0x3f
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <Reset_IPCC+0x40>)
 800056c:	f7ff ff39 	bl	80003e2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000570:	bf00      	nop
}
 8000572:	bd80      	pop	{r7, pc}
 8000574:	58000c00 	.word	0x58000c00

08000578 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f005 fc1a 	bl	8005db8 <OTP_Read>
 8000584:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe41 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000596:	bf00      	nop
 8000598:	bf00      	nop
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <System_Init>:

static void System_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  Init_Smps();
 80005a4:	f7ff ff98 	bl	80004d8 <Init_Smps>

  Init_Exti();
 80005a8:	f7ff ff9d 	bl	80004e6 <Init_Exti>

  Init_Rtc();
 80005ac:	f000 f802 	bl	80005b4 <Init_Rtc>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <Init_Rtc+0x1c>)
 80005ba:	f7ff ff4c 	bl	8000456 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005be:	2100      	movs	r1, #0
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Init_Rtc+0x1c>)
 80005c2:	f7ff ff58 	bl	8000476 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <Init_Rtc+0x1c>)
 80005c8:	f7ff ff38 	bl	800043c <LL_RTC_EnableWriteProtection>

  return;
 80005cc:	bf00      	nop
}
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40002800 	.word	0x40002800

080005d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f7ff fe3a 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005e0:	f006 fae0 	bl	8006ba4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff fded 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80005ea:	bf00      	nop
}
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80005f6:	f005 f99d 	bl	8005934 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <appe_Tl_Init+0x50>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	2004      	movs	r0, #4
 8000600:	f006 fc0e 	bl	8006e20 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <appe_Tl_Init+0x54>)
 8000606:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <appe_Tl_Init+0x58>)
 800060a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <appe_Tl_Init+0x5c>)
 8000612:	f005 f851 	bl	80056b8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <appe_Tl_Init+0x60>)
 8000618:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <appe_Tl_Init+0x64>)
 800061c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <appe_Tl_Init+0x68>)
 8000620:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000622:	f240 533c 	movw	r3, #1340	; 0x53c
 8000626:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fac3 	bl	8005bb8 <TL_MM_Init>

  TL_Enable();
 8000632:	f005 f979 	bl	8005928 <TL_Enable>

  return;
 8000636:	bf00      	nop
}
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	080056f1 	.word	0x080056f1
 8000644:	20030734 	.word	0x20030734
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000675 	.word	0x08000675
 8000650:	2003094c 	.word	0x2003094c
 8000654:	20030840 	.word	0x20030840
 8000658:	200301f8 	.word	0x200301f8

0800065c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000666:	bf00      	nop
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	330b      	adds	r3, #11
 8000682:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800068e:	2b07      	cmp	r3, #7
 8000690:	d81f      	bhi.n	80006d2 <APPE_SysUserEvtRx+0x5e>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <APPE_SysUserEvtRx+0x24>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006cb 	.word	0x080006cb
 80006a0:	080006d3 	.word	0x080006d3
 80006a4:	080006d3 	.word	0x080006d3
 80006a8:	080006d3 	.word	0x080006d3
 80006ac:	080006d3 	.word	0x080006d3
 80006b0:	080006d3 	.word	0x080006d3
 80006b4:	080006d3 	.word	0x080006d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fdb1 	bl	8005224 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f81b 	bl	80006fe <APPE_SysEvtReadyProcessing>
    break;
 80006c8:	e004      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f806 	bl	80006dc <APPE_SysEvtError>
    break;
 80006d0:	e000      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80006d2:	bf00      	nop
  }

  return;
 80006d4:	bf00      	nop
}
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	330b      	adds	r3, #11
 80006ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3302      	adds	r3, #2
 80006f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006f2:	bf00      	nop
}
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b08a      	sub	sp, #40	; 0x28
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	330b      	adds	r3, #11
 8000722:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	3302      	adds	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11d      	bne.n	800076e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000732:	f7ff fd2b 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000736:	230f      	movs	r3, #15
 8000738:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800073a:	237f      	movs	r3, #127	; 0x7f
 800073c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800073e:	f7ff fe0d 	bl	800035c <LL_DBGMCU_GetRevisionID>
 8000742:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	b29b      	uxth	r3, r3
 8000748:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800074a:	f7ff fdf9 	bl	8000340 <LL_DBGMCU_GetDeviceID>
 800074e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	b29b      	uxth	r3, r3
 8000754:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fd4c 	bl	80051f8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000760:	f005 fc34 	bl	8005fcc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000764:	2100      	movs	r1, #0
 8000766:	2001      	movs	r0, #1
 8000768:	f006 fa2e 	bl	8006bc8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800076c:	e007      	b.n	800077e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
  return;
 800077c:	bf00      	nop
 800077e:	bf00      	nop
}
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
 800078e:	f006 fa4b 	bl	8006c28 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}

08000796 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800079a:	bf00      	nop
}
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f006 fa39 	bl	8006c28 <UTIL_SEQ_Run>
  return;
 80007b6:	bf00      	nop
}
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2004      	movs	r0, #4
 80007ca:	f006 fb4b 	bl	8006e64 <UTIL_SEQ_SetTask>
  return;
 80007ce:	bf00      	nop
}
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007de:	2002      	movs	r0, #2
 80007e0:	f006 fbac 	bl	8006f3c <UTIL_SEQ_SetEvt>
  return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f006 fbc1 	bl	8006f7c <UTIL_SEQ_WaitEvt>
  return;
 80007fa:	bf00      	nop
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <LL_EXTI_EnableIT_0_31>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 800080e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	58000800 	.word	0x58000800

0800082c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4313      	orrs	r3, r2
 800083e:	600b      	str	r3, [r1, #0]

}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	58000800 	.word	0x58000800

08000850 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <ReadRtcSsrValue+0x3c>)
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	b29b      	uxth	r3, r3
 800085c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <ReadRtcSsrValue+0x3c>)
 8000860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000862:	b29b      	uxth	r3, r3
 8000864:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000866:	e005      	b.n	8000874 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <ReadRtcSsrValue+0x3c>)
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	b29b      	uxth	r3, r3
 8000872:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d1f5      	bne.n	8000868 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800087c:	683b      	ldr	r3, [r7, #0]
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40002800 	.word	0x40002800

08000890 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	491d      	ldr	r1, [pc, #116]	; (8000918 <LinkTimerAfter+0x88>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	3315      	adds	r3, #21
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d009      	beq.n	80008ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	4916      	ldr	r1, [pc, #88]	; (8000918 <LinkTimerAfter+0x88>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3314      	adds	r3, #20
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	4911      	ldr	r1, [pc, #68]	; (8000918 <LinkTimerAfter+0x88>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3315      	adds	r3, #21
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <LinkTimerAfter+0x88>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	440b      	add	r3, r1
 80008f0:	3314      	adds	r3, #20
 80008f2:	79ba      	ldrb	r2, [r7, #6]
 80008f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LinkTimerAfter+0x88>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	440b      	add	r3, r1
 8000904:	3315      	adds	r3, #21
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	701a      	strb	r2, [r3, #0]

  return;
 800090a:	bf00      	nop
}
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000090 	.word	0x20000090

0800091c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800092c:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <LinkTimerBefore+0xb8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	429a      	cmp	r2, r3
 8000936:	d032      	beq.n	800099e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	4927      	ldr	r1, [pc, #156]	; (80009d8 <LinkTimerBefore+0xbc>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3314      	adds	r3, #20
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	4922      	ldr	r1, [pc, #136]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3315      	adds	r3, #21
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	491d      	ldr	r1, [pc, #116]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4918      	ldr	r1, [pc, #96]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	3314      	adds	r3, #20
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000988:	79ba      	ldrb	r2, [r7, #6]
 800098a:	4913      	ldr	r1, [pc, #76]	; (80009d8 <LinkTimerBefore+0xbc>)
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	3314      	adds	r3, #20
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800099c:	e014      	b.n	80009c8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LinkTimerBefore+0xbc>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	3315      	adds	r3, #21
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009b2:	79ba      	ldrb	r2, [r7, #6]
 80009b4:	4908      	ldr	r1, [pc, #32]	; (80009d8 <LinkTimerBefore+0xbc>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3314      	adds	r3, #20
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	701a      	strb	r2, [r3, #0]
  return;
 80009c6:	bf00      	nop
}
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000120 	.word	0x20000120
 80009d8:	20000090 	.word	0x20000090

080009dc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009e6:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <linkTimer+0x144>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d118      	bne.n	8000a22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <linkTimer+0x144>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b4b      	ldr	r3, [pc, #300]	; (8000b24 <linkTimer+0x148>)
 80009f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <linkTimer+0x144>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	4949      	ldr	r1, [pc, #292]	; (8000b28 <linkTimer+0x14c>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	2206      	movs	r2, #6
 8000a12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <linkTimer+0x150>)
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81fb      	strh	r3, [r7, #14]
 8000a20:	e078      	b.n	8000b14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a22:	f000 f909 	bl	8000c38 <ReturnTimeElapsed>
 8000a26:	4603      	mov	r3, r0
 8000a28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	493e      	ldr	r1, [pc, #248]	; (8000b28 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	4419      	add	r1, r3
 8000a42:	4839      	ldr	r0, [pc, #228]	; (8000b28 <linkTimer+0x14c>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4403      	add	r3, r0
 8000a4e:	3308      	adds	r3, #8
 8000a50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4934      	ldr	r1, [pc, #208]	; (8000b28 <linkTimer+0x14c>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	3308      	adds	r3, #8
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <linkTimer+0x144>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <linkTimer+0x14c>)
 8000a70:	460b      	mov	r3, r1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	440b      	add	r3, r1
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d337      	bcc.n	8000af4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <linkTimer+0x144>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a8a:	7b7a      	ldrb	r2, [r7, #13]
 8000a8c:	4926      	ldr	r1, [pc, #152]	; (8000b28 <linkTimer+0x14c>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	3315      	adds	r3, #21
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a9e:	e013      	b.n	8000ac8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000aa0:	7b7a      	ldrb	r2, [r7, #13]
 8000aa2:	4921      	ldr	r1, [pc, #132]	; (8000b28 <linkTimer+0x14c>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	3315      	adds	r3, #21
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ab4:	7b7a      	ldrb	r2, [r7, #13]
 8000ab6:	491c      	ldr	r1, [pc, #112]	; (8000b28 <linkTimer+0x14c>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3315      	adds	r3, #21
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d00b      	beq.n	8000ae6 <linkTimer+0x10a>
 8000ace:	7b3a      	ldrb	r2, [r7, #12]
 8000ad0:	4915      	ldr	r1, [pc, #84]	; (8000b28 <linkTimer+0x14c>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	3308      	adds	r3, #8
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d2dc      	bcs.n	8000aa0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fecf 	bl	8000890 <LinkTimerAfter>
 8000af2:	e00f      	b.n	8000b14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <linkTimer+0x144>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff0c 	bl	800091c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <linkTimer+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <linkTimer+0x148>)
 8000b0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <linkTimer+0x144>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b14:	89fb      	ldrh	r3, [r7, #14]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000120 	.word	0x20000120
 8000b24:	20000121 	.word	0x20000121
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	20000124 	.word	0x20000124

08000b30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b40:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d111      	bne.n	8000b70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b4c:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <UnlinkTimer+0xfc>)
 8000b54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	4935      	ldr	r1, [pc, #212]	; (8000c30 <UnlinkTimer+0x100>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e03e      	b.n	8000bee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <UnlinkTimer+0x100>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3314      	adds	r3, #20
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	492a      	ldr	r1, [pc, #168]	; (8000c30 <UnlinkTimer+0x100>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b98:	79f9      	ldrb	r1, [r7, #7]
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	4824      	ldr	r0, [pc, #144]	; (8000c30 <UnlinkTimer+0x100>)
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	440b      	add	r3, r1
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4403      	add	r3, r0
 8000ba8:	3315      	adds	r3, #21
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	4920      	ldr	r1, [pc, #128]	; (8000c30 <UnlinkTimer+0x100>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	440b      	add	r3, r1
 8000bba:	3315      	adds	r3, #21
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d013      	beq.n	8000bee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000bc6:	79f9      	ldrb	r1, [r7, #7]
 8000bc8:	7bba      	ldrb	r2, [r7, #14]
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <UnlinkTimer+0x100>)
 8000bcc:	460b      	mov	r3, r1
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	440b      	add	r3, r1
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4403      	add	r3, r0
 8000bd6:	3314      	adds	r3, #20
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2d8      	uxtb	r0, r3
 8000bdc:	4914      	ldr	r1, [pc, #80]	; (8000c30 <UnlinkTimer+0x100>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	3314      	adds	r3, #20
 8000bea:	4602      	mov	r2, r0
 8000bec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	490f      	ldr	r1, [pc, #60]	; (8000c30 <UnlinkTimer+0x100>)
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	330c      	adds	r3, #12
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <UnlinkTimer+0xf8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d107      	bne.n	8000c1c <UnlinkTimer+0xec>
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <UnlinkTimer+0x104>)
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
}
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	20000121 	.word	0x20000121
 8000c30:	20000090 	.word	0x20000090
 8000c34:	20000124 	.word	0x20000124

08000c38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c46:	d026      	beq.n	8000c96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c48:	f7ff fe02 	bl	8000850 <ReadRtcSsrValue>
 8000c4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d805      	bhi.n	8000c64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e00a      	b.n	8000c7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <ReturnTimeElapsed+0x74>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <ReturnTimeElapsed+0x78>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <ReturnTimeElapsed+0x7c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	e001      	b.n	8000c9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29b      	uxth	r3, r3
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000124 	.word	0x20000124
 8000cac:	2000012c 	.word	0x2000012c
 8000cb0:	2000012a 	.word	0x2000012a
 8000cb4:	20000129 	.word	0x20000129

08000cb8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d108      	bne.n	8000cda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cc8:	f7ff fdc2 	bl	8000850 <ReadRtcSsrValue>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <RestartWakeupCounter+0x9c>)
 8000cd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f001 f845 	bl	8001d62 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cd8:	e039      	b.n	8000d4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d803      	bhi.n	8000ce8 <RestartWakeupCounter+0x30>
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <RestartWakeupCounter+0xa0>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d002      	beq.n	8000cee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000cee:	bf00      	nop
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <RestartWakeupCounter+0xa8>)
 8000d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f001 f830 	bl	8001d7e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <RestartWakeupCounter+0xac>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	88fa      	ldrh	r2, [r7, #6]
 8000d28:	490e      	ldr	r1, [pc, #56]	; (8000d64 <RestartWakeupCounter+0xac>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d2e:	f7ff fd8f 	bl	8000850 <ReadRtcSsrValue>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <RestartWakeupCounter+0x9c>)
 8000d36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d48:	f3af 8000 	nop.w
  return ;
 8000d4c:	bf00      	nop
}
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000124 	.word	0x20000124
 8000d58:	20000129 	.word	0x20000129
 8000d5c:	2000016c 	.word	0x2000016c
 8000d60:	58000800 	.word	0x58000800
 8000d64:	40002800 	.word	0x40002800

08000d68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <RescheduleTimerList+0x11c>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7a:	d107      	bne.n	8000d8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000d7c:	bf00      	nop
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f8      	bne.n	8000d7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <RescheduleTimerList+0x124>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	493a      	ldr	r1, [pc, #232]	; (8000e90 <RescheduleTimerList+0x128>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3308      	adds	r3, #8
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000db6:	f7ff ff3f 	bl	8000c38 <ReturnTimeElapsed>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d205      	bcs.n	8000dd2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e04d      	b.n	8000e6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <RescheduleTimerList+0x130>)
 8000dd6:	8812      	ldrh	r2, [r2, #0]
 8000dd8:	b292      	uxth	r2, r2
 8000dda:	4413      	add	r3, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d906      	bls.n	8000df2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <RescheduleTimerList+0x130>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e03d      	b.n	8000e6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e02:	e034      	b.n	8000e6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	4922      	ldr	r1, [pc, #136]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3308      	adds	r3, #8
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d20a      	bcs.n	8000e32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	491c      	ldr	r1, [pc, #112]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e013      	b.n	8000e5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	4916      	ldr	r1, [pc, #88]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3308      	adds	r3, #8
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4403      	add	r3, r0
 8000e56:	3308      	adds	r3, #8
 8000e58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3315      	adds	r3, #21
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b06      	cmp	r3, #6
 8000e72:	d1c7      	bne.n	8000e04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e74:	89bb      	ldrh	r3, [r7, #12]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff1e 	bl	8000cb8 <RestartWakeupCounter>

  return ;
 8000e7c:	bf00      	nop
}
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40002800 	.word	0x40002800
 8000e88:	2000016c 	.word	0x2000016c
 8000e8c:	20000120 	.word	0x20000120
 8000e90:	20000090 	.word	0x20000090
 8000e94:	20000128 	.word	0x20000128
 8000e98:	2000012e 	.word	0x2000012e

08000e9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8000ea8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000eb0:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	22ca      	movs	r2, #202	; 0xca
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb8:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2253      	movs	r2, #83	; 0x53
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ece:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ed0:	4b52      	ldr	r3, [pc, #328]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ed8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000edc:	4950      	ldr	r1, [pc, #320]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	330c      	adds	r3, #12
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d16e      	bne.n	8000fd0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ef2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ef6:	494a      	ldr	r1, [pc, #296]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f0a:	4945      	ldr	r1, [pc, #276]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3310      	adds	r3, #16
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d04c      	beq.n	8000fc0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f2a:	493d      	ldr	r1, [pc, #244]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	440b      	add	r3, r1
 8000f36:	330d      	adds	r3, #13
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d124      	bne.n	8000f8a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fdf2 	bl	8000b30 <UnlinkTimer>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f383 8810 	msr	PRIMASK, r3
}
 8000f56:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f5c:	4930      	ldr	r1, [pc, #192]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3304      	adds	r3, #4
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f9b8 	bl	80012e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	22ca      	movs	r2, #202	; 0xca
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2253      	movs	r2, #83	; 0x53
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
 8000f88:	e012      	b.n	8000fb0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f383 8810 	msr	PRIMASK, r3
}
 8000f94:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f920 	bl	80011e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	22ca      	movs	r2, #202	; 0xca
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2253      	movs	r2, #83	; 0x53
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	69b8      	ldr	r0, [r7, #24]
 8000fba:	f000 fa1b 	bl	80013f4 <HW_TS_RTC_Int_AppNot>
 8000fbe:	e022      	b.n	8001006 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000fc0:	f7ff fed2 	bl	8000d68 <RescheduleTimerList>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f383 8810 	msr	PRIMASK, r3
}
 8000fce:	e01a      	b.n	8001006 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000fd0:	bf00      	nop
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f8      	beq.n	8000fd2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ff4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f383 8810 	msr	PRIMASK, r3
}
 8001004:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800100e:	bf00      	nop
}
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000016c 	.word	0x2000016c
 800101c:	20000120 	.word	0x20000120
 8001020:	20000090 	.word	0x20000090
 8001024:	20000128 	.word	0x20000128
 8001028:	58000800 	.word	0x58000800

0800102c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <HW_TS_Init+0x188>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	22ca      	movs	r2, #202	; 0xca
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <HW_TS_Init+0x188>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2253      	movs	r2, #83	; 0x53
 8001046:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001048:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HW_TS_Init+0x18c>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a5a      	ldr	r2, [pc, #360]	; (80011b8 <HW_TS_Init+0x18c>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HW_TS_Init+0x18c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f1c3 0304 	rsb	r3, r3, #4
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <HW_TS_Init+0x190>)
 8001068:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800106a:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HW_TS_Init+0x18c>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001072:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001076:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	2a00      	cmp	r2, #0
 8001088:	d101      	bne.n	800108e <HW_TS_Init+0x62>
  {
    return 32U;
 800108a:	2220      	movs	r2, #32
 800108c:	e003      	b.n	8001096 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	40d3      	lsrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HW_TS_Init+0x194>)
 80010a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <HW_TS_Init+0x18c>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HW_TS_Init+0x198>)
 80010b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HW_TS_Init+0x198>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <HW_TS_Init+0x194>)
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HW_TS_Init+0x190>)
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	40d3      	lsrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d904      	bls.n	80010e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HW_TS_Init+0x19c>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	e003      	b.n	80010ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HW_TS_Init+0x19c>)
 80010ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010f0:	f7ff fb9c 	bl	800082c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010f8:	f7ff fb84 	bl	8000804 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d13d      	bne.n	800117e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HW_TS_Init+0x1a0>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HW_TS_Init+0x1a4>)
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e00c      	b.n	8001130 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001116:	7ffa      	ldrb	r2, [r7, #31]
 8001118:	492e      	ldr	r1, [pc, #184]	; (80011d4 <HW_TS_Init+0x1a8>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	330c      	adds	r3, #12
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	3301      	adds	r3, #1
 800112e:	77fb      	strb	r3, [r7, #31]
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d9ef      	bls.n	8001116 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HW_TS_Init+0x1ac>)
 8001138:	2206      	movs	r2, #6
 800113a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HW_TS_Init+0x188>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HW_TS_Init+0x188>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HW_TS_Init+0x188>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HW_TS_Init+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800115c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HW_TS_Init+0x1b0>)
 8001160:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001164:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001166:	2003      	movs	r0, #3
 8001168:	f000 fe09 	bl	8001d7e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HW_TS_Init+0x188>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HW_TS_Init+0x188>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e009      	b.n	8001192 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HW_TS_Init+0x188>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fde8 	bl	8001d62 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HW_TS_Init+0x188>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800119a:	2200      	movs	r2, #0
 800119c:	2103      	movs	r1, #3
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 fd9d 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fdb4 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  return;
 80011aa:	bf00      	nop
}
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000016c 	.word	0x2000016c
 80011b8:	40002800 	.word	0x40002800
 80011bc:	20000129 	.word	0x20000129
 80011c0:	2000012a 	.word	0x2000012a
 80011c4:	2000012c 	.word	0x2000012c
 80011c8:	2000012e 	.word	0x2000012e
 80011cc:	20000128 	.word	0x20000128
 80011d0:	20000124 	.word	0x20000124
 80011d4:	20000090 	.word	0x20000090
 80011d8:	20000120 	.word	0x20000120
 80011dc:	58000800 	.word	0x58000800

080011e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ea:	f3ef 8310 	mrs	r3, PRIMASK
 80011ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80011f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fd98 	bl	8001d2e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	22ca      	movs	r2, #202	; 0xca
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2253      	movs	r2, #83	; 0x53
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	4930      	ldr	r1, [pc, #192]	; (80012d4 <HW_TS_Stop+0xf4>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	330c      	adds	r3, #12
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d142      	bne.n	80012ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fc80 	bl	8000b30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HW_TS_Stop+0xf8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b06      	cmp	r3, #6
 800123a:	d12f      	bne.n	800129c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HW_TS_Stop+0xfc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d107      	bne.n	800125a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800124a:	bf00      	nop
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HW_TS_Stop+0xf0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f8      	bne.n	800124c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HW_TS_Stop+0xf0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001268:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800126a:	bf00      	nop
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HW_TS_Stop+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f8      	beq.n	800126c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HW_TS_Stop+0xf0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800128a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HW_TS_Stop+0x100>)
 800128e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001292:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001294:	2003      	movs	r0, #3
 8001296:	f000 fd72 	bl	8001d7e <HAL_NVIC_ClearPendingIRQ>
 800129a:	e007      	b.n	80012ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HW_TS_Stop+0x104>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	7cfa      	ldrb	r2, [r7, #19]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80012a8:	f7ff fd5e 	bl	8000d68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HW_TS_Stop+0xf0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fd2c 	bl	8001d12 <HAL_NVIC_EnableIRQ>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f383 8810 	msr	PRIMASK, r3
}
 80012c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012c6:	bf00      	nop
}
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000016c 	.word	0x2000016c
 80012d4:	20000090 	.word	0x20000090
 80012d8:	20000120 	.word	0x20000120
 80012dc:	40002800 	.word	0x40002800
 80012e0:	58000800 	.word	0x58000800
 80012e4:	20000121 	.word	0x20000121

080012e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	493b      	ldr	r1, [pc, #236]	; (80013e4 <HW_TS_Start+0xfc>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	330c      	adds	r3, #12
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d103      	bne.n	8001314 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff66 	bl	80011e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001314:	f3ef 8310 	mrs	r3, PRIMASK
 8001318:	60fb      	str	r3, [r7, #12]
  return(result);
 800131a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800131c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800131e:	b672      	cpsid	i
}
 8001320:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001322:	2003      	movs	r0, #3
 8001324:	f000 fd03 	bl	8001d2e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HW_TS_Start+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	22ca      	movs	r2, #202	; 0xca
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HW_TS_Start+0x100>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2253      	movs	r2, #83	; 0x53
 8001336:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	492a      	ldr	r1, [pc, #168]	; (80013e4 <HW_TS_Start+0xfc>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	330c      	adds	r3, #12
 8001348:	2202      	movs	r2, #2
 800134a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4925      	ldr	r1, [pc, #148]	; (80013e4 <HW_TS_Start+0xfc>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3308      	adds	r3, #8
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	4920      	ldr	r1, [pc, #128]	; (80013e4 <HW_TS_Start+0xfc>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fb30 	bl	80009dc <linkTimer>
 800137c:	4603      	mov	r3, r0
 800137e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HW_TS_Start+0x104>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HW_TS_Start+0x108>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	7c7a      	ldrb	r2, [r7, #17]
 800138e:	429a      	cmp	r2, r3
 8001390:	d002      	beq.n	8001398 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001392:	f7ff fce9 	bl	8000d68 <RescheduleTimerList>
 8001396:	e013      	b.n	80013c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	4912      	ldr	r1, [pc, #72]	; (80013e4 <HW_TS_Start+0xfc>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3308      	adds	r3, #8
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	8a7b      	ldrh	r3, [r7, #18]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	1ac9      	subs	r1, r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <HW_TS_Start+0xfc>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4403      	add	r3, r0
 80013bc:	3308      	adds	r3, #8
 80013be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HW_TS_Start+0x100>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 fca2 	bl	8001d12 <HAL_NVIC_EnableIRQ>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f383 8810 	msr	PRIMASK, r3
}
 80013d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013da:	bf00      	nop
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000090 	.word	0x20000090
 80013e8:	2000016c 	.word	0x2000016c
 80013ec:	20000120 	.word	0x20000120
 80013f0:	20000121 	.word	0x20000121

080013f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	460b      	mov	r3, r1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4798      	blx	r3

  return;
 8001406:	bf00      	nop
}
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LL_RCC_LSE_SetDriveCapability>:
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141e:	f023 0218 	bic.w	r2, r3, #24
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_AHB2_GRP1_EnableClock>:
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4313      	orrs	r3, r2
 8001450:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fa74 	bl	800195c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001474:	f7ff f812 	bl	800049c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f812 	bl	80014a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800147c:	f000 f872 	bl	8001564 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001480:	f000 f890 	bl	80015a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 f8e4 	bl	8001650 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 8001488:	f000 f8a0 	bl	80015cc <MX_MEMORYMAP_Init>
  MX_RTC_Init();
 800148c:	f000 f8ac 	bl	80015e8 <MX_RTC_Init>
  MX_RF_Init();
 8001490:	f000 f8a3 	bl	80015da <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001494:	f7ff f810 	bl	80004b8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001498:	f7ff f975 	bl	8000786 <MX_APPE_Process>
 800149c:	e7fc      	b.n	8001498 <main+0x2c>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2248      	movs	r2, #72	; 0x48
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fdf8 	bl	80070a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014c6:	f000 fd13 	bl	8001ef0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80014ca:	2010      	movs	r0, #16
 80014cc:	f7ff ff9f 	bl	800140e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SystemClock_Config+0xc0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <SystemClock_Config+0xc0>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <SystemClock_Config+0xc0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80014ec:	2327      	movs	r3, #39	; 0x27
 80014ee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2340      	movs	r3, #64	; 0x40
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f865 	bl	80025e8 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001524:	f000 f89b 	bl	800165e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001528:	236f      	movs	r3, #111	; 0x6f
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fbc1 	bl	8002cd0 <HAL_RCC_ClockConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001554:	f000 f883 	bl	800165e <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3768      	adds	r7, #104	; 0x68
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58000400 	.word	0x58000400

08001564 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156a:	463b      	mov	r3, r7
 800156c:	2250      	movs	r2, #80	; 0x50
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fd97 	bl	80070a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001576:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800157a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800157c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001582:	2300      	movs	r3, #0
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001586:	2310      	movs	r3, #16
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4618      	mov	r0, r3
 800158e:	f001 ffb0 	bl	80034f2 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001598:	f000 f861 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	; 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_IPCC_Init+0x20>)
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <MX_IPCC_Init+0x24>)
 80015ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_IPCC_Init+0x20>)
 80015b0:	f000 fc18 	bl	8001de4 <HAL_IPCC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015ba:	f000 f850 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000130 	.word	0x20000130
 80015c8:	58000c00 	.word	0x58000c00

080015cc <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_RTC_Init+0x60>)
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_RTC_Init+0x64>)
 80015f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_RTC_Init+0x60>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_RTC_Init+0x60>)
 80015fa:	220f      	movs	r2, #15
 80015fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_RTC_Init+0x60>)
 8001600:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001604:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_RTC_Init+0x60>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_RTC_Init+0x60>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_RTC_Init+0x60>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_RTC_Init+0x60>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <MX_RTC_Init+0x60>)
 8001620:	f002 f9ee 	bl	8003a00 <HAL_RTC_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800162a:	f000 f818 	bl	800165e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_RTC_Init+0x60>)
 8001634:	f002 fae4 	bl	8003c00 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 f80e 	bl	800165e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000016c 	.word	0x2000016c
 800164c:	40002800 	.word	0x40002800

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	2004      	movs	r0, #4
 8001656:	f7ff fef0 	bl	800143a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}

0800165e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001662:	b672      	cpsid	i
}
 8001664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001666:	e7fe      	b.n	8001666 <Error_Handler+0x8>

08001668 <LL_RCC_EnableRTC>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_AHB3_GRP1_EnableClock>:
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4313      	orrs	r3, r2
 80016a0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80016f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016f6:	f7ff ffc8 	bl	800168a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	202e      	movs	r0, #46	; 0x2e
 8001700:	f000 faed 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001704:	202e      	movs	r0, #46	; 0x2e
 8001706:	f000 fb04 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_IPCC_MspInit+0x44>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d113      	bne.n	800174a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001722:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001726:	f7ff ffb0 	bl	800168a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	202c      	movs	r0, #44	; 0x2c
 8001730:	f000 fad5 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001734:	202c      	movs	r0, #44	; 0x2c
 8001736:	f000 faec 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	202d      	movs	r0, #45	; 0x2d
 8001740:	f000 facd 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001744:	202d      	movs	r0, #45	; 0x2d
 8001746:	f000 fae4 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	58000c00 	.word	0x58000c00

08001758 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b096      	sub	sp, #88	; 0x58
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2250      	movs	r2, #80	; 0x50
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fc9b 	bl	80070a4 <memset>
  if(hrtc->Instance==RTC)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <HAL_RTC_MspInit+0x64>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d11d      	bne.n	80017b4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800177c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f001 feb2 	bl	80034f2 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001794:	f7ff ff63 	bl	800165e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001798:	f7ff ff66 	bl	8001668 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800179c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017a0:	f7ff ff8c 	bl	80016bc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 fa98 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 faaf 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3758      	adds	r7, #88	; 0x58
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f900 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001818:	f7ff fb40 	bl	8000e9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001824:	f005 f880 	bl	8006928 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001830:	f005 f8b0 	bl	8006994 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800183c:	f000 faae 	bl	8001d9c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <SystemInit+0x98>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <SystemInit+0x98>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001870:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <SystemInit+0x9c>)
 800187e:	4013      	ands	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188e:	f023 0305 	bic.w	r3, r3, #5
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <SystemInit+0xa0>)
 80018b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <SystemInit+0xa0>)
 80018b8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00
 80018e0:	faf6fefb 	.word	0xfaf6fefb
 80018e4:	22041000 	.word	0x22041000

080018e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ec:	3304      	adds	r3, #4

080018ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018f2:	d3f9      	bcc.n	80018e8 <CopyDataInit>
  bx lr
 80018f4:	4770      	bx	lr

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018f8:	3004      	adds	r0, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>
  bx lr
 80018fe:	4770      	bx	lr

08001900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001904:	f7ff ff9e 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopForever+0x6>)
 800190a:	490c      	ldr	r1, [pc, #48]	; (800193c <LoopForever+0xa>)
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <LoopForever+0xe>)
 800190e:	2300      	movs	r3, #0
 8001910:	f7ff ffed 	bl	80018ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <LoopForever+0x12>)
 8001916:	490c      	ldr	r1, [pc, #48]	; (8001948 <LoopForever+0x16>)
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <LoopForever+0x1a>)
 800191a:	2300      	movs	r3, #0
 800191c:	f7ff ffe7 	bl	80018ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <LoopForever+0x1e>)
 8001922:	490c      	ldr	r1, [pc, #48]	; (8001954 <LoopForever+0x22>)
 8001924:	2300      	movs	r3, #0
 8001926:	f7ff ffe8 	bl	80018fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800192a:	f005 fbc3 	bl	80070b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800192e:	f7ff fd9d 	bl	800146c <main>

08001932 <LoopForever>:

LoopForever:
  b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   r0, =_estack
 8001934:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001938:	20000008 	.word	0x20000008
 800193c:	20000028 	.word	0x20000028
 8001940:	080073b0 	.word	0x080073b0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001944:	200301e4 	.word	0x200301e4
 8001948:	20030a67 	.word	0x20030a67
 800194c:	08007416 	.word	0x08007416
  INIT_BSS _sbss, _ebss
 8001950:	20000074 	.word	0x20000074
 8001954:	20000348 	.word	0x20000348

08001958 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_Init+0x3c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_Init+0x3c>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 f9a8 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001978:	200f      	movs	r0, #15
 800197a:	f000 f80f 	bl	800199c <HAL_InitTick>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	e001      	b.n	800198e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198a:	f7ff feb0 	bl	80016ee <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198e:	79fb      	ldrb	r3, [r7, #7]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	58004000 	.word	0x58004000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_InitTick+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d024      	beq.n	80019fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b0:	f001 fb3a 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_InitTick+0x6c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9be 	bl	8001d4a <HAL_SYSTICK_Config>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	d809      	bhi.n	80019ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019da:	2200      	movs	r2, #0
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	f000 f97c 	bl	8001cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_InitTick+0x70>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e007      	b.n	80019fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e004      	b.n	80019fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	2000000c 	.word	0x2000000c

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010
 8001a34:	20000190 	.word	0x20000190

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000190 	.word	0x20000190

08001a50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTickPrio+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db12      	blt.n	8001b40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	490a      	ldr	r1, [pc, #40]	; (8001b4c <__NVIC_DisableIRQ+0x44>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	3320      	adds	r3, #32
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b34:	f3bf 8f4f 	dsb	sy
}
 8001b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b3a:	f3bf 8f6f 	isb	sy
}
 8001b3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0c      	blt.n	8001b7c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_SetPendingIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	3340      	adds	r3, #64	; 0x40
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0c      	blt.n	8001bb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_ClearPendingIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fec9 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff fee0 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fed3 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fee3 	bl	8001b08 <__NVIC_DisableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff96 	bl	8001c84 <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff feed 	bl	8001b50 <__NVIC_SetPendingIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fefd 	bl	8001b8c <__NVIC_ClearPendingIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_HSEM_IRQHandler+0x30>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_HSEM_IRQHandler+0x30>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_HSEM_IRQHandler+0x30>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_HSEM_IRQHandler+0x30>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f807 	bl	8001dd0 <HAL_HSEM_FreeCallback>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58001500 	.word	0x58001500

08001dd0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01e      	beq.n	8001e34 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_IPCC_Init+0x60>)
 8001df8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fc82 	bl	8001710 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f000 f85b 	bl	8001ec8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f82c 	bl	8001e7c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001e32:	e001      	b.n	8001e38 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58000c00 	.word	0x58000c00

08001e48 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e00f      	b.n	8001eaa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <IPCC_SetDefaultCallbacks+0x44>)
 8001e94:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <IPCC_SetDefaultCallbacks+0x48>)
 8001ea2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d9ec      	bls.n	8001e8a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	08001e49 	.word	0x08001e49
 8001ec4:	08001e63 	.word	0x08001e63

08001ec8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001edc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223f      	movs	r2, #63	; 0x3f
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	58000400 	.word	0x58000400

08001f10 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	58000400 	.word	0x58000400

08001f2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3e:	d101      	bne.n	8001f44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_HSE_Enable>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_HSE_Disable>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_HSE_IsReady>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f9e:	d101      	bne.n	8001fa4 <LL_RCC_HSE_IsReady+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_RCC_HSE_IsReady+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_HSI_Enable>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_HSI_Disable>:
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_HSI_IsReady>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffe:	d101      	bne.n	8002004 <LL_RCC_HSI_IsReady+0x18>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <LL_RCC_HSI_IsReady+0x1a>
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_HSI48_Enable>:
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_HSI48_Disable>:
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_RCC_HSI48_IsReady>:
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d101      	bne.n	8002096 <LL_RCC_HSI48_IsReady+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_RCC_HSI48_IsReady+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_RCC_LSE_Enable>:
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_LSE_Disable>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_LSE_EnableBypass>:
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_LSE_DisableBypass>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_RCC_LSE_IsReady>:
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d101      	bne.n	8002142 <LL_RCC_LSE_IsReady+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_RCC_LSE_IsReady+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_LSI1_Enable>:
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_RCC_LSI1_Disable>:
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_RCC_LSI1_IsReady>:
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d101      	bne.n	80021aa <LL_RCC_LSI1_IsReady+0x18>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_RCC_LSI1_IsReady+0x1a>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_LSI2_Enable>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_RCC_LSI2_Disable>:
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_LSI2_IsReady>:
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b08      	cmp	r3, #8
 800220c:	d101      	bne.n	8002212 <LL_RCC_LSI2_IsReady+0x18>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_RCC_LSI2_IsReady+0x1a>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_LSI2_SetTrimming>:
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_RCC_MSI_Enable>:
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_RCC_MSI_Disable>:
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_MSI_IsReady>:
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <LL_RCC_MSI_IsReady+0x16>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_RCC_MSI_IsReady+0x18>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_MSI_SetRange>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_MSI_GetRange>:
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2bb0      	cmp	r3, #176	; 0xb0
 80022e8:	d901      	bls.n	80022ee <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80022ea:	23b0      	movs	r3, #176	; 0xb0
 80022ec:	607b      	str	r3, [r7, #4]
  return msiRange;
 80022ee:	687b      	ldr	r3, [r7, #4]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_MSI_SetCalibTrimming>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_RCC_SetSysClkSource>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 0203 	bic.w	r2, r3, #3
 8002338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_RCC_GetSysClkSource>:
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_RCC_SetAHBPrescaler>:
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_C2_RCC_SetAHBPrescaler>:
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800239e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_RCC_SetAHB4Prescaler>:
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_RCC_SetAPB1Prescaler>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_RCC_SetAPB2Prescaler>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_RCC_GetAHBPrescaler>:
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_RCC_GetAHB4Prescaler>:
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_PLL_Enable>:
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_RCC_PLL_Disable>:
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_RCC_PLL_IsReady>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ba:	d101      	bne.n	80024c0 <LL_RCC_PLL_IsReady+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_RCC_PLL_IsReady+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_RCC_PLL_GetN>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_RCC_PLL_GetR>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_PLL_GetDivider>:
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_GetMainSource>:
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_IsActiveFlag_HPRE>:
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d101      	bne.n	8002546 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002566:	d101      	bne.n	800256c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d101      	bne.n	8002592 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d101      	bne.n	80025b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025d4:	d101      	bne.n	80025da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b08d      	sub	sp, #52	; 0x34
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e363      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 808d 	beq.w	8002722 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002608:	f7ff fea1 	bl	800234e <LL_RCC_GetSysClkSource>
 800260c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260e:	f7ff ff82 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002612:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x3e>
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d147      	bne.n	80026b0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	2b01      	cmp	r3, #1
 8002624:	d144      	bne.n	80026b0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e347      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002636:	f7ff fe4c 	bl	80022d2 <LL_RCC_MSI_GetRange>
 800263a:	4603      	mov	r3, r0
 800263c:	429c      	cmp	r4, r3
 800263e:	d914      	bls.n	800266a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fd03 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e336      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fe26 	bl	80022aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fe4a 	bl	80022fc <LL_RCC_MSI_SetCalibTrimming>
 8002668:	e013      	b.n	8002692 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fe1b 	bl	80022aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fe3f 	bl	80022fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fce4 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e317      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002692:	f000 fcc9 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8002696:	4603      	mov	r3, r0
 8002698:	4aa4      	ldr	r2, [pc, #656]	; (800292c <HAL_RCC_OscConfig+0x344>)
 800269a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800269c:	4ba4      	ldr	r3, [pc, #656]	; (8002930 <HAL_RCC_OscConfig+0x348>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f97b 	bl	800199c <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d039      	beq.n	8002720 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e308      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01e      	beq.n	80026f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b8:	f7ff fdc8 	bl	800224c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f9bc 	bl	8001a38 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c4:	f7ff f9b8 	bl	8001a38 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e2f5      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026d6:	f7ff fdd7 	bl	8002288 <LL_RCC_MSI_IsReady>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f1      	beq.n	80026c4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fde0 	bl	80022aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe04 	bl	80022fc <LL_RCC_MSI_SetCalibTrimming>
 80026f4:	e015      	b.n	8002722 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f6:	f7ff fdb8 	bl	800226a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026fa:	f7ff f99d 	bl	8001a38 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002702:	f7ff f999 	bl	8001a38 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e2d6      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002714:	f7ff fdb8 	bl	8002288 <LL_RCC_MSI_IsReady>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f1      	bne.n	8002702 <HAL_RCC_OscConfig+0x11a>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002720:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d047      	beq.n	80027be <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272e:	f7ff fe0e 	bl	800234e <LL_RCC_GetSysClkSource>
 8002732:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002734:	f7ff feef 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002738:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x164>
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d108      	bne.n	8002758 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d134      	bne.n	80027be <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2b4      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d102      	bne.n	8002768 <HAL_RCC_OscConfig+0x180>
 8002762:	f7ff fbf5 	bl	8001f50 <LL_RCC_HSE_Enable>
 8002766:	e001      	b.n	800276c <HAL_RCC_OscConfig+0x184>
 8002768:	f7ff fc01 	bl	8001f6e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7ff f960 	bl	8001a38 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff f95c 	bl	8001a38 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e299      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800278e:	f7ff fbfd 	bl	8001f8c <LL_RCC_HSE_IsReady>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f1      	beq.n	800277c <HAL_RCC_OscConfig+0x194>
 8002798:	e011      	b.n	80027be <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7ff f94d 	bl	8001a38 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a2:	f7ff f949 	bl	8001a38 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e286      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027b4:	f7ff fbea 	bl	8001f8c <LL_RCC_HSE_IsReady>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f1      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04c      	beq.n	8002864 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	f7ff fdc0 	bl	800234e <LL_RCC_GetSysClkSource>
 80027ce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	f7ff fea1 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 80027d4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d10e      	bne.n	8002800 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e266      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fc09 	bl	8002010 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027fe:	e031      	b.n	8002864 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d019      	beq.n	800283c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002808:	f7ff fbd2 	bl	8001fb0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7ff f914 	bl	8001a38 <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002814:	f7ff f910 	bl	8001a38 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e24d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002826:	f7ff fbe1 	bl	8001fec <LL_RCC_HSI_IsReady>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f1      	beq.n	8002814 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fbeb 	bl	8002010 <LL_RCC_HSI_SetCalibTrimming>
 800283a:	e013      	b.n	8002864 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283c:	f7ff fbc7 	bl	8001fce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff f8fa 	bl	8001a38 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff f8f6 	bl	8001a38 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e233      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800285a:	f7ff fbc7 	bl	8001fec <LL_RCC_HSI_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f1      	bne.n	8002848 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a3 	beq.w	80029c4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d076      	beq.n	8002974 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d046      	beq.n	8002920 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002892:	f7ff fc7e 	bl	8002192 <LL_RCC_LSI1_IsReady>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d113      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800289c:	f7ff fc57 	bl	800214e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a0:	f7ff f8ca 	bl	8001a38 <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028a8:	f7ff f8c6 	bl	8001a38 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e203      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028ba:	f7ff fc6a 	bl	8002192 <LL_RCC_LSI1_IsReady>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f1      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80028c4:	f7ff fc77 	bl	80021b6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f8b6 	bl	8001a38 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028d0:	f7ff f8b2 	bl	8001a38 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1ef      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028e2:	f7ff fc8a 	bl	80021fa <LL_RCC_LSI2_IsReady>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f1      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fc94 	bl	800221e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80028f6:	f7ff fc3b 	bl	8002170 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff f89d 	bl	8001a38 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002902:	f7ff f899 	bl	8001a38 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1d6      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002914:	f7ff fc3d 	bl	8002192 <LL_RCC_LSI1_IsReady>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f1      	bne.n	8002902 <HAL_RCC_OscConfig+0x31a>
 800291e:	e051      	b.n	80029c4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002920:	f7ff fc15 	bl	800214e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f888 	bl	8001a38 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800292a:	e00c      	b.n	8002946 <HAL_RCC_OscConfig+0x35e>
 800292c:	20000008 	.word	0x20000008
 8002930:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002934:	f7ff f880 	bl	8001a38 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1bd      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002946:	f7ff fc24 	bl	8002192 <LL_RCC_LSI1_IsReady>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f1      	beq.n	8002934 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002950:	f7ff fc42 	bl	80021d8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002956:	f7ff f86f 	bl	8001a38 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1ac      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002968:	f7ff fc47 	bl	80021fa <LL_RCC_LSI2_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f1      	bne.n	8002956 <HAL_RCC_OscConfig+0x36e>
 8002972:	e027      	b.n	80029c4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002974:	f7ff fc30 	bl	80021d8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7ff f85e 	bl	8001a38 <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002980:	f7ff f85a 	bl	8001a38 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b03      	cmp	r3, #3
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e197      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002992:	f7ff fc32 	bl	80021fa <LL_RCC_LSI2_IsReady>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f1      	bne.n	8002980 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800299c:	f7ff fbe8 	bl	8002170 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7ff f84a 	bl	8001a38 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029a8:	f7ff f846 	bl	8001a38 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e183      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029ba:	f7ff fbea 	bl	8002192 <LL_RCC_LSI1_IsReady>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f1      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	4ba7      	ldr	r3, [pc, #668]	; (8002c70 <HAL_RCC_OscConfig+0x688>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d114      	bne.n	8002a06 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029dc:	f7ff fa88 	bl	8001ef0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e0:	f7ff f82a 	bl	8001a38 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7ff f826 	bl	8001a38 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e163      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b9d      	ldr	r3, [pc, #628]	; (8002c70 <HAL_RCC_OscConfig+0x688>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x42c>
 8002a0e:	f7ff fb48 	bl	80020a2 <LL_RCC_LSE_Enable>
 8002a12:	e00c      	b.n	8002a2e <HAL_RCC_OscConfig+0x446>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d104      	bne.n	8002a26 <HAL_RCC_OscConfig+0x43e>
 8002a1c:	f7ff fb63 	bl	80020e6 <LL_RCC_LSE_EnableBypass>
 8002a20:	f7ff fb3f 	bl	80020a2 <LL_RCC_LSE_Enable>
 8002a24:	e003      	b.n	8002a2e <HAL_RCC_OscConfig+0x446>
 8002a26:	f7ff fb4d 	bl	80020c4 <LL_RCC_LSE_Disable>
 8002a2a:	f7ff fb6d 	bl	8002108 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d014      	beq.n	8002a60 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe ffff 	bl	8001a38 <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fffb 	bl	8001a38 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e136      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a54:	f7ff fb69 	bl	800212a <LL_RCC_LSE_IsReady>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0ef      	beq.n	8002a3e <HAL_RCC_OscConfig+0x456>
 8002a5e:	e013      	b.n	8002a88 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe ffea 	bl	8001a38 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fe ffe6 	bl	8001a38 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e121      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a7e:	f7ff fb54 	bl	800212a <LL_RCC_LSE_IsReady>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ef      	bne.n	8002a68 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02c      	beq.n	8002aee <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d014      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9c:	f7ff facd 	bl	800203a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe ffca 	bl	8001a38 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa8:	f7fe ffc6 	bl	8001a38 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e103      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002aba:	f7ff fae0 	bl	800207e <LL_RCC_HSI48_IsReady>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f1      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
 8002ac4:	e013      	b.n	8002aee <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac6:	f7ff fac9 	bl	800205c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe ffb5 	bl	8001a38 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ad2:	f7fe ffb1 	bl	8001a38 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0ee      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ae4:	f7ff facb 	bl	800207e <LL_RCC_HSI48_IsReady>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f1      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80e4 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af8:	f7ff fc29 	bl	800234e <LL_RCC_GetSysClkSource>
 8002afc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f040 80b4 	bne.w	8002c78 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d123      	bne.n	8002b66 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d11c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d114      	bne.n	8002b66 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d10d      	bne.n	8002b66 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d05d      	beq.n	8002c22 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d058      	beq.n	8002c1e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0a1      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b7e:	f7ff fc84 	bl	800248a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b82:	f7fe ff59 	bl	8001a38 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe ff55 	bl	8001a38 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e092      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ef      	bne.n	8002b8a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x68c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc2:	0212      	lsls	r2, r2, #8
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002be0:	f7ff fc44 	bl	800246c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf4:	f7fe ff20 	bl	8001a38 <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe ff1c 	bl	8001a38 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e059      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1c:	e050      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e04f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d147      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c30:	f7ff fc1c 	bl	800246c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c44:	f7fe fef8 	bl	8001a38 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fef4 	bl	8001a38 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e031      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ef      	beq.n	8002c4c <HAL_RCC_OscConfig+0x664>
 8002c6c:	e028      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6d8>
 8002c6e:	bf00      	nop
 8002c70:	58000400 	.word	0x58000400
 8002c74:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d01e      	beq.n	8002cbc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	f7ff fc04 	bl	800248a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fed9 	bl	8001a38 <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fed5 	bl	8001a38 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e012      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ef      	bne.n	8002c8a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_OscConfig+0x6e4>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60cb      	str	r3, [r1, #12]
 8002cba:	e001      	b.n	8002cc0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3734      	adds	r7, #52	; 0x34
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	eefefffc 	.word	0xeefefffc

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e12d      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d91b      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b95      	ldr	r3, [pc, #596]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4993      	ldr	r1, [pc, #588]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d02:	f7fe fe99 	bl	8001a38 <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d0a:	f7fe fe95 	bl	8001a38 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e111      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d1ef      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fb13 	bl	8002366 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fe7a 	bl	8001a38 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d48:	f7fe fe76 	bl	8001a38 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0f2      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d5a:	f7ff fbe8 	bl	800252e <LL_RCC_IsActiveFlag_HPRE>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f1      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb0a 	bl	800238e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe fe5d 	bl	8001a38 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d82:	f7fe fe59 	bl	8001a38 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0d5      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d94:	f7ff fbdd 	bl	8002552 <LL_RCC_IsActiveFlag_C2HPRE>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f1      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb03 	bl	80023ba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fe40 	bl	8001a38 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dbc:	f7fe fe3c 	bl	8001a38 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0b8      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dce:	f7ff fbd3 	bl	8002578 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f1      	beq.n	8002dbc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fafd 	bl	80023e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dee:	f7fe fe23 	bl	8001a38 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002df6:	f7fe fe1f 	bl	8001a38 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e09b      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e08:	f7ff fbc9 	bl	800259e <LL_RCC_IsActiveFlag_PPRE1>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f1      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff faf3 	bl	8002410 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fe05 	bl	8001a38 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e32:	f7fe fe01 	bl	8001a38 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e07d      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e44:	f7ff fbbd 	bl	80025c2 <LL_RCC_IsActiveFlag_PPRE2>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f1      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d043      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e62:	f7ff f893 	bl	8001f8c <LL_RCC_HSE_IsReady>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11e      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e067      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e78:	f7ff fb16 	bl	80024a8 <LL_RCC_PLL_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e05c      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e8e:	f7ff f9fb 	bl	8002288 <LL_RCC_MSI_IsReady>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e051      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e9c:	f7ff f8a6 	bl	8001fec <LL_RCC_HSI_IsReady>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e04a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fa39 	bl	8002326 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fdc0 	bl	8001a38 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe fdbc 	bl	8001a38 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e036      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	f7ff fa3c 	bl	800234e <LL_RCC_GetSysClkSource>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d1ec      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d21b      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 0207 	bic.w	r2, r3, #7
 8002ef8:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fe fd9a 	bl	8001a38 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f08:	f7fe fd96 	bl	8001a38 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e012      	b.n	8002f40 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x278>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d1ef      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f28:	f000 f87e 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_RCC_ClockConfig+0x27c>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f32:	f7fe fd8d 	bl	8001a50 <HAL_GetTickPrio>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe fd2f 	bl	800199c <HAL_InitTick>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	58004000 	.word	0x58004000
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f56:	f7ff f9fa 	bl	800234e <LL_RCC_GetSysClkSource>
 8002f5a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f62:	f7ff f9b6 	bl	80022d2 <LL_RCC_MSI_GetRange>
 8002f66:	4603      	mov	r3, r0
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e04b      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d102      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e045      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d10a      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f8a:	f7fe ffcf 	bl	8001f2c <LL_RCC_HSE_IsEnabledDiv2>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f94:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e03a      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e037      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002fa0:	f7ff fab9 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002fa4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x64>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x6a>
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fb6:	60bb      	str	r3, [r7, #8]
        break;
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fba:	f7fe ffb7 	bl	8001f2c <LL_RCC_HSE_IsEnabledDiv2>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fc6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002fc8:	e00d      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fcc:	60bb      	str	r3, [r7, #8]
        break;
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fd0:	f7ff f97f 	bl	80022d2 <LL_RCC_MSI_GetRange>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	60bb      	str	r3, [r7, #8]
        break;
 8002fe4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002fe6:	f7ff fa71 	bl	80024cc <LL_RCC_PLL_GetN>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	fb03 f402 	mul.w	r4, r3, r2
 8002ff2:	f7ff fa84 	bl	80024fe <LL_RCC_PLL_GetDivider>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	fbb4 f4f3 	udiv	r4, r4, r3
 8003000:	f7ff fa71 	bl	80024e6 <LL_RCC_PLL_GetR>
 8003004:	4603      	mov	r3, r0
 8003006:	0f5b      	lsrs	r3, r3, #29
 8003008:	3301      	adds	r3, #1
 800300a:	fbb4 f3f3 	udiv	r3, r4, r3
 800300e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003010:	68fb      	ldr	r3, [r7, #12]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	08007330 	.word	0x08007330
 8003020:	00f42400 	.word	0x00f42400
 8003024:	01e84800 	.word	0x01e84800

08003028 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b598      	push	{r3, r4, r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800302c:	f7ff ff90 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8003030:	4604      	mov	r4, r0
 8003032:	f7ff fa01 	bl	8002438 <LL_RCC_GetAHBPrescaler>
 8003036:	4603      	mov	r3, r0
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a03      	ldr	r2, [pc, #12]	; (800304c <HAL_RCC_GetHCLKFreq+0x24>)
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd98      	pop	{r3, r4, r7, pc}
 800304c:	080072f0 	.word	0x080072f0

08003050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2bb0      	cmp	r3, #176	; 0xb0
 800305c:	d903      	bls.n	8003066 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e007      	b.n	8003076 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003074:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003076:	f7ff f9eb 	bl	8002450 <LL_RCC_GetAHB4Prescaler>
 800307a:	4603      	mov	r3, r0
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9c      	lsrs	r4, r3, #18
 800309a:	f7fe ff39 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
 800309e:	4603      	mov	r3, r0
 80030a0:	4619      	mov	r1, r3
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 f80c 	bl	80030c0 <RCC_SetFlashLatency>
 80030a8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	08007330 	.word	0x08007330
 80030b8:	080072f0 	.word	0x080072f0
 80030bc:	431bde83 	.word	0x431bde83

080030c0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b093      	sub	sp, #76	; 0x4c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80030ca:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <RCC_SetFlashLatency+0xe8>)
 80030cc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80030d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80030d6:	4a35      	ldr	r2, [pc, #212]	; (80031ac <RCC_SetFlashLatency+0xec>)
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <RCC_SetFlashLatency+0xf0>)
 80030e4:	f107 040c 	add.w	r4, r7, #12
 80030e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030ee:	2300      	movs	r3, #0
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d11a      	bne.n	8003130 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
 80030fe:	e013      	b.n	8003128 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3348      	adds	r3, #72	; 0x48
 8003106:	443b      	add	r3, r7
 8003108:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d807      	bhi.n	8003122 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3348      	adds	r3, #72	; 0x48
 8003118:	443b      	add	r3, r7
 800311a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003120:	e020      	b.n	8003164 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003124:	3301      	adds	r3, #1
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312a:	2b03      	cmp	r3, #3
 800312c:	d9e8      	bls.n	8003100 <RCC_SetFlashLatency+0x40>
 800312e:	e019      	b.n	8003164 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	e013      	b.n	800315e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	3348      	adds	r3, #72	; 0x48
 800313c:	443b      	add	r3, r7
 800313e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d807      	bhi.n	8003158 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	3348      	adds	r3, #72	; 0x48
 800314e:	443b      	add	r3, r7
 8003150:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003156:	e005      	b.n	8003164 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315a:	3301      	adds	r3, #1
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	2b02      	cmp	r3, #2
 8003162:	d9e8      	bls.n	8003136 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <RCC_SetFlashLatency+0xf4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 0207 	bic.w	r2, r3, #7
 800316c:	4911      	ldr	r1, [pc, #68]	; (80031b4 <RCC_SetFlashLatency+0xf4>)
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003174:	f7fe fc60 	bl	8001a38 <HAL_GetTick>
 8003178:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800317a:	e008      	b.n	800318e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800317c:	f7fe fc5c 	bl	8001a38 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e007      	b.n	800319e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <RCC_SetFlashLatency+0xf4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	429a      	cmp	r2, r3
 800319a:	d1ef      	bne.n	800317c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	374c      	adds	r7, #76	; 0x4c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0800714c 	.word	0x0800714c
 80031ac:	0800715c 	.word	0x0800715c
 80031b0:	08007168 	.word	0x08007168
 80031b4:	58004000 	.word	0x58004000

080031b8 <LL_RCC_LSE_IsEnabled>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <LL_RCC_LSE_IsEnabled+0x18>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_RCC_LSE_IsReady>:
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d101      	bne.n	80031f4 <LL_RCC_LSE_IsReady+0x18>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <LL_RCC_LSE_IsReady+0x1a>
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_SetRFWKPClockSource>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_RCC_SetSMPSClockSource>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_RCC_SetSMPSPrescaler>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_RCC_SetUSARTClockSource>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f023 0203 	bic.w	r2, r3, #3
 8003290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_RCC_SetLPUARTClockSource>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_RCC_SetI2CClockSource>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_SetLPTIMClockSource>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_RCC_SetSAIClockSource>:
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_RCC_SetRNGClockSource>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_RCC_SetCLK48ClockSource>:
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_SetUSBClockSource>:
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffe3 	bl	800339a <LL_RCC_SetCLK48ClockSource>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <LL_RCC_SetADCClockSource>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80033e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_RCC_SetRTCClockSource>:
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_RCC_GetRTCClockSource>:
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_RCC_ForceBackupDomainReset>:
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_PLLSAI1_Enable>:
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a4:	6013      	str	r3, [r2, #0]
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_RCC_PLLSAI1_Disable>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_RCC_PLLSAI1_IsReady>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e0:	d101      	bne.n	80034e6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80034fa:	2300      	movs	r3, #0
 80034fc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80034fe:	2300      	movs	r3, #0
 8003500:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d034      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003516:	d021      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800351c:	d81b      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800351e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003522:	d01d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003528:	d815      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d110      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003544:	e00d      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f947 	bl	80037de <RCCEx_PLLSAI1_ConfigNP>
 8003550:	4603      	mov	r3, r0
 8003552:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003554:	e005      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	77fb      	strb	r3, [r7, #31]
        break;
 800355a:	e002      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fee8 	bl	8003342 <LL_RCC_SetSAIClockSource>
 8003572:	e001      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7ffb      	ldrb	r3, [r7, #31]
 8003576:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	2b00      	cmp	r3, #0
 8003582:	d046      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003584:	f7ff ff56 	bl	8003434 <LL_RCC_GetRTCClockSource>
 8003588:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d03c      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003594:	f7fe fcac 	bl	8001ef0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff30 	bl	8003408 <LL_RCC_SetRTCClockSource>
 80035a8:	e02e      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80035b4:	f7ff ff4b 	bl	800344e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80035b8:	f7ff ff5a 	bl	8003470 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80035ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80035d4:	f7ff fdf0 	bl	80031b8 <LL_RCC_LSE_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d114      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035de:	f7fe fa2b 	bl	8001a38 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80035e4:	e00b      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fe fa27 	bl	8001a38 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d902      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	77fb      	strb	r3, [r7, #31]
              break;
 80035fc:	e004      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80035fe:	f7ff fded 	bl	80031dc <LL_RCC_LSE_IsReady>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d1ee      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003608:	7ffb      	ldrb	r3, [r7, #31]
 800360a:	77bb      	strb	r3, [r7, #30]
 800360c:	e001      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fe2a 	bl	800327c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fe35 	bl	80032a8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fe5d 	bl	800330e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fe52 	bl	800330e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fe2a 	bl	80032d4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fe1f 	bl	80032d4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d022      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fe8d 	bl	80033c6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b4:	d107      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ce:	d10b      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8dd 	bl	8003894 <RCCEx_PLLSAI1_ConfigNQ>
 80036da:	4603      	mov	r3, r0
 80036dc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02b      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe2a 	bl	800336e <LL_RCC_SetRNGClockSource>
 800371a:	e00a      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	2000      	movs	r0, #0
 8003728:	f7ff fe21 	bl	800336e <LL_RCC_SetRNGClockSource>
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff fe34 	bl	800339a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800373a:	d107      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fe3d 	bl	80033dc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376a:	d107      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003784:	d10b      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f8dd 	bl	800394a <RCCEx_PLLSAI1_ConfigNR>
 8003790:	4603      	mov	r3, r0
 8003792:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fd26 	bl	8003200 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd45 	bl	8003254 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fd2c 	bl	800322c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80037d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037ea:	f7ff fe61 	bl	80034b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037ee:	f7fe f923 	bl	8001a38 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037f4:	e009      	b.n	800380a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f6:	f7fe f91f 	bl	8001a38 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e004      	b.n	8003814 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800380a:	f7ff fe60 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d137      	bne.n	800388a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003848:	f7ff fe23 	bl	8003492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fe f8f4 	bl	8001a38 <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003854:	f7fe f8f0 	bl	8001a38 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	e004      	b.n	8003872 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003868:	f7ff fe31 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 800386c:	4603      	mov	r3, r0
 800386e:	2b01      	cmp	r3, #1
 8003870:	d1f0      	bne.n	8003854 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038a0:	f7ff fe06 	bl	80034b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038a4:	f7fe f8c8 	bl	8001a38 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ac:	f7fe f8c4 	bl	8001a38 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
      break;
 80038be:	e004      	b.n	80038ca <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038c0:	f7ff fe05 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d137      	bne.n	8003940 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e4:	4313      	orrs	r3, r2
 80038e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038fe:	f7ff fdc8 	bl	8003492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003902:	f7fe f899 	bl	8001a38 <HAL_GetTick>
 8003906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003908:	e009      	b.n	800391e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390a:	f7fe f895 	bl	8001a38 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d902      	bls.n	800391e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	73fb      	strb	r3, [r7, #15]
        break;
 800391c:	e004      	b.n	8003928 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800391e:	f7ff fdd6 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d1f0      	bne.n	800390a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800392e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003956:	f7ff fdab 	bl	80034b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800395a:	f7fe f86d 	bl	8001a38 <HAL_GetTick>
 800395e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003960:	e009      	b.n	8003976 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003962:	f7fe f869 	bl	8001a38 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d902      	bls.n	8003976 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e004      	b.n	8003980 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003976:	f7ff fdaa 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d137      	bne.n	80039f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b0:	4313      	orrs	r3, r2
 80039b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039b4:	f7ff fd6d 	bl	8003492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b8:	f7fe f83e 	bl	8001a38 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039be:	e009      	b.n	80039d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c0:	f7fe f83a 	bl	8001a38 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	73fb      	strb	r3, [r7, #15]
        break;
 80039d2:	e004      	b.n	80039de <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039d4:	f7ff fd7b 	bl	80034ce <LL_RCC_PLLSAI1_IsReady>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d1f0      	bne.n	80039c0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e09f      	b.n	8003b52 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fe96 	bl	8001758 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a34:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <HAL_RTC_Init+0x15c>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d07e      	beq.n	8003b3e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	22ca      	movs	r2, #202	; 0xca
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2253      	movs	r2, #83	; 0x53
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8ab 	bl	8003bac <RTC_EnterInitMode>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2204      	movs	r2, #4
 8003a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e067      	b.n	8003b42 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a84:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6919      	ldr	r1, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0203 	bic.w	r2, r2, #3
 8003ae0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f829 	bl	8003b60 <HAL_RTC_WaitForSynchro>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	22ff      	movs	r2, #255	; 0xff
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e010      	b.n	8003b52 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e001      	b.n	8003b42 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40002800 	.word	0x40002800

08003b60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b76:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b78:	f7fd ff5e 	bl	8001a38 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b7e:	e009      	b.n	8003b94 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b80:	f7fd ff5a 	bl	8001a38 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8e:	d901      	bls.n	8003b94 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e007      	b.n	8003ba4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d119      	bne.n	8003bf6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003bcc:	f7fd ff34 	bl	8001a38 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bd2:	e009      	b.n	8003be8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003bd4:	f7fd ff30 	bl	8001a38 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be2:	d901      	bls.n	8003be8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e007      	b.n	8003bf8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ee      	beq.n	8003bd4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0a8      	b.n	8003d6c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	22ca      	movs	r2, #202	; 0xca
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2253      	movs	r2, #83	; 0x53
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003c48:	f7fd fef6 	bl	8001a38 <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003c4e:	e015      	b.n	8003c7c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c50:	f7fd fef2 	bl	8001a38 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c5e:	d90d      	bls.n	8003c7c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e077      	b.n	8003d6c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e2      	bne.n	8003c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003caa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003cac:	f7fd fec4 	bl	8001a38 <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cb2:	e015      	b.n	8003ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cb4:	f7fd fec0 	bl	8001a38 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc2:	d90d      	bls.n	8003ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e045      	b.n	8003d6c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0e2      	beq.n	8003cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0207 	bic.w	r2, r2, #7
 8003d04:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d40:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	22ff      	movs	r2, #255	; 0xff
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	58000800 	.word	0x58000800

08003d78 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	2218      	movs	r2, #24
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f8d8 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d90:	233f      	movs	r3, #63	; 0x3f
 8003d92:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003d94:	2381      	movs	r3, #129	; 0x81
 8003d96:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003d98:	1dfb      	adds	r3, r7, #7
 8003d9a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fb54 	bl	8005454 <hci_send_req>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da01      	bge.n	8003db6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003db2:	23ff      	movs	r3, #255	; 0xff
 8003db4:	e000      	b.n	8003db8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003db6:	79fb      	ldrb	r3, [r7, #7]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8003dc0:	b5b0      	push	{r4, r5, r7, lr}
 8003dc2:	b0ce      	sub	sp, #312	; 0x138
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003dd2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003dde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003de2:	4622      	mov	r2, r4
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003dea:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8003dee:	4602      	mov	r2, r0
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003df6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003dfe:	f107 0310 	add.w	r3, r7, #16
 8003e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003e06:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	f107 0210 	add.w	r2, r7, #16
 8003e10:	4413      	add	r3, r2
 8003e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003e16:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003e1a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003e1e:	4413      	add	r3, r2
 8003e20:	3309      	adds	r3, #9
 8003e22:	f107 0210 	add.w	r2, r7, #16
 8003e26:	4413      	add	r3, r2
 8003e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003e30:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e42:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e46:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e52:	3301      	adds	r3, #1
 8003e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e5c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e60:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003e64:	8812      	ldrh	r2, [r2, #0]
 8003e66:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e6e:	3302      	adds	r3, #2
 8003e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e78:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e7c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e94:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e98:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003eaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003eae:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003eb2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ec2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003ec6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003edc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f81d 	bl	8004f20 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003ee6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003eea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003ef4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ef8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003efc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f02:	3301      	adds	r3, #1
 8003f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003f12:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f802 	bl	8004f20 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003f1c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003f20:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003f24:	4413      	add	r3, r2
 8003f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8003f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f2e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003f32:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8003f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f42:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003f46:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f56:	2218      	movs	r2, #24
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fff0 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003f60:	233f      	movs	r3, #63	; 0x3f
 8003f62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003f66:	2383      	movs	r3, #131	; 0x83
 8003f68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003f7c:	f107 030f 	add.w	r3, r7, #15
 8003f80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 fa5f 	bl	8005454 <hci_send_req>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da01      	bge.n	8003fa0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8003f9c:	23ff      	movs	r3, #255	; 0xff
 8003f9e:	e004      	b.n	8003faa <aci_gap_set_discoverable+0x1ea>
  return status;
 8003fa0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003fa4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003fa8:	781b      	ldrb	r3, [r3, #0]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}

08003fb4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b0cc      	sub	sp, #304	; 0x130
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fc0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003fc4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8003fc6:	f107 0310 	add.w	r3, r7, #16
 8003fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fd2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8003fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003fe8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ffe:	2218      	movs	r2, #24
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 ff9c 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004008:	233f      	movs	r3, #63	; 0x3f
 800400a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800400e:	2385      	movs	r3, #133	; 0x85
 8004010:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800401c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004024:	f107 030f 	add.w	r3, r7, #15
 8004028:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800402c:	2301      	movs	r3, #1
 800402e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004032:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fa0b 	bl	8005454 <hci_send_req>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	da01      	bge.n	8004048 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8004044:	23ff      	movs	r3, #255	; 0xff
 8004046:	e004      	b.n	8004052 <aci_gap_set_io_capability+0x9e>
  return status;
 8004048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004050:	781b      	ldrb	r3, [r3, #0]
}
 8004052:	4618      	mov	r0, r3
 8004054:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	b0cc      	sub	sp, #304	; 0x130
 8004060:	af00      	add	r7, sp, #0
 8004062:	4605      	mov	r5, r0
 8004064:	460c      	mov	r4, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004072:	462a      	mov	r2, r5
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800407a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800407e:	4622      	mov	r2, r4
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004086:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800408a:	4602      	mov	r2, r0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004096:	460a      	mov	r2, r1
 8004098:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800409a:	f107 0310 	add.w	r3, r7, #16
 800409e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80040a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80040b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040bc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80040c0:	7812      	ldrb	r2, [r2, #0]
 80040c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80040c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040c8:	3301      	adds	r3, #1
 80040ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80040ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80040da:	7812      	ldrb	r2, [r2, #0]
 80040dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80040de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040e2:	3301      	adds	r3, #1
 80040e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80040e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040f0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80040f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040fc:	3301      	adds	r3, #1
 80040fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800410a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004116:	3301      	adds	r3, #1
 8004118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800411c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004120:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004124:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800412a:	3301      	adds	r3, #1
 800412c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004134:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004138:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800413a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800413e:	3301      	adds	r3, #1
 8004140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004148:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800414c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800414e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004152:	3301      	adds	r3, #1
 8004154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004160:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8004164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004168:	3304      	adds	r3, #4
 800416a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800416e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004172:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004176:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800417c:	3301      	adds	r3, #1
 800417e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004186:	2218      	movs	r2, #24
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fed8 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004190:	233f      	movs	r3, #63	; 0x3f
 8004192:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8004196:	2386      	movs	r3, #134	; 0x86
 8004198:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80041a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80041ac:	f107 030f 	add.w	r3, r7, #15
 80041b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80041ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f947 	bl	8005454 <hci_send_req>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da01      	bge.n	80041d0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80041cc:	23ff      	movs	r3, #255	; 0xff
 80041ce:	e004      	b.n	80041da <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80041d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80041d8:	781b      	ldrb	r3, [r3, #0]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bdb0      	pop	{r4, r5, r7, pc}

080041e4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0cc      	sub	sp, #304	; 0x130
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4602      	mov	r2, r0
 80041ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f4:	6019      	str	r1, [r3, #0]
 80041f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80041fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800421a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004222:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800422a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800422e:	3302      	adds	r3, #2
 8004230:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8004234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004238:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800423c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8004246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800424a:	3304      	adds	r3, #4
 800424c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004254:	2218      	movs	r2, #24
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fe71 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 800425e:	233f      	movs	r3, #63	; 0x3f
 8004260:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8004264:	2388      	movs	r3, #136	; 0x88
 8004266:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800426a:	f107 0310 	add.w	r3, r7, #16
 800426e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800427a:	f107 030f 	add.w	r3, r7, #15
 800427e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004288:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f8e0 	bl	8005454 <hci_send_req>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	da01      	bge.n	800429e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800429a:	23ff      	movs	r3, #255	; 0xff
 800429c:	e004      	b.n	80042a8 <aci_gap_pass_key_resp+0xc4>
  return status;
 800429e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80042a6:	781b      	ldrb	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80042b2:	b590      	push	{r4, r7, lr}
 80042b4:	b0cd      	sub	sp, #308	; 0x134
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4604      	mov	r4, r0
 80042ba:	4608      	mov	r0, r1
 80042bc:	4611      	mov	r1, r2
 80042be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042c2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80042d0:	4622      	mov	r2, r4
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80042dc:	4602      	mov	r2, r0
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80042e8:	460a      	mov	r2, r1
 80042ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80042f4:	f107 0308 	add.w	r3, r7, #8
 80042f8:	2207      	movs	r2, #7
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fe1f 	bl	8004f40 <Osal_MemSet>
  int index_input = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800430c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004310:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800431c:	3301      	adds	r3, #1
 800431e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004326:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800432a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004336:	3301      	adds	r3, #1
 8004338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800433c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004344:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800434c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004350:	3301      	adds	r3, #1
 8004352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800435a:	2218      	movs	r2, #24
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fdee 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004364:	233f      	movs	r3, #63	; 0x3f
 8004366:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800436a:	238a      	movs	r3, #138	; 0x8a
 800436c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004388:	2307      	movs	r3, #7
 800438a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800438e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f85d 	bl	8005454 <hci_send_req>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	da01      	bge.n	80043a4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80043a0:	23ff      	movs	r3, #255	; 0xff
 80043a2:	e02e      	b.n	8004402 <aci_gap_init+0x150>
  if ( resp.Status )
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <aci_gap_init+0x10c>
    return resp.Status;
 80043b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	e021      	b.n	8004402 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80043be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80043d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043e0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80043ea:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80043ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043f4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}

0800440c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b0cc      	sub	sp, #304	; 0x130
 8004410:	af00      	add	r7, sp, #0
 8004412:	4602      	mov	r2, r0
 8004414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800441c:	6019      	str	r1, [r3, #0]
 800441e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004422:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004426:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004428:	f107 0310 	add.w	r3, r7, #16
 800442c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004434:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800444a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004456:	3301      	adds	r3, #1
 8004458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800445c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004460:	1c58      	adds	r0, r3, #1
 8004462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004466:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	f000 fd53 	bl	8004f20 <Osal_MemCpy>
  index_input += AdvDataLen;
 800447a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004488:	4413      	add	r3, r2
 800448a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800448e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004492:	2218      	movs	r2, #24
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd52 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 800449c:	233f      	movs	r3, #63	; 0x3f
 800449e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80044a2:	238e      	movs	r3, #142	; 0x8e
 80044a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80044b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80044b8:	f107 030f 	add.w	r3, r7, #15
 80044bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 ffc1 	bl	8005454 <hci_send_req>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da01      	bge.n	80044dc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80044d8:	23ff      	movs	r3, #255	; 0xff
 80044da:	e004      	b.n	80044e6 <aci_gap_update_adv_data+0xda>
  return status;
 80044dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80044e4:	781b      	ldrb	r3, [r3, #0]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	2218      	movs	r2, #24
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fd1c 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004508:	233f      	movs	r3, #63	; 0x3f
 800450a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800450c:	2392      	movs	r3, #146	; 0x92
 800450e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004514:	2301      	movs	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f000 ff98 	bl	8005454 <hci_send_req>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	da01      	bge.n	800452e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800452a:	23ff      	movs	r3, #255	; 0xff
 800452c:	e000      	b.n	8004530 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800452e:	79fb      	ldrb	r3, [r7, #7]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0cc      	sub	sp, #304	; 0x130
 800453c:	af00      	add	r7, sp, #0
 800453e:	4602      	mov	r2, r0
 8004540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004544:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004552:	460a      	mov	r2, r1
 8004554:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800455e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004562:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004574:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004578:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004584:	3302      	adds	r3, #2
 8004586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800458a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004592:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800459a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459e:	3301      	adds	r3, #1
 80045a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045a8:	2218      	movs	r2, #24
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fcc7 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045b2:	233f      	movs	r3, #63	; 0x3f
 80045b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80045b8:	23a5      	movs	r3, #165	; 0xa5
 80045ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045be:	f107 0310 	add.w	r3, r7, #16
 80045c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045ce:	f107 030f 	add.w	r3, r7, #15
 80045d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ff36 	bl	8005454 <hci_send_req>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da01      	bge.n	80045f2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80045ee:	23ff      	movs	r3, #255	; 0xff
 80045f0:	e004      	b.n	80045fc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80045f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80045fa:	781b      	ldrb	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b088      	sub	sp, #32
 800460a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004610:	f107 0308 	add.w	r3, r7, #8
 8004614:	2218      	movs	r2, #24
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fc91 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 800461e:	233f      	movs	r3, #63	; 0x3f
 8004620:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004622:	f240 1301 	movw	r3, #257	; 0x101
 8004626:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004628:	1dfb      	adds	r3, r7, #7
 800462a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ff0c 	bl	8005454 <hci_send_req>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	da01      	bge.n	8004646 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004642:	23ff      	movs	r3, #255	; 0xff
 8004644:	e000      	b.n	8004648 <aci_gatt_init+0x42>
  return status;
 8004646:	79fb      	ldrb	r3, [r7, #7]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b0cf      	sub	sp, #316	; 0x13c
 8004654:	af00      	add	r7, sp, #0
 8004656:	4604      	mov	r4, r0
 8004658:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800465c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8004660:	6001      	str	r1, [r0, #0]
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800466a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800466e:	4622      	mov	r2, r4
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004676:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800467a:	4602      	mov	r2, r0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004682:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004686:	460a      	mov	r2, r1
 8004688:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004692:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004696:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00a      	beq.n	80046b6 <aci_gatt_add_service+0x66>
 80046a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046a4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d101      	bne.n	80046b2 <aci_gatt_add_service+0x62>
 80046ae:	2311      	movs	r3, #17
 80046b0:	e002      	b.n	80046b8 <aci_gatt_add_service+0x68>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <aci_gatt_add_service+0x68>
 80046b6:	2303      	movs	r3, #3
 80046b8:	f107 0210 	add.w	r2, r7, #16
 80046bc:	4413      	add	r3, r2
 80046be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2203      	movs	r2, #3
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc38 	bl	8004f40 <Osal_MemSet>
  int index_input = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80046d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046da:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80046de:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80046e2:	7812      	ldrb	r2, [r2, #0]
 80046e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80046e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046ea:	3301      	adds	r3, #1
 80046ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80046f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046f4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d002      	beq.n	8004704 <aci_gatt_add_service+0xb4>
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d004      	beq.n	800470c <aci_gatt_add_service+0xbc>
 8004702:	e007      	b.n	8004714 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8004704:	2302      	movs	r3, #2
 8004706:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800470a:	e005      	b.n	8004718 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004712:	e001      	b.n	8004718 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004714:	2397      	movs	r3, #151	; 0x97
 8004716:	e06c      	b.n	80047f2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800471c:	1c58      	adds	r0, r3, #1
 800471e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004726:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	f000 fbf8 	bl	8004f20 <Osal_MemCpy>
    index_input += size;
 8004730:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004734:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004738:	4413      	add	r3, r2
 800473a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800473e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004742:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004746:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800474e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004752:	3301      	adds	r3, #1
 8004754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004760:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004764:	7812      	ldrb	r2, [r2, #0]
 8004766:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800476c:	3301      	adds	r3, #1
 800476e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004776:	2218      	movs	r2, #24
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fbe0 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004780:	233f      	movs	r3, #63	; 0x3f
 8004782:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004786:	f44f 7381 	mov.w	r3, #258	; 0x102
 800478a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800479a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80047a6:	2303      	movs	r3, #3
 80047a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fe4e 	bl	8005454 <hci_send_req>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da01      	bge.n	80047c2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80047be:	23ff      	movs	r3, #255	; 0xff
 80047c0:	e017      	b.n	80047f2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80047c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80047d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	e00a      	b.n	80047f2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80047dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80047ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}

080047fc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b0d1      	sub	sp, #324	; 0x144
 8004800:	af00      	add	r7, sp, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800480a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800480e:	600a      	str	r2, [r1, #0]
 8004810:	4619      	mov	r1, r3
 8004812:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004816:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800481a:	4622      	mov	r2, r4
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004822:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004826:	4602      	mov	r2, r0
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800482e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004832:	460a      	mov	r2, r1
 8004834:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004836:	f107 0318 	add.w	r3, r7, #24
 800483a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800483e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004842:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d00a      	beq.n	8004862 <aci_gatt_add_char+0x66>
 800484c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004850:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d101      	bne.n	800485e <aci_gatt_add_char+0x62>
 800485a:	2313      	movs	r3, #19
 800485c:	e002      	b.n	8004864 <aci_gatt_add_char+0x68>
 800485e:	2303      	movs	r3, #3
 8004860:	e000      	b.n	8004864 <aci_gatt_add_char+0x68>
 8004862:	2305      	movs	r3, #5
 8004864:	f107 0218 	add.w	r2, r7, #24
 8004868:	4413      	add	r3, r2
 800486a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800486e:	f107 0314 	add.w	r3, r7, #20
 8004872:	2203      	movs	r2, #3
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fb62 	bl	8004f40 <Osal_MemSet>
  int index_input = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004882:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004886:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800488a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800488e:	8812      	ldrh	r2, [r2, #0]
 8004890:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004892:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004896:	3302      	adds	r3, #2
 8004898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800489c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80048a0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80048a4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80048ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048b0:	3301      	adds	r3, #1
 80048b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80048b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80048ba:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <aci_gatt_add_char+0xce>
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d004      	beq.n	80048d2 <aci_gatt_add_char+0xd6>
 80048c8:	e007      	b.n	80048da <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80048ca:	2302      	movs	r3, #2
 80048cc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80048d0:	e005      	b.n	80048de <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80048d2:	2310      	movs	r3, #16
 80048d4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80048d8:	e001      	b.n	80048de <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80048da:	2397      	movs	r3, #151	; 0x97
 80048dc:	e091      	b.n	8004a02 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80048de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80048e2:	1cd8      	adds	r0, r3, #3
 80048e4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80048e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80048ec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	f000 fb15 	bl	8004f20 <Osal_MemCpy>
    index_input += size;
 80048f6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80048fa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80048fe:	4413      	add	r3, r2
 8004900:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004904:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004908:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800490c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004914:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004918:	3302      	adds	r3, #2
 800491a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800491e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004922:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004926:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004928:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800492c:	3301      	adds	r3, #1
 800492e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004932:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004936:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800493a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800493c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004940:	3301      	adds	r3, #1
 8004942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800494a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800494e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004954:	3301      	adds	r3, #1
 8004956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800495a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800495e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004962:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004964:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004968:	3301      	adds	r3, #1
 800496a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800496e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004972:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004976:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004978:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800497c:	3301      	adds	r3, #1
 800497e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004982:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004986:	2218      	movs	r2, #24
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fad8 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004990:	233f      	movs	r3, #63	; 0x3f
 8004992:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004996:	f44f 7382 	mov.w	r3, #260	; 0x104
 800499a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800499e:	f107 0318 	add.w	r3, r7, #24
 80049a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80049a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80049b6:	2303      	movs	r3, #3
 80049b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fd46 	bl	8005454 <hci_send_req>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da01      	bge.n	80049d2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80049ce:	23ff      	movs	r3, #255	; 0xff
 80049d0:	e017      	b.n	8004a02 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80049d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80049d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80049e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80049e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	e00a      	b.n	8004a02 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80049ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80049f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80049fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b0cc      	sub	sp, #304	; 0x130
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4605      	mov	r5, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004a22:	462a      	mov	r2, r5
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a2e:	4622      	mov	r2, r4
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a36:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004a46:	460a      	mov	r2, r1
 8004a48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004a4a:	f107 0310 	add.w	r3, r7, #16
 8004a4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a6c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004a70:	8812      	ldrh	r2, [r2, #0]
 8004a72:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a86:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a92:	3302      	adds	r3, #2
 8004a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aa0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aac:	3301      	adds	r3, #1
 8004aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aba:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad0:	1d98      	adds	r0, r3, #6
 8004ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ae2:	f000 fa1d 	bl	8004f20 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004af4:	4413      	add	r3, r2
 8004af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004afe:	2218      	movs	r2, #24
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fa1c 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b08:	233f      	movs	r3, #63	; 0x3f
 8004b0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004b0e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004b12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b16:	f107 0310 	add.w	r3, r7, #16
 8004b1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004b26:	f107 030f 	add.w	r3, r7, #15
 8004b2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fc8a 	bl	8005454 <hci_send_req>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da01      	bge.n	8004b4a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004b46:	23ff      	movs	r3, #255	; 0xff
 8004b48:	e004      	b.n	8004b54 <aci_gatt_update_char_value+0x148>
  return status;
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004b52:	781b      	ldrb	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bdb0      	pop	{r4, r5, r7, pc}

08004b5e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b0cc      	sub	sp, #304	; 0x130
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b76:	4602      	mov	r2, r0
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004b82:	460a      	mov	r2, r1
 8004b84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004b86:	f107 0310 	add.w	r3, r7, #16
 8004b8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ba8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bc2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bce:	3301      	adds	r3, #1
 8004bd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd8:	1c98      	adds	r0, r3, #2
 8004bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bde:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	f000 f997 	bl	8004f20 <Osal_MemCpy>
  index_input += Length;
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004c00:	4413      	add	r3, r2
 8004c02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c0a:	2218      	movs	r2, #24
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f996 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c14:	233f      	movs	r3, #63	; 0x3f
 8004c16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004c20:	f107 0310 	add.w	r3, r7, #16
 8004c24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004c30:	f107 030f 	add.w	r3, r7, #15
 8004c34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fc05 	bl	8005454 <hci_send_req>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da01      	bge.n	8004c54 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8004c50:	23ff      	movs	r3, #255	; 0xff
 8004c52:	e004      	b.n	8004c5e <aci_hal_write_config_data+0x100>
  return status;
 8004c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c5c:	781b      	ldrb	r3, [r3, #0]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b0cc      	sub	sp, #304	; 0x130
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4602      	mov	r2, r0
 8004c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004c82:	460a      	mov	r2, r1
 8004c84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ca8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cc2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004cc6:	7812      	ldrb	r2, [r2, #0]
 8004cc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cd8:	2218      	movs	r2, #24
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f92f 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ce2:	233f      	movs	r3, #63	; 0x3f
 8004ce4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004ce8:	230f      	movs	r3, #15
 8004cea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004cee:	f107 0310 	add.w	r3, r7, #16
 8004cf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004cfe:	f107 030f 	add.w	r3, r7, #15
 8004d02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fb9e 	bl	8005454 <hci_send_req>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da01      	bge.n	8004d22 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8004d1e:	23ff      	movs	r3, #255	; 0xff
 8004d20:	e004      	b.n	8004d2c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8004d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d2a:	781b      	ldrb	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b0cc      	sub	sp, #304	; 0x130
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004d46:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d6a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004d6e:	8812      	ldrh	r2, [r2, #0]
 8004d70:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004d72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d76:	3302      	adds	r3, #2
 8004d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d80:	2218      	movs	r2, #24
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f8db 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d8a:	233f      	movs	r3, #63	; 0x3f
 8004d8c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004d90:	2318      	movs	r3, #24
 8004d92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d96:	f107 0310 	add.w	r3, r7, #16
 8004d9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004da2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004da6:	f107 030f 	add.w	r3, r7, #15
 8004daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004db4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb4a 	bl	8005454 <hci_send_req>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da01      	bge.n	8004dca <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8004dc6:	23ff      	movs	r3, #255	; 0xff
 8004dc8:	e004      	b.n	8004dd4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004dd2:	781b      	ldrb	r3, [r3, #0]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b088      	sub	sp, #32
 8004de2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	2218      	movs	r2, #24
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f8a5 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x03;
 8004df6:	2303      	movs	r3, #3
 8004df8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fb21 	bl	8005454 <hci_send_req>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	da01      	bge.n	8004e1c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004e18:	23ff      	movs	r3, #255	; 0xff
 8004e1a:	e000      	b.n	8004e1e <hci_reset+0x40>
  return status;
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004e26:	b590      	push	{r4, r7, lr}
 8004e28:	b0cd      	sub	sp, #308	; 0x134
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e36:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e46:	4602      	mov	r2, r0
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004e52:	460a      	mov	r2, r1
 8004e54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e78:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e84:	3301      	adds	r3, #1
 8004e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e92:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eac:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ec2:	2218      	movs	r2, #24
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f83a 	bl	8004f40 <Osal_MemSet>
  rq.ogf = 0x08;
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004ed2:	2331      	movs	r3, #49	; 0x31
 8004ed4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ed8:	f107 0310 	add.w	r3, r7, #16
 8004edc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004ee8:	f107 030f 	add.w	r3, r7, #15
 8004eec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 faa9 	bl	8005454 <hci_send_req>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da01      	bge.n	8004f0c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8004f08:	23ff      	movs	r3, #255	; 0xff
 8004f0a:	e004      	b.n	8004f16 <hci_le_set_default_phy+0xf0>
  return status;
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f14:	781b      	ldrb	r3, [r3, #0]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}

08004f20 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f002 f8e3 	bl	80070fc <memcpy>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f002 f8a7 	bl	80070a4 <memset>
 8004f56:	4603      	mov	r3, r0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return;
 8004f64:	bf00      	nop
}
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  return;
 8004f72:	bf00      	nop
}
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return;
 8004f80:	bf00      	nop
}
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0
  return;
 8004f8e:	bf00      	nop
}
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return;
 8004f9c:	bf00      	nop
}
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0
  return;
 8004faa:	bf00      	nop
}
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return;
 8004fb8:	bf00      	nop
}
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  return;
 8004fc6:	bf00      	nop
}
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return;
 8004fd4:	bf00      	nop
}
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  return;
 8004fe2:	bf00      	nop
}
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return;
 8004ff0:	bf00      	nop
}
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	af00      	add	r7, sp, #0
  return;
 8004ffe:	bf00      	nop
}
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return;
 800500c:	bf00      	nop
}
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  return;
 800501a:	bf00      	nop
}
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return;
 8005028:	bf00      	nop
}
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  return;
 8005036:	bf00      	nop
}
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return;
 8005044:	bf00      	nop
}
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <SVCCTL_Init+0x18>)
 8005056:	2200      	movs	r2, #0
 8005058:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <SVCCTL_Init+0x1c>)
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005060:	f000 f806 	bl	8005070 <SVCCTL_SvcInit>

  return;
 8005064:	bf00      	nop
}
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000028 	.word	0x20000028
 800506c:	20000048 	.word	0x20000048

08005070 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  BAS_Init();
 8005074:	f7ff ff74 	bl	8004f60 <BAS_Init>

  BLS_Init();
 8005078:	f7ff ff79 	bl	8004f6e <BLS_Init>

  CRS_STM_Init();
 800507c:	f7ff ff7e 	bl	8004f7c <CRS_STM_Init>

  DIS_Init();
 8005080:	f7ff ff83 	bl	8004f8a <DIS_Init>

  EDS_STM_Init();
 8005084:	f7ff ff88 	bl	8004f98 <EDS_STM_Init>

  HIDS_Init();
 8005088:	f7ff ff8d 	bl	8004fa6 <HIDS_Init>

  HRS_Init();
 800508c:	f7ff ff92 	bl	8004fb4 <HRS_Init>

  HTS_Init();
 8005090:	f7ff ff97 	bl	8004fc2 <HTS_Init>

  IAS_Init();
 8005094:	f7ff ff9c 	bl	8004fd0 <IAS_Init>

  LLS_Init();
 8005098:	f7ff ffa1 	bl	8004fde <LLS_Init>

  TPS_Init();
 800509c:	f7ff ffa6 	bl	8004fec <TPS_Init>

  MOTENV_STM_Init();
 80050a0:	f7ff ffab 	bl	8004ffa <MOTENV_STM_Init>

  P2PS_STM_Init();
 80050a4:	f7ff ffb0 	bl	8005008 <P2PS_STM_Init>

  ZDD_STM_Init();
 80050a8:	f7ff ffb5 	bl	8005016 <ZDD_STM_Init>

  OTAS_STM_Init();
 80050ac:	f7ff ffba 	bl	8005024 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80050b0:	f7ff ffc6 	bl	8005040 <BVOPUS_STM_Init>

  MESH_Init();
 80050b4:	f7ff ffbd 	bl	8005032 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80050b8:	f001 fab4 	bl	8006624 <SVCCTL_InitCustomSvc>
  
  return;
 80050bc:	bf00      	nop
}
 80050be:	bd80      	pop	{r7, pc}

080050c0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <SVCCTL_RegisterSvcHandler+0x30>)
 80050ca:	7f1b      	ldrb	r3, [r3, #28]
 80050cc:	4619      	mov	r1, r3
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <SVCCTL_RegisterSvcHandler+0x30>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <SVCCTL_RegisterSvcHandler+0x30>)
 80050d8:	7f1b      	ldrb	r3, [r3, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <SVCCTL_RegisterSvcHandler+0x30>)
 80050e0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80050e2:	bf00      	nop
}
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000028 	.word	0x20000028

080050f4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3301      	adds	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2bff      	cmp	r3, #255	; 0xff
 800510c:	d125      	bne.n	800515a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3302      	adds	r3, #2
 8005112:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800511e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005122:	d118      	bne.n	8005156 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005124:	2300      	movs	r3, #0
 8005126:	757b      	strb	r3, [r7, #21]
 8005128:	e00d      	b.n	8005146 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800512a:	7d7b      	ldrb	r3, [r7, #21]
 800512c:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <SVCCTL_UserEvtRx+0xa4>)
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005140:	7d7b      	ldrb	r3, [r7, #21]
 8005142:	3301      	adds	r3, #1
 8005144:	757b      	strb	r3, [r7, #21]
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <SVCCTL_UserEvtRx+0xa4>)
 8005148:	7f1b      	ldrb	r3, [r3, #28]
 800514a:	7d7a      	ldrb	r2, [r7, #21]
 800514c:	429a      	cmp	r2, r3
 800514e:	d3ec      	bcc.n	800512a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005150:	e002      	b.n	8005158 <SVCCTL_UserEvtRx+0x64>
              break;
 8005152:	bf00      	nop
          break;
 8005154:	e000      	b.n	8005158 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005156:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005158:	e000      	b.n	800515c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800515a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d00f      	beq.n	8005182 <SVCCTL_UserEvtRx+0x8e>
 8005162:	2b02      	cmp	r3, #2
 8005164:	dc10      	bgt.n	8005188 <SVCCTL_UserEvtRx+0x94>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <SVCCTL_UserEvtRx+0x7c>
 800516a:	2b01      	cmp	r3, #1
 800516c:	d006      	beq.n	800517c <SVCCTL_UserEvtRx+0x88>
 800516e:	e00b      	b.n	8005188 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 ff85 	bl	8006080 <SVCCTL_App_Notification>
 8005176:	4603      	mov	r3, r0
 8005178:	75bb      	strb	r3, [r7, #22]
      break;
 800517a:	e008      	b.n	800518e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800517c:	2301      	movs	r3, #1
 800517e:	75bb      	strb	r3, [r7, #22]
      break;
 8005180:	e005      	b.n	800518e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005182:	2300      	movs	r3, #0
 8005184:	75bb      	strb	r3, [r7, #22]
      break;
 8005186:	e002      	b.n	800518e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005188:	2301      	movs	r3, #1
 800518a:	75bb      	strb	r3, [r7, #22]
      break;
 800518c:	bf00      	nop
  }

  return (return_status);
 800518e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000028 	.word	0x20000028

0800519c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	212e      	movs	r1, #46	; 0x2e
 80051b4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80051b8:	f000 fae8 	bl	800578c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	330b      	adds	r3, #11
 80051c0:	78db      	ldrb	r3, [r3, #3]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	210f      	movs	r1, #15
 80051e2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80051e6:	f000 fad1 	bl	800578c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	330b      	adds	r3, #11
 80051ee:	78db      	ldrb	r3, [r3, #3]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005200:	f107 030c 	add.w	r3, r7, #12
 8005204:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	2110      	movs	r1, #16
 800520c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005210:	f000 fabc 	bl	800578c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	330b      	adds	r3, #11
 8005218:	78db      	ldrb	r3, [r3, #3]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005224:	b480      	push	{r7}
 8005226:	b08b      	sub	sp, #44	; 0x2c
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800524c:	4b4a      	ldr	r3, [pc, #296]	; (8005378 <SHCI_GetWirelessFwInfo+0x154>)
 800524e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005250:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005254:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800525e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a44      	ldr	r2, [pc, #272]	; (800537c <SHCI_GetWirelessFwInfo+0x158>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10f      	bne.n	8005290 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e01a      	b.n	80052c6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005298:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800529c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	0e1b      	lsrs	r3, r3, #24
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	0c1b      	lsrs	r3, r3, #16
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	0a1b      	lsrs	r3, r3, #8
 800531a:	b2da      	uxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	0e1b      	lsrs	r3, r3, #24
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	b2da      	uxtb	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	b2da      	uxtb	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	372c      	adds	r7, #44	; 0x2c
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	58004000 	.word	0x58004000
 800537c:	a94656b9 	.word	0xa94656b9

08005380 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <hci_init+0x30>)
 8005390:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <hci_init+0x34>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005398:	4806      	ldr	r0, [pc, #24]	; (80053b4 <hci_init+0x34>)
 800539a:	f000 f979 	bl	8005690 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f8da 	bl	800555c <TlInit>

  return;
 80053a8:	bf00      	nop
}
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	200001bc 	.word	0x200001bc
 80053b4:	20000194 	.word	0x20000194

080053b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80053be:	4822      	ldr	r0, [pc, #136]	; (8005448 <hci_user_evt_proc+0x90>)
 80053c0:	f000 fd32 	bl	8005e28 <LST_is_empty>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d12b      	bne.n	8005422 <hci_user_evt_proc+0x6a>
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <hci_user_evt_proc+0x94>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d027      	beq.n	8005422 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80053d2:	f107 030c 	add.w	r3, r7, #12
 80053d6:	4619      	mov	r1, r3
 80053d8:	481b      	ldr	r0, [pc, #108]	; (8005448 <hci_user_evt_proc+0x90>)
 80053da:	f000 fdb4 	bl	8005f46 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80053de:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <hci_user_evt_proc+0x98>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80053ea:	2301      	movs	r3, #1
 80053ec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <hci_user_evt_proc+0x98>)
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	1d3a      	adds	r2, r7, #4
 80053f4:	4610      	mov	r0, r2
 80053f6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80053f8:	793a      	ldrb	r2, [r7, #4]
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <hci_user_evt_proc+0x94>)
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e002      	b.n	8005406 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <hci_user_evt_proc+0x94>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <hci_user_evt_proc+0x94>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fc0d 	bl	8005c30 <TL_MM_EvtDone>
 8005416:	e004      	b.n	8005422 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4619      	mov	r1, r3
 800541c:	480a      	ldr	r0, [pc, #40]	; (8005448 <hci_user_evt_proc+0x90>)
 800541e:	f000 fd25 	bl	8005e6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005422:	4809      	ldr	r0, [pc, #36]	; (8005448 <hci_user_evt_proc+0x90>)
 8005424:	f000 fd00 	bl	8005e28 <LST_is_empty>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <hci_user_evt_proc+0x86>
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <hci_user_evt_proc+0x94>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005436:	4804      	ldr	r0, [pc, #16]	; (8005448 <hci_user_evt_proc+0x90>)
 8005438:	f001 f83a 	bl	80064b0 <hci_notify_asynch_evt>
  }


  return;
 800543c:	bf00      	nop
 800543e:	bf00      	nop
}
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000050 	.word	0x20000050
 800544c:	2000005c 	.word	0x2000005c
 8005450:	20000194 	.word	0x20000194

08005454 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005460:	2000      	movs	r0, #0
 8005462:	f000 f8d1 	bl	8005608 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	885b      	ldrh	r3, [r3, #2]
 800546e:	b21b      	sxth	r3, r3
 8005470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005474:	b21a      	sxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	029b      	lsls	r3, r3, #10
 800547c:	b21b      	sxth	r3, r3
 800547e:	4313      	orrs	r3, r2
 8005480:	b21b      	sxth	r3, r3
 8005482:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8005484:	4b33      	ldr	r3, [pc, #204]	; (8005554 <hci_send_req+0x100>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	b2d9      	uxtb	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	8bbb      	ldrh	r3, [r7, #28]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f890 	bl	80055bc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800549c:	e04e      	b.n	800553c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800549e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80054a2:	f001 f81c 	bl	80064de <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80054a6:	e043      	b.n	8005530 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80054a8:	f107 030c 	add.w	r3, r7, #12
 80054ac:	4619      	mov	r1, r3
 80054ae:	482a      	ldr	r0, [pc, #168]	; (8005558 <hci_send_req+0x104>)
 80054b0:	f000 fd49 	bl	8005f46 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	7a5b      	ldrb	r3, [r3, #9]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d114      	bne.n	80054e6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	330b      	adds	r3, #11
 80054c0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	885b      	ldrh	r3, [r3, #2]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8bba      	ldrh	r2, [r7, #28]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d104      	bne.n	80054d8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d027      	beq.n	8005530 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80054e0:	2301      	movs	r3, #1
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e024      	b.n	8005530 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	330b      	adds	r3, #11
 80054ea:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	8bba      	ldrh	r2, [r7, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d114      	bne.n	8005524 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	7a9b      	ldrb	r3, [r3, #10]
 80054fe:	3b03      	subs	r3, #3
 8005500:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	429a      	cmp	r2, r3
 800550a:	bfa8      	it	ge
 800550c:	461a      	movge	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6918      	ldr	r0, [r3, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	1cd9      	adds	r1, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	461a      	mov	r2, r3
 8005520:	f001 fdec 	bl	80070fc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800552c:	2301      	movs	r3, #1
 800552e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005530:	4809      	ldr	r0, [pc, #36]	; (8005558 <hci_send_req+0x104>)
 8005532:	f000 fc79 	bl	8005e28 <LST_is_empty>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0b5      	beq.n	80054a8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800553c:	7ffb      	ldrb	r3, [r7, #31]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ad      	beq.n	800549e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005542:	2001      	movs	r0, #1
 8005544:	f000 f860 	bl	8005608 <NotifyCmdStatus>

  return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200001c0 	.word	0x200001c0
 8005558:	200001b4 	.word	0x200001b4

0800555c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005564:	480f      	ldr	r0, [pc, #60]	; (80055a4 <TlInit+0x48>)
 8005566:	f000 fc4f 	bl	8005e08 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800556a:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <TlInit+0x4c>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005570:	480e      	ldr	r0, [pc, #56]	; (80055ac <TlInit+0x50>)
 8005572:	f000 fc49 	bl	8005e08 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005576:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <TlInit+0x54>)
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <TlInit+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <TlInit+0x5c>)
 800558a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <TlInit+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f107 0208 	add.w	r2, r7, #8
 8005594:	4610      	mov	r0, r2
 8005596:	4798      	blx	r3
  }

  return;
 8005598:	bf00      	nop
 800559a:	bf00      	nop
}
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200001b4 	.word	0x200001b4
 80055a8:	20000058 	.word	0x20000058
 80055ac:	20000050 	.word	0x20000050
 80055b0:	2000005c 	.word	0x2000005c
 80055b4:	20000194 	.word	0x20000194
 80055b8:	08005649 	.word	0x08005649

080055bc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	603a      	str	r2, [r7, #0]
 80055c6:	80fb      	strh	r3, [r7, #6]
 80055c8:	460b      	mov	r3, r1
 80055ca:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <SendCmd+0x44>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <SendCmd+0x44>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	797a      	ldrb	r2, [r7, #5]
 80055dc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <SendCmd+0x44>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	797a      	ldrb	r2, [r7, #5]
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fd87 	bl	80070fc <memcpy>

  hciContext.io.Send(0,0);
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <SendCmd+0x48>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2100      	movs	r1, #0
 80055f4:	2000      	movs	r0, #0
 80055f6:	4798      	blx	r3

  return;
 80055f8:	bf00      	nop
}
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000058 	.word	0x20000058
 8005604:	20000194 	.word	0x20000194

08005608 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <NotifyCmdStatus+0x3c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005620:	4b08      	ldr	r3, [pc, #32]	; (8005644 <NotifyCmdStatus+0x3c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2000      	movs	r0, #0
 8005626:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005628:	e008      	b.n	800563c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <NotifyCmdStatus+0x3c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005632:	4b04      	ldr	r3, [pc, #16]	; (8005644 <NotifyCmdStatus+0x3c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2001      	movs	r0, #1
 8005638:	4798      	blx	r3
  return;
 800563a:	bf00      	nop
 800563c:	bf00      	nop
}
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	200001bc 	.word	0x200001bc

08005648 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7a5b      	ldrb	r3, [r3, #9]
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d003      	beq.n	8005660 <TlEvtReceived+0x18>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7a5b      	ldrb	r3, [r3, #9]
 800565c:	2b0e      	cmp	r3, #14
 800565e:	d107      	bne.n	8005670 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4809      	ldr	r0, [pc, #36]	; (8005688 <TlEvtReceived+0x40>)
 8005664:	f000 fc28 	bl	8005eb8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005668:	2000      	movs	r0, #0
 800566a:	f000 ff2d 	bl	80064c8 <hci_cmd_resp_release>
 800566e:	e006      	b.n	800567e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4806      	ldr	r0, [pc, #24]	; (800568c <TlEvtReceived+0x44>)
 8005674:	f000 fc20 	bl	8005eb8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005678:	4804      	ldr	r0, [pc, #16]	; (800568c <TlEvtReceived+0x44>)
 800567a:	f000 ff19 	bl	80064b0 <hci_notify_asynch_evt>
  }

  return;
 800567e:	bf00      	nop
}
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200001b4 	.word	0x200001b4
 800568c:	20000050 	.word	0x20000050

08005690 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a05      	ldr	r2, [pc, #20]	; (80056b0 <hci_register_io_bus+0x20>)
 800569c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <hci_register_io_bus+0x24>)
 80056a2:	611a      	str	r2, [r3, #16]

  return;
 80056a4:	bf00      	nop
}
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	080059a9 	.word	0x080059a9
 80056b4:	08005a11 	.word	0x08005a11

080056b8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <shci_init+0x30>)
 80056c8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80056ca:	4a08      	ldr	r2, [pc, #32]	; (80056ec <shci_init+0x34>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80056d0:	4806      	ldr	r0, [pc, #24]	; (80056ec <shci_init+0x34>)
 80056d2:	f000 f915 	bl	8005900 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f898 	bl	8005810 <TlInit>

  return;
 80056e0:	bf00      	nop
}
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	200001e4 	.word	0x200001e4
 80056ec:	200001c4 	.word	0x200001c4

080056f0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80056f6:	4822      	ldr	r0, [pc, #136]	; (8005780 <shci_user_evt_proc+0x90>)
 80056f8:	f000 fb96 	bl	8005e28 <LST_is_empty>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d12b      	bne.n	800575a <shci_user_evt_proc+0x6a>
 8005702:	4b20      	ldr	r3, [pc, #128]	; (8005784 <shci_user_evt_proc+0x94>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d027      	beq.n	800575a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800570a:	f107 030c 	add.w	r3, r7, #12
 800570e:	4619      	mov	r1, r3
 8005710:	481b      	ldr	r0, [pc, #108]	; (8005780 <shci_user_evt_proc+0x90>)
 8005712:	f000 fc18 	bl	8005f46 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005716:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <shci_user_evt_proc+0x98>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005722:	2301      	movs	r3, #1
 8005724:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <shci_user_evt_proc+0x98>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	1d3a      	adds	r2, r7, #4
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005730:	793a      	ldrb	r2, [r7, #4]
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <shci_user_evt_proc+0x94>)
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e002      	b.n	800573e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <shci_user_evt_proc+0x94>)
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <shci_user_evt_proc+0x94>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fa71 	bl	8005c30 <TL_MM_EvtDone>
 800574e:	e004      	b.n	800575a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4619      	mov	r1, r3
 8005754:	480a      	ldr	r0, [pc, #40]	; (8005780 <shci_user_evt_proc+0x90>)
 8005756:	f000 fb89 	bl	8005e6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800575a:	4809      	ldr	r0, [pc, #36]	; (8005780 <shci_user_evt_proc+0x90>)
 800575c:	f000 fb64 	bl	8005e28 <LST_is_empty>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <shci_user_evt_proc+0x86>
 8005766:	4b07      	ldr	r3, [pc, #28]	; (8005784 <shci_user_evt_proc+0x94>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800576e:	4804      	ldr	r0, [pc, #16]	; (8005780 <shci_user_evt_proc+0x90>)
 8005770:	f7fb f825 	bl	80007be <shci_notify_asynch_evt>
  }


  return;
 8005774:	bf00      	nop
 8005776:	bf00      	nop
}
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000060 	.word	0x20000060
 8005784:	20000070 	.word	0x20000070
 8005788:	200001c4 	.word	0x200001c4

0800578c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60ba      	str	r2, [r7, #8]
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	4603      	mov	r3, r0
 8005798:	81fb      	strh	r3, [r7, #14]
 800579a:	460b      	mov	r3, r1
 800579c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800579e:	2000      	movs	r0, #0
 80057a0:	f000 f868 	bl	8005874 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80057a4:	4b17      	ldr	r3, [pc, #92]	; (8005804 <shci_send+0x78>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	89fa      	ldrh	r2, [r7, #14]
 80057aa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <shci_send+0x78>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	7b7a      	ldrb	r2, [r7, #13]
 80057b4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <shci_send+0x78>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	7b7a      	ldrb	r2, [r7, #13]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fc9b 	bl	80070fc <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <shci_send+0x7c>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <shci_send+0x80>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2100      	movs	r1, #0
 80057d2:	2000      	movs	r0, #0
 80057d4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80057d6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80057da:	f7fb f807 	bl	80007ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 0008 	add.w	r0, r3, #8
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <shci_send+0x78>)
 80057e6:	6819      	ldr	r1, [r3, #0]
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <shci_send+0x78>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	789b      	ldrb	r3, [r3, #2]
 80057ee:	3303      	adds	r3, #3
 80057f0:	461a      	mov	r2, r3
 80057f2:	f001 fc83 	bl	80070fc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80057f6:	2001      	movs	r0, #1
 80057f8:	f000 f83c 	bl	8005874 <Cmd_SetStatus>

  return;
 80057fc:	bf00      	nop
}
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	2000006c 	.word	0x2000006c
 8005808:	200001e8 	.word	0x200001e8
 800580c:	200001c4 	.word	0x200001c4

08005810 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005818:	4a10      	ldr	r2, [pc, #64]	; (800585c <TlInit+0x4c>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800581e:	4810      	ldr	r0, [pc, #64]	; (8005860 <TlInit+0x50>)
 8005820:	f000 faf2 	bl	8005e08 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005824:	2001      	movs	r0, #1
 8005826:	f000 f825 	bl	8005874 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <TlInit+0x54>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <TlInit+0x58>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <TlInit+0x5c>)
 800583e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <TlInit+0x60>)
 8005842:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <TlInit+0x58>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f107 020c 	add.w	r2, r7, #12
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
  }

  return;
 8005850:	bf00      	nop
 8005852:	bf00      	nop
}
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2000006c 	.word	0x2000006c
 8005860:	20000060 	.word	0x20000060
 8005864:	20000070 	.word	0x20000070
 8005868:	200001c4 	.word	0x200001c4
 800586c:	080058c5 	.word	0x080058c5
 8005870:	080058dd 	.word	0x080058dd

08005874 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <Cmd_SetStatus+0x48>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <Cmd_SetStatus+0x48>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2000      	movs	r0, #0
 8005892:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005894:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <Cmd_SetStatus+0x4c>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800589a:	e00b      	b.n	80058b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <Cmd_SetStatus+0x4c>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <Cmd_SetStatus+0x48>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80058aa:	4b04      	ldr	r3, [pc, #16]	; (80058bc <Cmd_SetStatus+0x48>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2001      	movs	r0, #1
 80058b0:	4798      	blx	r3
  return;
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
}
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200001e4 	.word	0x200001e4
 80058c0:	20000068 	.word	0x20000068

080058c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fa ff82 	bl	80007d6 <shci_cmd_resp_release>

  return;
 80058d2:	bf00      	nop
}
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4805      	ldr	r0, [pc, #20]	; (80058fc <TlUserEvtReceived+0x20>)
 80058e8:	f000 fae6 	bl	8005eb8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80058ec:	4803      	ldr	r0, [pc, #12]	; (80058fc <TlUserEvtReceived+0x20>)
 80058ee:	f7fa ff66 	bl	80007be <shci_notify_asynch_evt>

  return;
 80058f2:	bf00      	nop
}
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000060 	.word	0x20000060

08005900 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <shci_register_io_bus+0x20>)
 800590c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a04      	ldr	r2, [pc, #16]	; (8005924 <shci_register_io_bus+0x24>)
 8005912:	611a      	str	r2, [r3, #16]

  return;
 8005914:	bf00      	nop
}
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	08005abd 	.word	0x08005abd
 8005924:	08005b11 	.word	0x08005b11

08005928 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800592c:	f001 f868 	bl	8006a00 <HW_IPCC_Enable>

  return;
 8005930:	bf00      	nop
}
 8005932:	bd80      	pop	{r7, pc}

08005934 <TL_Init>:


void TL_Init( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <TL_Init+0x48>)
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TL_Init+0x4c>)
 800593c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <TL_Init+0x48>)
 8005940:	4a10      	ldr	r2, [pc, #64]	; (8005984 <TL_Init+0x50>)
 8005942:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005944:	4b0d      	ldr	r3, [pc, #52]	; (800597c <TL_Init+0x48>)
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TL_Init+0x54>)
 8005948:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <TL_Init+0x48>)
 800594c:	4a0f      	ldr	r2, [pc, #60]	; (800598c <TL_Init+0x58>)
 800594e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <TL_Init+0x48>)
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <TL_Init+0x5c>)
 8005954:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <TL_Init+0x48>)
 8005958:	4a0e      	ldr	r2, [pc, #56]	; (8005994 <TL_Init+0x60>)
 800595a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <TL_Init+0x48>)
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <TL_Init+0x64>)
 8005960:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <TL_Init+0x48>)
 8005964:	4a0d      	ldr	r2, [pc, #52]	; (800599c <TL_Init+0x68>)
 8005966:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <TL_Init+0x48>)
 800596a:	4a0d      	ldr	r2, [pc, #52]	; (80059a0 <TL_Init+0x6c>)
 800596c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <TL_Init+0x48>)
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <TL_Init+0x70>)
 8005972:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005974:	f001 f858 	bl	8006a28 <HW_IPCC_Init>

  return;
 8005978:	bf00      	nop
}
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20030000 	.word	0x20030000
 8005980:	20030028 	.word	0x20030028
 8005984:	20030048 	.word	0x20030048
 8005988:	20030058 	.word	0x20030058
 800598c:	20030068 	.word	0x20030068
 8005990:	20030070 	.word	0x20030070
 8005994:	20030078 	.word	0x20030078
 8005998:	20030080 	.word	0x20030080
 800599c:	2003009c 	.word	0x2003009c
 80059a0:	200300a0 	.word	0x200300a0
 80059a4:	200300ac 	.word	0x200300ac

080059a8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80059b4:	4811      	ldr	r0, [pc, #68]	; (80059fc <TL_BLE_Init+0x54>)
 80059b6:	f000 fa27 	bl	8005e08 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <TL_BLE_Init+0x58>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <TL_BLE_Init+0x5c>)
 80059d4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <TL_BLE_Init+0x54>)
 80059da:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80059dc:	f001 f83a 	bl	8006a54 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <TL_BLE_Init+0x60>)
 80059e6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <TL_BLE_Init+0x64>)
 80059ee:	6013      	str	r3, [r2, #0]

  return 0;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200300c8 	.word	0x200300c8
 8005a00:	20030000 	.word	0x20030000
 8005a04:	20030a58 	.word	0x20030a58
 8005a08:	200001f4 	.word	0x200001f4
 8005a0c:	200001f8 	.word	0x200001f8

08005a10 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <TL_BLE_SendCmd+0x34>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <TL_BLE_SendCmd+0x34>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 f96c 	bl	8005d0c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005a34:	f001 f818 	bl	8006a68 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20030000 	.word	0x20030000

08005a48 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005a4e:	e01c      	b.n	8005a8a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4812      	ldr	r0, [pc, #72]	; (8005aa0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005a56:	f000 fa76 	bl	8005f46 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7a5b      	ldrb	r3, [r3, #9]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d003      	beq.n	8005a6a <HW_IPCC_BLE_RxEvtNot+0x22>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7a5b      	ldrb	r3, [r3, #9]
 8005a66:	2b0e      	cmp	r3, #14
 8005a68:	d105      	bne.n	8005a76 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2002      	movs	r0, #2
 8005a70:	f000 f94c 	bl	8005d0c <OutputDbgTrace>
 8005a74:	e004      	b.n	8005a80 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	2003      	movs	r0, #3
 8005a7c:	f000 f946 	bl	8005d0c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4610      	mov	r0, r2
 8005a88:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005a8c:	f000 f9cc 	bl	8005e28 <LST_is_empty>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0dc      	beq.n	8005a50 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005a96:	bf00      	nop
}
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200300c8 	.word	0x200300c8
 8005aa4:	200001f4 	.word	0x200001f4

08005aa8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005aac:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4798      	blx	r3

  return;
 8005ab2:	bf00      	nop
}
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200001f8 	.word	0x200001f8

08005abc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005ac8:	480d      	ldr	r0, [pc, #52]	; (8005b00 <TL_SYS_Init+0x44>)
 8005aca:	f000 f99d 	bl	8005e08 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <TL_SYS_Init+0x48>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <TL_SYS_Init+0x44>)
 8005ae0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005ae2:	f000 ffe3 	bl	8006aac <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <TL_SYS_Init+0x4c>)
 8005aec:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <TL_SYS_Init+0x50>)
 8005af4:	6013      	str	r3, [r2, #0]

  return 0;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200300d0 	.word	0x200300d0
 8005b04:	20030000 	.word	0x20030000
 8005b08:	200001fc 	.word	0x200001fc
 8005b0c:	20000200 	.word	0x20000200

08005b10 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <TL_SYS_SendCmd+0x34>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2210      	movs	r2, #16
 8005b24:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <TL_SYS_SendCmd+0x34>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	2004      	movs	r0, #4
 8005b30:	f000 f8ec 	bl	8005d0c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005b34:	f000 ffc4 	bl	8006ac0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20030000 	.word	0x20030000

08005b48 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	2005      	movs	r0, #5
 8005b56:	f000 f8d9 	bl	8005d0c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a03      	ldr	r2, [pc, #12]	; (8005b6c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005b60:	68d2      	ldr	r2, [r2, #12]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3

  return;
 8005b68:	bf00      	nop
}
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20030000 	.word	0x20030000
 8005b70:	200001fc 	.word	0x200001fc

08005b74 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005b7a:	e00e      	b.n	8005b9a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005b7c:	1d3b      	adds	r3, r7, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	480b      	ldr	r0, [pc, #44]	; (8005bb0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005b82:	f000 f9e0 	bl	8005f46 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	2006      	movs	r0, #6
 8005b8c:	f000 f8be 	bl	8005d0c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005b90:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <HW_IPCC_SYS_EvtNot+0x40>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4610      	mov	r0, r2
 8005b98:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005b9a:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005b9c:	f000 f944 	bl	8005e28 <LST_is_empty>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ea      	beq.n	8005b7c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005ba6:	bf00      	nop
}
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200300d0 	.word	0x200300d0
 8005bb4:	20000200 	.word	0x20000200

08005bb8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005bc0:	4817      	ldr	r0, [pc, #92]	; (8005c20 <TL_MM_Init+0x68>)
 8005bc2:	f000 f921 	bl	8005e08 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005bc6:	4817      	ldr	r0, [pc, #92]	; (8005c24 <TL_MM_Init+0x6c>)
 8005bc8:	f000 f91e 	bl	8005e08 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <TL_MM_Init+0x70>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <TL_MM_Init+0x74>)
 8005bd2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <TL_MM_Init+0x74>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6892      	ldr	r2, [r2, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <TL_MM_Init+0x74>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68d2      	ldr	r2, [r2, #12]
 8005be6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <TL_MM_Init+0x74>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <TL_MM_Init+0x68>)
 8005bee:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <TL_MM_Init+0x74>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <TL_MM_Init+0x74>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6852      	ldr	r2, [r2, #4]
 8005c02:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <TL_MM_Init+0x74>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6912      	ldr	r2, [r2, #16]
 8005c0c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <TL_MM_Init+0x74>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6952      	ldr	r2, [r2, #20]
 8005c16:	619a      	str	r2, [r3, #24]

  return;
 8005c18:	bf00      	nop
}
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200300b8 	.word	0x200300b8
 8005c24:	200001ec 	.word	0x200001ec
 8005c28:	20030000 	.word	0x20030000
 8005c2c:	20000204 	.word	0x20000204

08005c30 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4807      	ldr	r0, [pc, #28]	; (8005c58 <TL_MM_EvtDone+0x28>)
 8005c3c:	f000 f93c 	bl	8005eb8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	2000      	movs	r0, #0
 8005c44:	f000 f862 	bl	8005d0c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005c48:	4804      	ldr	r0, [pc, #16]	; (8005c5c <TL_MM_EvtDone+0x2c>)
 8005c4a:	f000 ff5f 	bl	8006b0c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005c4e:	bf00      	nop
}
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200001ec 	.word	0x200001ec
 8005c5c:	08005c61 	.word	0x08005c61

08005c60 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005c66:	e00c      	b.n	8005c82 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	480a      	ldr	r0, [pc, #40]	; (8005c98 <SendFreeBuf+0x38>)
 8005c6e:	f000 f96a 	bl	8005f46 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <SendFreeBuf+0x3c>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f91b 	bl	8005eb8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005c82:	4805      	ldr	r0, [pc, #20]	; (8005c98 <SendFreeBuf+0x38>)
 8005c84:	f000 f8d0 	bl	8005e28 <LST_is_empty>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0ec      	beq.n	8005c68 <SendFreeBuf+0x8>
  }

  return;
 8005c8e:	bf00      	nop
}
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	200001ec 	.word	0x200001ec
 8005c9c:	20030000 	.word	0x20030000

08005ca0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005ca4:	4805      	ldr	r0, [pc, #20]	; (8005cbc <TL_TRACES_Init+0x1c>)
 8005ca6:	f000 f8af 	bl	8005e08 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <TL_TRACES_Init+0x20>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	4a03      	ldr	r2, [pc, #12]	; (8005cbc <TL_TRACES_Init+0x1c>)
 8005cb0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005cb2:	f000 ff61 	bl	8006b78 <HW_IPCC_TRACES_Init>

  return;
 8005cb6:	bf00      	nop
}
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200300c0 	.word	0x200300c0
 8005cc0:	20030000 	.word	0x20030000

08005cc4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005cca:	e008      	b.n	8005cde <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005cd2:	f000 f938 	bl	8005f46 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f80d 	bl	8005cf8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005cde:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005ce0:	f000 f8a2 	bl	8005e28 <LST_is_empty>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005cea:	bf00      	nop
}
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200300c0 	.word	0x200300c0

08005cf8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b06      	cmp	r3, #6
 8005d1c:	d845      	bhi.n	8005daa <OutputDbgTrace+0x9e>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <OutputDbgTrace+0x18>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d6b 	.word	0x08005d6b
 8005d30:	08005d7f 	.word	0x08005d7f
 8005d34:	08005d8b 	.word	0x08005d8b
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d9f 	.word	0x08005d9f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	7a5b      	ldrb	r3, [r3, #9]
 8005d48:	2bff      	cmp	r3, #255	; 0xff
 8005d4a:	d005      	beq.n	8005d58 <OutputDbgTrace+0x4c>
 8005d4c:	2bff      	cmp	r3, #255	; 0xff
 8005d4e:	dc05      	bgt.n	8005d5c <OutputDbgTrace+0x50>
 8005d50:	2b0e      	cmp	r3, #14
 8005d52:	d005      	beq.n	8005d60 <OutputDbgTrace+0x54>
 8005d54:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005d56:	e001      	b.n	8005d5c <OutputDbgTrace+0x50>
          break;
 8005d58:	bf00      	nop
 8005d5a:	e027      	b.n	8005dac <OutputDbgTrace+0xa0>
          break;
 8005d5c:	bf00      	nop
 8005d5e:	e025      	b.n	8005dac <OutputDbgTrace+0xa0>
          break;
 8005d60:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8005d62:	e023      	b.n	8005dac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005d68:	e020      	b.n	8005dac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	7a5b      	ldrb	r3, [r3, #9]
 8005d72:	2b0e      	cmp	r3, #14
 8005d74:	d001      	beq.n	8005d7a <OutputDbgTrace+0x6e>
 8005d76:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005d78:	e000      	b.n	8005d7c <OutputDbgTrace+0x70>
          break;
 8005d7a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005d7c:	e016      	b.n	8005dac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	7a5b      	ldrb	r3, [r3, #9]
 8005d86:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005d88:	e010      	b.n	8005dac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005d8e:	e00d      	b.n	8005dac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	7a5b      	ldrb	r3, [r3, #9]
 8005d98:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005d9a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005d9c:	e006      	b.n	8005dac <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	7a5b      	ldrb	r3, [r3, #9]
 8005da6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005da8:	e000      	b.n	8005dac <OutputDbgTrace+0xa0>

    default:
      break;
 8005daa:	bf00      	nop
  }

  return;
 8005dac:	bf00      	nop
}
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <OTP_Read+0x48>)
 8005dc4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005dc6:	e002      	b.n	8005dce <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3b08      	subs	r3, #8
 8005dcc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	79fa      	ldrb	r2, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d003      	beq.n	8005de2 <OTP_Read+0x2a>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <OTP_Read+0x4c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d1f2      	bne.n	8005dc8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3307      	adds	r3, #7
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	79fa      	ldrb	r2, [r7, #7]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d001      	beq.n	8005df2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	1fff73f8 	.word	0x1fff73f8
 8005e04:	1fff7000 	.word	0x1fff7000

08005e08 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e30:	f3ef 8310 	mrs	r3, PRIMASK
 8005e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e3a:	b672      	cpsid	i
}
 8005e3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d102      	bne.n	8005e4e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]
 8005e4c:	e001      	b.n	8005e52 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f383 8810 	msr	PRIMASK, r3
}
 8005e5c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e76:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e80:	b672      	cpsid	i
}
 8005e82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	605a      	str	r2, [r3, #4]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
}
 8005ece:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f10:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f16:	b672      	cpsid	i
}
 8005f18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f383 8810 	msr	PRIMASK, r3
}
 8005f38:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f5a:	b672      	cpsid	i
}
 8005f5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ffca 	bl	8005f04 <LST_remove_node>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f383 8810 	msr	PRIMASK, r3
}
 8005f7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005f7c:	bf00      	nop
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <LL_FLASH_GetUDN+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	1fff7580 	.word	0x1fff7580

08005f9c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <LL_FLASH_GetDeviceID+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	1fff7584 	.word	0x1fff7584

08005fb4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <LL_FLASH_GetSTCompanyID+0x14>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	1fff7584 	.word	0x1fff7584

08005fcc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8005fcc:	b5b0      	push	{r4, r5, r7, lr}
 8005fce:	b090      	sub	sp, #64	; 0x40
 8005fd0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005fd2:	2392      	movs	r3, #146	; 0x92
 8005fd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8005fd8:	4b25      	ldr	r3, [pc, #148]	; (8006070 <APP_BLE_Init+0xa4>)
 8005fda:	1d3c      	adds	r4, r7, #4
 8005fdc:	461d      	mov	r5, r3
 8005fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fee:	c403      	stmia	r4!, {r0, r1}
 8005ff0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8005ff2:	f000 f905 	bl	8006200 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	2002      	movs	r0, #2
 8005ffa:	f000 fde5 	bl	8006bc8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <APP_BLE_Init+0xa8>)
 8006000:	2100      	movs	r1, #0
 8006002:	2002      	movs	r0, #2
 8006004:	f000 ff0c 	bl	8006e20 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff f8c6 	bl	800519c <SHCI_C2_BLE_Init>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8006016:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800601e:	f7fb fb1e 	bl	800165e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006022:	f000 f903 	bl	800622c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006026:	f7ff f813 	bl	8005050 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <APP_BLE_Init+0xac>)
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <APP_BLE_Init+0xac>)
 8006034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006038:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <APP_BLE_Init+0xb0>)
 800603c:	2100      	movs	r1, #0
 800603e:	2001      	movs	r0, #1
 8006040:	f000 feee 	bl	8006e20 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8006044:	2006      	movs	r0, #6
 8006046:	f7fe fe76 	bl	8004d36 <aci_hal_set_radio_activity_mask>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006050:	f000 fa9b 	bl	800658a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006054:	4b08      	ldr	r3, [pc, #32]	; (8006078 <APP_BLE_Init+0xac>)
 8006056:	2200      	movs	r2, #0
 8006058:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <APP_BLE_Init+0xac>)
 800605c:	2200      	movs	r2, #0
 800605e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8006060:	2001      	movs	r0, #1
 8006062:	f000 f997 	bl	8006394 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006066:	bf00      	nop
}
 8006068:	3740      	adds	r7, #64	; 0x40
 800606a:	46bd      	mov	sp, r7
 800606c:	bdb0      	pop	{r4, r5, r7, pc}
 800606e:	bf00      	nop
 8006070:	08007178 	.word	0x08007178
 8006074:	080053b9 	.word	0x080053b9
 8006078:	20000210 	.word	0x20000210
 800607c:	0800647d 	.word	0x0800647d

08006080 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8006088:	2392      	movs	r3, #146	; 0x92
 800608a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3301      	adds	r3, #1
 8006092:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2bff      	cmp	r3, #255	; 0xff
 800609a:	d053      	beq.n	8006144 <SVCCTL_App_Notification+0xc4>
 800609c:	2bff      	cmp	r3, #255	; 0xff
 800609e:	f300 80a1 	bgt.w	80061e4 <SVCCTL_App_Notification+0x164>
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d002      	beq.n	80060ac <SVCCTL_App_Notification+0x2c>
 80060a6:	2b3e      	cmp	r3, #62	; 0x3e
 80060a8:	d020      	beq.n	80060ec <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80060aa:	e09b      	b.n	80061e4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	3302      	adds	r3, #2
 80060b0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	4b4e      	ldr	r3, [pc, #312]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80060bc:	8adb      	ldrh	r3, [r3, #22]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d106      	bne.n	80060d0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80060c2:	4b4c      	ldr	r3, [pc, #304]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80060c8:	4b4a      	ldr	r3, [pc, #296]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80060d0:	2001      	movs	r0, #1
 80060d2:	f000 f95f 	bl	8006394 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80060d6:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80060dc:	4b45      	ldr	r3, [pc, #276]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80060de:	8ada      	ldrh	r2, [r3, #22]
 80060e0:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 80060e2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80060e4:	4844      	ldr	r0, [pc, #272]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 80060e6:	f000 fa3c 	bl	8006562 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80060ea:	e07e      	b.n	80061ea <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	3302      	adds	r3, #2
 80060f0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <SVCCTL_App_Notification+0x7e>
 80060fa:	2b03      	cmp	r3, #3
          break;
 80060fc:	e021      	b.n	8006142 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006104:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 8006106:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800610a:	2b04      	cmp	r3, #4
 800610c:	d104      	bne.n	8006118 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 8006110:	2206      	movs	r2, #6
 8006112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8006116:	e003      	b.n	8006120 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 800611a:	2205      	movs	r2, #5
 800611c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 800612a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800612c:	4b32      	ldr	r3, [pc, #200]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006132:	4b30      	ldr	r3, [pc, #192]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 8006134:	8ada      	ldrh	r2, [r3, #22]
 8006136:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 8006138:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800613a:	482f      	ldr	r0, [pc, #188]	; (80061f8 <SVCCTL_App_Notification+0x178>)
 800613c:	f000 fa11 	bl	8006562 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006140:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006142:	e052      	b.n	80061ea <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	3302      	adds	r3, #2
 8006148:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006154:	d040      	beq.n	80061d8 <SVCCTL_App_Notification+0x158>
 8006156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615a:	dc45      	bgt.n	80061e8 <SVCCTL_App_Notification+0x168>
 800615c:	2b04      	cmp	r3, #4
 800615e:	d03d      	beq.n	80061dc <SVCCTL_App_Notification+0x15c>
 8006160:	2b04      	cmp	r3, #4
 8006162:	db41      	blt.n	80061e8 <SVCCTL_App_Notification+0x168>
 8006164:	f240 420a 	movw	r2, #1034	; 0x40a
 8006168:	4293      	cmp	r3, r2
 800616a:	dc3d      	bgt.n	80061e8 <SVCCTL_App_Notification+0x168>
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	dd3a      	ble.n	80061e8 <SVCCTL_App_Notification+0x168>
 8006172:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8006176:	2b09      	cmp	r3, #9
 8006178:	d836      	bhi.n	80061e8 <SVCCTL_App_Notification+0x168>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <SVCCTL_App_Notification+0x100>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061d1 	.word	0x080061d1
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061e9 	.word	0x080061e9
 800618c:	080061e9 	.word	0x080061e9
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061e9 	.word	0x080061e9
 8006198:	080061e1 	.word	0x080061e1
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061e1 	.word	0x080061e1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80061aa:	8adb      	ldrh	r3, [r3, #22]
 80061ac:	4913      	ldr	r1, [pc, #76]	; (80061fc <SVCCTL_App_Notification+0x17c>)
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe f818 	bl	80041e4 <aci_gap_pass_key_resp>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80061ba:	e012      	b.n	80061e2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <SVCCTL_App_Notification+0x174>)
 80061be:	8adb      	ldrh	r3, [r3, #22]
 80061c0:	2101      	movs	r1, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe f9b8 	bl	8004538 <aci_gap_numeric_comparison_value_confirm_yesno>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80061ce:	e008      	b.n	80061e2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3302      	adds	r3, #2
 80061d4:	61bb      	str	r3, [r7, #24]
          break;
 80061d6:	e004      	b.n	80061e2 <SVCCTL_App_Notification+0x162>
          break;
 80061d8:	bf00      	nop
 80061da:	e005      	b.n	80061e8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80061dc:	bf00      	nop
 80061de:	e003      	b.n	80061e8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80061e0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80061e2:	e001      	b.n	80061e8 <SVCCTL_App_Notification+0x168>
      break;
 80061e4:	bf00      	nop
 80061e6:	e000      	b.n	80061ea <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80061e8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80061ea:	2301      	movs	r3, #1
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3728      	adds	r7, #40	; 0x28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000210 	.word	0x20000210
 80061f8:	20000294 	.word	0x20000294
 80061fc:	0001b207 	.word	0x0001b207

08006200 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <Ble_Tl_Init+0x20>)
 8006208:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <Ble_Tl_Init+0x24>)
 800620c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800620e:	463b      	mov	r3, r7
 8006210:	4619      	mov	r1, r3
 8006212:	4805      	ldr	r0, [pc, #20]	; (8006228 <Ble_Tl_Init+0x28>)
 8006214:	f7ff f8b4 	bl	8005380 <hci_init>

  return;
 8006218:	bf00      	nop
}
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	200300d8 	.word	0x200300d8
 8006224:	0800652d 	.word	0x0800652d
 8006228:	080064f5 	.word	0x080064f5

0800622c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	b08d      	sub	sp, #52	; 0x34
 8006230:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006232:	2300      	movs	r3, #0
 8006234:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006236:	2392      	movs	r3, #146	; 0x92
 8006238:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800623a:	f7fe fdd0 	bl	8004dde <hci_reset>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006242:	f000 f8d7 	bl	80063f4 <BleGetBdAddress>
 8006246:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	2106      	movs	r1, #6
 800624c:	2000      	movs	r0, #0
 800624e:	f7fe fc86 	bl	8004b5e <aci_hal_write_config_data>
 8006252:	4603      	mov	r3, r0
 8006254:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006256:	4a4a      	ldr	r2, [pc, #296]	; (8006380 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8006258:	2110      	movs	r1, #16
 800625a:	2018      	movs	r0, #24
 800625c:	f7fe fc7f 	bl	8004b5e <aci_hal_write_config_data>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006264:	4a47      	ldr	r2, [pc, #284]	; (8006384 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8006266:	2110      	movs	r1, #16
 8006268:	2008      	movs	r0, #8
 800626a:	f7fe fc78 	bl	8004b5e <aci_hal_write_config_data>
 800626e:	4603      	mov	r3, r0
 8006270:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006272:	2118      	movs	r1, #24
 8006274:	2001      	movs	r0, #1
 8006276:	f7fe fcf7 	bl	8004c68 <aci_hal_set_tx_power_level>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800627e:	f7fe f9c2 	bl	8004606 <aci_gatt_init>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01f      	beq.n	80062d8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8006298:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800629a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800629c:	1dba      	adds	r2, r7, #6
 800629e:	7bf8      	ldrb	r0, [r7, #15]
 80062a0:	1cbb      	adds	r3, r7, #2
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	2208      	movs	r2, #8
 80062ac:	2100      	movs	r1, #0
 80062ae:	f7fe f800 	bl	80042b2 <aci_gap_init>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80062b6:	88fc      	ldrh	r4, [r7, #6]
 80062b8:	88bd      	ldrh	r5, [r7, #4]
 80062ba:	68b8      	ldr	r0, [r7, #8]
 80062bc:	f7f9 ff5e 	bl	800017c <strlen>
 80062c0:	4603      	mov	r3, r0
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	4629      	mov	r1, r5
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7fe fb9c 	bl	8004a0c <aci_gatt_update_char_value>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80062d8:	88f8      	ldrh	r0, [r7, #6]
 80062da:	8879      	ldrh	r1, [r7, #2]
 80062dc:	463b      	mov	r3, r7
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2302      	movs	r3, #2
 80062e2:	2200      	movs	r2, #0
 80062e4:	f7fe fb92 	bl	8004a0c <aci_gatt_update_char_value>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80062ec:	2202      	movs	r2, #2
 80062ee:	2102      	movs	r1, #2
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7fe fd98 	bl	8004e26 <hci_le_set_default_phy>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006300:	4b22      	ldr	r3, [pc, #136]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fd fe55 	bl	8003fb4 <aci_gap_set_io_capability>
 800630a:	4603      	mov	r3, r0
 800630c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800630e:	4b1f      	ldr	r3, [pc, #124]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006310:	2201      	movs	r2, #1
 8006312:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006314:	4b1d      	ldr	r3, [pc, #116]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006316:	2208      	movs	r2, #8
 8006318:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800631a:	4b1c      	ldr	r3, [pc, #112]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800631c:	2210      	movs	r2, #16
 800631e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006320:	4b1a      	ldr	r3, [pc, #104]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006322:	2200      	movs	r2, #0
 8006324:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006326:	4b19      	ldr	r3, [pc, #100]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006328:	4a19      	ldr	r2, [pc, #100]	; (8006390 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800632a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800632c:	4b17      	ldr	r3, [pc, #92]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800632e:	2200      	movs	r2, #0
 8006330:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006332:	4b16      	ldr	r3, [pc, #88]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006334:	789c      	ldrb	r4, [r3, #2]
 8006336:	4b15      	ldr	r3, [pc, #84]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006338:	785d      	ldrb	r5, [r3, #1]
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800633c:	791b      	ldrb	r3, [r3, #4]
 800633e:	4a13      	ldr	r2, [pc, #76]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006340:	7952      	ldrb	r2, [r2, #5]
 8006342:	4912      	ldr	r1, [pc, #72]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006344:	78c9      	ldrb	r1, [r1, #3]
 8006346:	4811      	ldr	r0, [pc, #68]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006348:	6880      	ldr	r0, [r0, #8]
 800634a:	2600      	movs	r6, #0
 800634c:	9604      	str	r6, [sp, #16]
 800634e:	9003      	str	r0, [sp, #12]
 8006350:	9102      	str	r1, [sp, #8]
 8006352:	9201      	str	r2, [sp, #4]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	2201      	movs	r2, #1
 800635a:	4629      	mov	r1, r5
 800635c:	4620      	mov	r0, r4
 800635e:	f7fd fe7d 	bl	800405c <aci_gap_set_authentication_requirement>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006368:	789b      	ldrb	r3, [r3, #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800636e:	f7fe f8bf 	bl	80044f0 <aci_gap_configure_filter_accept_list>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637e:	bf00      	nop
 8006380:	08007378 	.word	0x08007378
 8006384:	08007388 	.word	0x08007388
 8006388:	080071b4 	.word	0x080071b4
 800638c:	20000210 	.word	0x20000210
 8006390:	0001b207 	.word	0x0001b207

08006394 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	; 0x30
 8006398:	af08      	add	r7, sp, #32
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800639e:	2392      	movs	r3, #146	; 0x92
 80063a0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <Adv_Request+0x58>)
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80063aa:	2300      	movs	r3, #0
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9303      	str	r3, [sp, #12]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	2300      	movs	r3, #0
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	2300      	movs	r3, #0
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	22a0      	movs	r2, #160	; 0xa0
 80063ca:	2180      	movs	r1, #128	; 0x80
 80063cc:	2000      	movs	r0, #0
 80063ce:	f7fd fcf7 	bl	8003dc0 <aci_gap_set_discoverable>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80063d6:	4906      	ldr	r1, [pc, #24]	; (80063f0 <Adv_Request+0x5c>)
 80063d8:	200b      	movs	r0, #11
 80063da:	f7fe f817 	bl	800440c <aci_gap_update_adv_data>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80063e2:	bf00      	nop
}
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000210 	.word	0x20000210
 80063f0:	20000014 	.word	0x20000014

080063f4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80063fa:	f7ff fdc3 	bl	8005f84 <LL_FLASH_GetUDN>
 80063fe:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d023      	beq.n	8006450 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006408:	f7ff fdd4 	bl	8005fb4 <LL_FLASH_GetSTCompanyID>
 800640c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800640e:	f7ff fdc5 	bl	8005f9c <LL_FLASH_GetDeviceID>
 8006412:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <BleGetBdAddress+0x80>)
 800641a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <BleGetBdAddress+0x80>)
 8006424:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <BleGetBdAddress+0x80>)
 800642c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <BleGetBdAddress+0x80>)
 8006434:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0a1b      	lsrs	r3, r3, #8
 800643a:	b2da      	uxtb	r2, r3
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <BleGetBdAddress+0x80>)
 800643e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	0c1b      	lsrs	r3, r3, #16
 8006444:	b2da      	uxtb	r2, r3
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <BleGetBdAddress+0x80>)
 8006448:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800644a:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <BleGetBdAddress+0x80>)
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e00b      	b.n	8006468 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006450:	2000      	movs	r0, #0
 8006452:	f7ff fcb1 	bl	8005db8 <OTP_Read>
 8006456:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e001      	b.n	8006468 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <BleGetBdAddress+0x84>)
 8006466:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006468:	697b      	ldr	r3, [r7, #20]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000208 	.word	0x20000208
 8006478:	08007370 	.word	0x08007370

0800647c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006482:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <Adv_Cancel+0x30>)
 8006484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006488:	2b05      	cmp	r3, #5
 800648a:	d00a      	beq.n	80064a2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800648c:	2392      	movs	r3, #146	; 0x92
 800648e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8006490:	f7fd fc72 	bl	8003d78 <aci_gap_set_non_discoverable>
 8006494:	4603      	mov	r3, r0
 8006496:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <Adv_Cancel+0x30>)
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
}
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000210 	.word	0x20000210

080064b0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80064b8:	2100      	movs	r1, #0
 80064ba:	2002      	movs	r0, #2
 80064bc:	f000 fcd2 	bl	8006e64 <UTIL_SEQ_SetTask>

  return;
 80064c0:	bf00      	nop
}
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f000 fd33 	bl	8006f3c <UTIL_SEQ_SetEvt>

  return;
 80064d6:	bf00      	nop
}
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80064e6:	2001      	movs	r0, #1
 80064e8:	f000 fd48 	bl	8006f7c <UTIL_SEQ_WaitEvt>

  return;
 80064ec:	bf00      	nop
}
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	3308      	adds	r3, #8
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fdf4 	bl	80050f4 <SVCCTL_UserEvtRx>
 800650c:	4603      	mov	r3, r0
 800650e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800651c:	e003      	b.n	8006526 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
  return;
 8006524:	bf00      	nop
}
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <BLE_StatusNot+0x16>
 800653c:	2b01      	cmp	r3, #1
 800653e:	d006      	beq.n	800654e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006540:	e00b      	b.n	800655a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006542:	2303      	movs	r3, #3
 8006544:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fcb8 	bl	8006ebc <UTIL_SEQ_PauseTask>
      break;
 800654c:	e005      	b.n	800655a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800654e:	2303      	movs	r3, #3
 8006550:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fcd2 	bl	8006efc <UTIL_SEQ_ResumeTask>
      break;
 8006558:	bf00      	nop
  }

  return;
 800655a:	bf00      	nop
}
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <Custom_APP_Notification+0x16>
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006576:	e002      	b.n	800657e <Custom_APP_Notification+0x1c>
      break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <Custom_APP_Notification+0x1c>
      break;
 800657c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800657e:	bf00      	nop
}
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800658a:	b480      	push	{r7}
 800658c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800658e:	bf00      	nop
}
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006598:	b480      	push	{r7}
 800659a:	b08b      	sub	sp, #44	; 0x2c
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3301      	adds	r3, #1
 80065aa:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2bff      	cmp	r3, #255	; 0xff
 80065b2:	d12b      	bne.n	800660c <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	3302      	adds	r3, #2
 80065b8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f640 4214 	movw	r2, #3092	; 0xc14
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d01b      	beq.n	8006600 <Custom_STM_Event_Handler+0x68>
 80065c8:	f640 4214 	movw	r2, #3092	; 0xc14
 80065cc:	4293      	cmp	r3, r2
 80065ce:	dc19      	bgt.n	8006604 <Custom_STM_Event_Handler+0x6c>
 80065d0:	f640 4201 	movw	r2, #3073	; 0xc01
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <Custom_STM_Event_Handler+0x48>
 80065d8:	f640 4213 	movw	r2, #3091	; 0xc13
 80065dc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80065de:	e014      	b.n	800660a <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3302      	adds	r3, #2
 80065e4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	885b      	ldrh	r3, [r3, #2]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <Custom_STM_Event_Handler+0x88>)
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	3301      	adds	r3, #1
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d107      	bne.n	8006608 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80065fe:	e003      	b.n	8006608 <Custom_STM_Event_Handler+0x70>
          break;
 8006600:	bf00      	nop
 8006602:	e004      	b.n	800660e <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <Custom_STM_Event_Handler+0x76>
          break;
 8006608:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800660a:	e000      	b.n	800660e <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800660c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800660e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8006612:	4618      	mov	r0, r3
 8006614:	372c      	adds	r7, #44	; 0x2c
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000298 	.word	0x20000298

08006624 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08c      	sub	sp, #48	; 0x30
 8006628:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800662a:	2392      	movs	r3, #146	; 0x92
 800662c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800662e:	4835      	ldr	r0, [pc, #212]	; (8006704 <SVCCTL_InitCustomSvc+0xe0>)
 8006630:	f7fe fd46 	bl	80050c0 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8006634:	2303      	movs	r3, #3
 8006636:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8006638:	238f      	movs	r3, #143	; 0x8f
 800663a:	713b      	strb	r3, [r7, #4]
 800663c:	23e5      	movs	r3, #229	; 0xe5
 800663e:	717b      	strb	r3, [r7, #5]
 8006640:	23b3      	movs	r3, #179	; 0xb3
 8006642:	71bb      	strb	r3, [r7, #6]
 8006644:	23d5      	movs	r3, #213	; 0xd5
 8006646:	71fb      	strb	r3, [r7, #7]
 8006648:	232e      	movs	r3, #46	; 0x2e
 800664a:	723b      	strb	r3, [r7, #8]
 800664c:	237f      	movs	r3, #127	; 0x7f
 800664e:	727b      	strb	r3, [r7, #9]
 8006650:	234a      	movs	r3, #74	; 0x4a
 8006652:	72bb      	strb	r3, [r7, #10]
 8006654:	2398      	movs	r3, #152	; 0x98
 8006656:	72fb      	strb	r3, [r7, #11]
 8006658:	232a      	movs	r3, #42	; 0x2a
 800665a:	733b      	strb	r3, [r7, #12]
 800665c:	2348      	movs	r3, #72	; 0x48
 800665e:	737b      	strb	r3, [r7, #13]
 8006660:	237a      	movs	r3, #122	; 0x7a
 8006662:	73bb      	strb	r3, [r7, #14]
 8006664:	23cc      	movs	r3, #204	; 0xcc
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	2300      	movs	r3, #0
 800666a:	743b      	strb	r3, [r7, #16]
 800666c:	2300      	movs	r3, #0
 800666e:	747b      	strb	r3, [r7, #17]
 8006670:	2300      	movs	r3, #0
 8006672:	74bb      	strb	r3, [r7, #18]
 8006674:	2300      	movs	r3, #0
 8006676:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8006678:	7dbb      	ldrb	r3, [r7, #22]
 800667a:	1d39      	adds	r1, r7, #4
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <SVCCTL_InitCustomSvc+0xe4>)
 800667e:	9200      	str	r2, [sp, #0]
 8006680:	2201      	movs	r2, #1
 8006682:	2002      	movs	r0, #2
 8006684:	f7fd ffe4 	bl	8004650 <aci_gatt_add_service>
 8006688:	4603      	mov	r3, r0
 800668a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CharWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 800668c:	2319      	movs	r3, #25
 800668e:	713b      	strb	r3, [r7, #4]
 8006690:	23ed      	movs	r3, #237	; 0xed
 8006692:	717b      	strb	r3, [r7, #5]
 8006694:	2382      	movs	r3, #130	; 0x82
 8006696:	71bb      	strb	r3, [r7, #6]
 8006698:	23ae      	movs	r3, #174	; 0xae
 800669a:	71fb      	strb	r3, [r7, #7]
 800669c:	23ed      	movs	r3, #237	; 0xed
 800669e:	723b      	strb	r3, [r7, #8]
 80066a0:	2321      	movs	r3, #33	; 0x21
 80066a2:	727b      	strb	r3, [r7, #9]
 80066a4:	234c      	movs	r3, #76	; 0x4c
 80066a6:	72bb      	strb	r3, [r7, #10]
 80066a8:	239d      	movs	r3, #157	; 0x9d
 80066aa:	72fb      	strb	r3, [r7, #11]
 80066ac:	2341      	movs	r3, #65	; 0x41
 80066ae:	733b      	strb	r3, [r7, #12]
 80066b0:	2345      	movs	r3, #69	; 0x45
 80066b2:	737b      	strb	r3, [r7, #13]
 80066b4:	2322      	movs	r3, #34	; 0x22
 80066b6:	73bb      	strb	r3, [r7, #14]
 80066b8:	238e      	movs	r3, #142	; 0x8e
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	2300      	movs	r3, #0
 80066be:	743b      	strb	r3, [r7, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	747b      	strb	r3, [r7, #17]
 80066c4:	2300      	movs	r3, #0
 80066c6:	74bb      	strb	r3, [r7, #18]
 80066c8:	2300      	movs	r3, #0
 80066ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <SVCCTL_InitCustomSvc+0xe4>)
 80066ce:	8818      	ldrh	r0, [r3, #0]
 80066d0:	4b0e      	ldr	r3, [pc, #56]	; (800670c <SVCCTL_InitCustomSvc+0xe8>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	1d3a      	adds	r2, r7, #4
 80066d8:	490d      	ldr	r1, [pc, #52]	; (8006710 <SVCCTL_InitCustomSvc+0xec>)
 80066da:	9105      	str	r1, [sp, #20]
 80066dc:	2100      	movs	r1, #0
 80066de:	9104      	str	r1, [sp, #16]
 80066e0:	2110      	movs	r1, #16
 80066e2:	9103      	str	r1, [sp, #12]
 80066e4:	2101      	movs	r1, #1
 80066e6:	9102      	str	r1, [sp, #8]
 80066e8:	2100      	movs	r1, #0
 80066ea:	9101      	str	r1, [sp, #4]
 80066ec:	2108      	movs	r1, #8
 80066ee:	9100      	str	r1, [sp, #0]
 80066f0:	2102      	movs	r1, #2
 80066f2:	f7fe f883 	bl	80047fc <aci_gatt_add_char>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80066fa:	bf00      	nop
}
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08006599 	.word	0x08006599
 8006708:	20000298 	.word	0x20000298
 800670c:	2000001f 	.word	0x2000001f
 8006710:	2000029a 	.word	0x2000029a

08006714 <LL_PWR_EnableBootC2>:
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <LL_PWR_EnableBootC2+0x1c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <LL_PWR_EnableBootC2+0x1c>)
 800671e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006722:	60d3      	str	r3, [r2, #12]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	58000400 	.word	0x58000400

08006734 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800673e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006742:	4905      	ldr	r1, [pc, #20]	; (8006758 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	58000800 	.word	0x58000800

0800675c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006766:	6a1a      	ldr	r2, [r3, #32]
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4313      	orrs	r3, r2
 800676e:	620b      	str	r3, [r1, #32]
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	58000800 	.word	0x58000800

08006780 <LL_AHB3_GRP1_EnableClock>:
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800678e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4313      	orrs	r3, r2
 8006796:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4013      	ands	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067be:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80067c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80067ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80067dc:	68fb      	ldr	r3, [r7, #12]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <LL_C1_IPCC_EnableIT_TXF>:
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <LL_C1_IPCC_EnableIT_RXO>:
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	43db      	mvns	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	605a      	str	r2, [r3, #4]
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	041b      	lsls	r3, r3, #16
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	43db      	mvns	r3, r3
 8006886:	401a      	ands	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	041a      	lsls	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	4013      	ands	r3, r2
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d101      	bne.n	80068ee <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	4013      	ands	r3, r2
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d101      	bne.n	8006918 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800692c:	2102      	movs	r1, #2
 800692e:	4818      	ldr	r0, [pc, #96]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 8006930:	f7ff ffe4 	bl	80068fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HW_IPCC_Rx_Handler+0x24>
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8006946:	f000 f8d5 	bl	8006af4 <HW_IPCC_SYS_EvtHandler>
 800694a:	e01e      	b.n	800698a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800694c:	2101      	movs	r1, #1
 800694e:	4810      	ldr	r0, [pc, #64]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 8006950:	f7ff ffd4 	bl	80068fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HW_IPCC_Rx_Handler+0x44>
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8006966:	f000 f889 	bl	8006a7c <HW_IPCC_BLE_EvtHandler>
 800696a:	e00e      	b.n	800698a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800696c:	2108      	movs	r1, #8
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 8006970:	f7ff ffc4 	bl	80068fc <LL_C2_IPCC_IsActiveFlag_CHx>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HW_IPCC_Rx_Handler+0x64>
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HW_IPCC_Rx_Handler+0x68>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006986:	f000 f901 	bl	8006b8c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800698a:	bf00      	nop
 800698c:	bf00      	nop
}
 800698e:	bd80      	pop	{r7, pc}
 8006990:	58000c00 	.word	0x58000c00

08006994 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006998:	2102      	movs	r1, #2
 800699a:	4818      	ldr	r0, [pc, #96]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 800699c:	f7ff ff99 	bl	80068d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d108      	bne.n	80069b8 <HW_IPCC_Tx_Handler+0x24>
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80069b2:	f000 f893 	bl	8006adc <HW_IPCC_SYS_CmdEvtHandler>
 80069b6:	e01e      	b.n	80069f6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80069b8:	2108      	movs	r1, #8
 80069ba:	4810      	ldr	r0, [pc, #64]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 80069bc:	f7ff ff89 	bl	80068d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d108      	bne.n	80069d8 <HW_IPCC_Tx_Handler+0x44>
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80069d2:	f000 f8bd 	bl	8006b50 <HW_IPCC_MM_FreeBufHandler>
 80069d6:	e00e      	b.n	80069f6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80069d8:	2120      	movs	r1, #32
 80069da:	4808      	ldr	r0, [pc, #32]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 80069dc:	f7ff ff79 	bl	80068d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <HW_IPCC_Tx_Handler+0x64>
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <HW_IPCC_Tx_Handler+0x68>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80069f2:	f000 f84f 	bl	8006a94 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
}
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	58000c00 	.word	0x58000c00

08006a00 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006a04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a08:	f7ff fed3 	bl	80067b2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006a0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a10:	f7ff fea4 	bl	800675c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006a14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a18:	f7ff fe8c 	bl	8006734 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006a1c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006a1e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006a20:	f7ff fe78 	bl	8006714 <LL_PWR_EnableBootC2>

  return;
 8006a24:	bf00      	nop
}
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006a2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a30:	f7ff fea6 	bl	8006780 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006a34:	4806      	ldr	r0, [pc, #24]	; (8006a50 <HW_IPCC_Init+0x28>)
 8006a36:	f7ff fee8 	bl	800680a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006a3a:	4805      	ldr	r0, [pc, #20]	; (8006a50 <HW_IPCC_Init+0x28>)
 8006a3c:	f7ff fed5 	bl	80067ea <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006a40:	202c      	movs	r0, #44	; 0x2c
 8006a42:	f7fb f966 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006a46:	202d      	movs	r0, #45	; 0x2d
 8006a48:	f7fb f963 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  return;
 8006a4c:	bf00      	nop
}
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	58000c00 	.word	0x58000c00

08006a54 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4802      	ldr	r0, [pc, #8]	; (8006a64 <HW_IPCC_BLE_Init+0x10>)
 8006a5c:	f7ff ff0a 	bl	8006874 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006a60:	bf00      	nop
}
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	58000c00 	.word	0x58000c00

08006a68 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4802      	ldr	r0, [pc, #8]	; (8006a78 <HW_IPCC_BLE_SendCmd+0x10>)
 8006a70:	f7ff ff20 	bl	80068b4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006a74:	bf00      	nop
}
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	58000c00 	.word	0x58000c00

08006a7c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006a80:	f7fe ffe2 	bl	8005a48 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006a84:	2101      	movs	r1, #1
 8006a86:	4802      	ldr	r0, [pc, #8]	; (8006a90 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006a88:	f7ff ff06 	bl	8006898 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006a8c:	bf00      	nop
}
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	58000c00 	.word	0x58000c00

08006a94 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006a98:	2120      	movs	r1, #32
 8006a9a:	4803      	ldr	r0, [pc, #12]	; (8006aa8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006a9c:	f7ff fed8 	bl	8006850 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006aa0:	f7ff f802 	bl	8005aa8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006aa4:	bf00      	nop
}
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	58000c00 	.word	0x58000c00

08006aac <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4802      	ldr	r0, [pc, #8]	; (8006abc <HW_IPCC_SYS_Init+0x10>)
 8006ab4:	f7ff fede 	bl	8006874 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006ab8:	bf00      	nop
}
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	58000c00 	.word	0x58000c00

08006ac0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	4804      	ldr	r0, [pc, #16]	; (8006ad8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006ac8:	f7ff fef4 	bl	80068b4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006acc:	2102      	movs	r1, #2
 8006ace:	4802      	ldr	r0, [pc, #8]	; (8006ad8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006ad0:	f7ff feab 	bl	800682a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006ad4:	bf00      	nop
}
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	58000c00 	.word	0x58000c00

08006adc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	4803      	ldr	r0, [pc, #12]	; (8006af0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006ae4:	f7ff feb4 	bl	8006850 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006ae8:	f7ff f82e 	bl	8005b48 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006aec:	bf00      	nop
}
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	58000c00 	.word	0x58000c00

08006af4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006af8:	f7ff f83c 	bl	8005b74 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006afc:	2102      	movs	r1, #2
 8006afe:	4802      	ldr	r0, [pc, #8]	; (8006b08 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006b00:	f7ff feca 	bl	8006898 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006b04:	bf00      	nop
}
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	58000c00 	.word	0x58000c00

08006b0c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006b14:	2108      	movs	r1, #8
 8006b16:	480c      	ldr	r0, [pc, #48]	; (8006b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b18:	f7ff fedb 	bl	80068d2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006b22:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b28:	2108      	movs	r1, #8
 8006b2a:	4807      	ldr	r0, [pc, #28]	; (8006b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b2c:	f7ff fe7d 	bl	800682a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006b30:	e006      	b.n	8006b40 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b36:	2108      	movs	r1, #8
 8006b38:	4803      	ldr	r0, [pc, #12]	; (8006b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b3a:	f7ff febb 	bl	80068b4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006b3e:	bf00      	nop
}
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	58000c00 	.word	0x58000c00
 8006b4c:	2000029c 	.word	0x2000029c

08006b50 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b54:	2108      	movs	r1, #8
 8006b56:	4806      	ldr	r0, [pc, #24]	; (8006b70 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006b58:	f7ff fe7a 	bl	8006850 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b62:	2108      	movs	r1, #8
 8006b64:	4802      	ldr	r0, [pc, #8]	; (8006b70 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006b66:	f7ff fea5 	bl	80068b4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006b6a:	bf00      	nop
}
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	58000c00 	.word	0x58000c00
 8006b74:	2000029c 	.word	0x2000029c

08006b78 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006b7c:	2108      	movs	r1, #8
 8006b7e:	4802      	ldr	r0, [pc, #8]	; (8006b88 <HW_IPCC_TRACES_Init+0x10>)
 8006b80:	f7ff fe78 	bl	8006874 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006b84:	bf00      	nop
}
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	58000c00 	.word	0x58000c00

08006b8c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006b90:	f7ff f898 	bl	8005cc4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006b94:	2108      	movs	r1, #8
 8006b96:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006b98:	f7ff fe7e 	bl	8006898 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006b9c:	bf00      	nop
}
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58000c00 	.word	0x58000c00

08006ba4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <UTIL_LPM_Init+0x1c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <UTIL_LPM_Init+0x20>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	200002a0 	.word	0x200002a0
 8006bc4:	200002a4 	.word	0x200002a4

08006bc8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bda:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006bdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bde:	b672      	cpsid	i
}
 8006be0:	bf00      	nop
  
  switch(state)
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <UTIL_LPM_SetOffMode+0x32>
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10e      	bne.n	8006c0a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <UTIL_LPM_SetOffMode+0x5c>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	4a0b      	ldr	r2, [pc, #44]	; (8006c24 <UTIL_LPM_SetOffMode+0x5c>)
 8006bf6:	6013      	str	r3, [r2, #0]
      break;
 8006bf8:	e008      	b.n	8006c0c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	43da      	mvns	r2, r3
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <UTIL_LPM_SetOffMode+0x5c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4013      	ands	r3, r2
 8006c04:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <UTIL_LPM_SetOffMode+0x5c>)
 8006c06:	6013      	str	r3, [r2, #0]
      break;
 8006c08:	e000      	b.n	8006c0c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006c0a:	bf00      	nop
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f383 8810 	msr	PRIMASK, r3
}
 8006c16:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	200002a4 	.word	0x200002a4

08006c28 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b090      	sub	sp, #64	; 0x40
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006c30:	4b73      	ldr	r3, [pc, #460]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006c36:	4b72      	ldr	r3, [pc, #456]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	4a70      	ldr	r2, [pc, #448]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006c40:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006c42:	4b70      	ldr	r3, [pc, #448]	; (8006e04 <UTIL_SEQ_Run+0x1dc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006c48:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <UTIL_SEQ_Run+0x1e0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006c4e:	4b6f      	ldr	r3, [pc, #444]	; (8006e0c <UTIL_SEQ_Run+0x1e4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006c54:	4b6e      	ldr	r3, [pc, #440]	; (8006e10 <UTIL_SEQ_Run+0x1e8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006c5a:	e08d      	b.n	8006d78 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006c60:	e002      	b.n	8006c68 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c64:	3301      	adds	r3, #1
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006c68:	4a6a      	ldr	r2, [pc, #424]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	401a      	ands	r2, r3
 8006c74:	4b62      	ldr	r3, [pc, #392]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f1      	beq.n	8006c62 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006c7e:	4a65      	ldr	r2, [pc, #404]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	401a      	ands	r2, r3
 8006c8a:	4b5d      	ldr	r3, [pc, #372]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006c92:	4a60      	ldr	r2, [pc, #384]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006ca4:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006cb2:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f9b3 	bl	800702c <SEQ_BitPosition>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006ccc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006cce:	4a51      	ldr	r2, [pc, #324]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4b4f      	ldr	r3, [pc, #316]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2101      	movs	r1, #1
 8006cde:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	494b      	ldr	r1, [pc, #300]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006cf8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006cfa:	b672      	cpsid	i
}
 8006cfc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006cfe:	4b46      	ldr	r3, [pc, #280]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2201      	movs	r2, #1
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43da      	mvns	r2, r3
 8006d0a:	4b3e      	ldr	r3, [pc, #248]	; (8006e04 <UTIL_SEQ_Run+0x1dc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	4a3c      	ldr	r2, [pc, #240]	; (8006e04 <UTIL_SEQ_Run+0x1dc>)
 8006d12:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006d14:	2302      	movs	r3, #2
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d18:	e013      	b.n	8006d42 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006d20:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006d24:	4b3c      	ldr	r3, [pc, #240]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d32:	3b01      	subs	r3, #1
 8006d34:	400a      	ands	r2, r1
 8006d36:	4937      	ldr	r1, [pc, #220]	; (8006e14 <UTIL_SEQ_Run+0x1ec>)
 8006d38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e8      	bne.n	8006d1a <UTIL_SEQ_Run+0xf2>
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f383 8810 	msr	PRIMASK, r3
}
 8006d52:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006d54:	4b30      	ldr	r3, [pc, #192]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <UTIL_SEQ_Run+0x1f4>)
 8006d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5e:	4798      	blx	r3

    local_taskset = TaskSet;
 8006d60:	4b28      	ldr	r3, [pc, #160]	; (8006e04 <UTIL_SEQ_Run+0x1dc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8006d66:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <UTIL_SEQ_Run+0x1e0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006d6c:	4b27      	ldr	r3, [pc, #156]	; (8006e0c <UTIL_SEQ_Run+0x1e4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8006d72:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <UTIL_SEQ_Run+0x1e8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	401a      	ands	r2, r3
 8006d7e:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <UTIL_SEQ_Run+0x16c>
 8006d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f43f af64 	beq.w	8006c5c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006d94:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <UTIL_SEQ_Run+0x1f0>)
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006d9c:	f000 f938 	bl	8007010 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da0:	f3ef 8310 	mrs	r3, PRIMASK
 8006da4:	613b      	str	r3, [r7, #16]
  return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006da8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006daa:	b672      	cpsid	i
}
 8006dac:	bf00      	nop
  local_taskset = TaskSet;
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <UTIL_SEQ_Run+0x1dc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006db4:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <UTIL_SEQ_Run+0x1e0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <UTIL_SEQ_Run+0x1e4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8006dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	401a      	ands	r2, r3
 8006dc6:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <UTIL_SEQ_Run+0x1e8>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8006ddc:	f7f9 fcdb 	bl	8000796 <UTIL_SEQ_Idle>
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f383 8810 	msr	PRIMASK, r3
}
 8006dea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8006dec:	f000 f917 	bl	800701e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006df0:	4a03      	ldr	r2, [pc, #12]	; (8006e00 <UTIL_SEQ_Run+0x1d8>)
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	6013      	str	r3, [r2, #0]

  return;
 8006df6:	bf00      	nop
}
 8006df8:	3740      	adds	r7, #64	; 0x40
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000024 	.word	0x20000024
 8006e04:	200002a8 	.word	0x200002a8
 8006e08:	200002ac 	.word	0x200002ac
 8006e0c:	20000020 	.word	0x20000020
 8006e10:	200002b0 	.word	0x200002b0
 8006e14:	20000338 	.word	0x20000338
 8006e18:	200002b4 	.word	0x200002b4
 8006e1c:	200002b8 	.word	0x200002b8

08006e20 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e30:	617b      	str	r3, [r7, #20]
  return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006e34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e36:	b672      	cpsid	i
}
 8006e38:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f8f6 	bl	800702c <SEQ_BitPosition>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4619      	mov	r1, r3
 8006e44:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <UTIL_SEQ_RegTask+0x40>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f383 8810 	msr	PRIMASK, r3
}
 8006e56:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006e58:	bf00      	nop
}
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	200002b8 	.word	0x200002b8

08006e64 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e72:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e74:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006e76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e78:	b672      	cpsid	i
}
 8006e7a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <UTIL_SEQ_SetTask+0x50>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <UTIL_SEQ_SetTask+0x50>)
 8006e86:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006e88:	4a0b      	ldr	r2, [pc, #44]	; (8006eb8 <UTIL_SEQ_SetTask+0x54>)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <UTIL_SEQ_SetTask+0x54>)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f383 8810 	msr	PRIMASK, r3
}
 8006ea6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006ea8:	bf00      	nop
}
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	200002a8 	.word	0x200002a8
 8006eb8:	20000338 	.word	0x20000338

08006ebc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ece:	b672      	cpsid	i
}
 8006ed0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	43da      	mvns	r2, r3
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <UTIL_SEQ_PauseTask+0x3c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4013      	ands	r3, r2
 8006edc:	4a06      	ldr	r2, [pc, #24]	; (8006ef8 <UTIL_SEQ_PauseTask+0x3c>)
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f383 8810 	msr	PRIMASK, r3
}
 8006eea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006eec:	bf00      	nop
}
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20000020 	.word	0x20000020

08006efc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f04:	f3ef 8310 	mrs	r3, PRIMASK
 8006f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f0e:	b672      	cpsid	i
}
 8006f10:	bf00      	nop

  TaskMask |= TaskId_bm;
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <UTIL_SEQ_ResumeTask+0x3c>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	4a07      	ldr	r2, [pc, #28]	; (8006f38 <UTIL_SEQ_ResumeTask+0x3c>)
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f383 8810 	msr	PRIMASK, r3
}
 8006f28:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006f2a:	bf00      	nop
}
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000020 	.word	0x20000020

08006f3c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f4e:	b672      	cpsid	i
}
 8006f50:	bf00      	nop

  EvtSet |= EvtId_bm;
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <UTIL_SEQ_SetEvt+0x3c>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	4a07      	ldr	r2, [pc, #28]	; (8006f78 <UTIL_SEQ_SetEvt+0x3c>)
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f383 8810 	msr	PRIMASK, r3
}
 8006f68:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006f6a:	bf00      	nop
}
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	200002ac 	.word	0x200002ac

08006f7c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006f84:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <UTIL_SEQ_WaitEvt+0x88>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <UTIL_SEQ_WaitEvt+0x88>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d102      	bne.n	8006f9a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e005      	b.n	8006fa6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <UTIL_SEQ_WaitEvt+0x88>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <UTIL_SEQ_WaitEvt+0x8c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <UTIL_SEQ_WaitEvt+0x8c>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8006fb2:	e003      	b.n	8006fbc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	69f8      	ldr	r0, [r7, #28]
 8006fb8:	f7f9 fbf4 	bl	80007a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <UTIL_SEQ_WaitEvt+0x90>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f5      	beq.n	8006fb4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006fc8:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <UTIL_SEQ_WaitEvt+0x88>)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fce:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fd4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fd8:	b672      	cpsid	i
}
 8006fda:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	43da      	mvns	r2, r3
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <UTIL_SEQ_WaitEvt+0x90>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <UTIL_SEQ_WaitEvt+0x90>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f383 8810 	msr	PRIMASK, r3
}
 8006ff4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8006ff6:	4a04      	ldr	r2, [pc, #16]	; (8007008 <UTIL_SEQ_WaitEvt+0x8c>)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	6013      	str	r3, [r2, #0]
  return;
 8006ffc:	bf00      	nop
}
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	200002b4 	.word	0x200002b4
 8007008:	200002b0 	.word	0x200002b0
 800700c:	200002ac 	.word	0x200002ac

08007010 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007014:	bf00      	nop
}
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007022:	bf00      	nop
}
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <SEQ_BitPosition+0x24>
 8007046:	2310      	movs	r3, #16
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d105      	bne.n	8007066 <SEQ_BitPosition+0x3a>
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	3308      	adds	r3, #8
 800705e:	73fb      	strb	r3, [r7, #15]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <SEQ_BitPosition+0x50>
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	3304      	adds	r3, #4
 8007074:	73fb      	strb	r3, [r7, #15]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <SEQ_BitPosition+0x74>)
 8007082:	5cd2      	ldrb	r2, [r2, r3]
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	4413      	add	r3, r2
 8007088:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	f1c3 031f 	rsb	r3, r3, #31
 8007090:	b2db      	uxtb	r3, r3
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	08007398 	.word	0x08007398

080070a4 <memset>:
 80070a4:	4402      	add	r2, r0
 80070a6:	4603      	mov	r3, r0
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d100      	bne.n	80070ae <memset+0xa>
 80070ac:	4770      	bx	lr
 80070ae:	f803 1b01 	strb.w	r1, [r3], #1
 80070b2:	e7f9      	b.n	80070a8 <memset+0x4>

080070b4 <__libc_init_array>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4d0d      	ldr	r5, [pc, #52]	; (80070ec <__libc_init_array+0x38>)
 80070b8:	4c0d      	ldr	r4, [pc, #52]	; (80070f0 <__libc_init_array+0x3c>)
 80070ba:	1b64      	subs	r4, r4, r5
 80070bc:	10a4      	asrs	r4, r4, #2
 80070be:	2600      	movs	r6, #0
 80070c0:	42a6      	cmp	r6, r4
 80070c2:	d109      	bne.n	80070d8 <__libc_init_array+0x24>
 80070c4:	4d0b      	ldr	r5, [pc, #44]	; (80070f4 <__libc_init_array+0x40>)
 80070c6:	4c0c      	ldr	r4, [pc, #48]	; (80070f8 <__libc_init_array+0x44>)
 80070c8:	f000 f826 	bl	8007118 <_init>
 80070cc:	1b64      	subs	r4, r4, r5
 80070ce:	10a4      	asrs	r4, r4, #2
 80070d0:	2600      	movs	r6, #0
 80070d2:	42a6      	cmp	r6, r4
 80070d4:	d105      	bne.n	80070e2 <__libc_init_array+0x2e>
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070dc:	4798      	blx	r3
 80070de:	3601      	adds	r6, #1
 80070e0:	e7ee      	b.n	80070c0 <__libc_init_array+0xc>
 80070e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e6:	4798      	blx	r3
 80070e8:	3601      	adds	r6, #1
 80070ea:	e7f2      	b.n	80070d2 <__libc_init_array+0x1e>
 80070ec:	080073a8 	.word	0x080073a8
 80070f0:	080073a8 	.word	0x080073a8
 80070f4:	080073a8 	.word	0x080073a8
 80070f8:	080073ac 	.word	0x080073ac

080070fc <memcpy>:
 80070fc:	440a      	add	r2, r1
 80070fe:	4291      	cmp	r1, r2
 8007100:	f100 33ff 	add.w	r3, r0, #4294967295
 8007104:	d100      	bne.n	8007108 <memcpy+0xc>
 8007106:	4770      	bx	lr
 8007108:	b510      	push	{r4, lr}
 800710a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007112:	4291      	cmp	r1, r2
 8007114:	d1f9      	bne.n	800710a <memcpy+0xe>
 8007116:	bd10      	pop	{r4, pc}

08007118 <_init>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr

08007124 <_fini>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr
